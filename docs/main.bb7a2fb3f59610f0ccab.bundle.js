(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{397:function(module,exports,__webpack_require__){__webpack_require__(398),__webpack_require__(700),__webpack_require__(701),__webpack_require__(892),module.exports=__webpack_require__(895)},492:function(module,exports){},701:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(326)},892:function(module,exports,__webpack_require__){"use strict";var _clientApi=__webpack_require__(146),_clientLogger=__webpack_require__(57),_configFilename=__webpack_require__(932);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),_configFilename.loaders&&_configFilename.loaders.forEach((function(loader){return(0,_clientApi.addLoader)(loader,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},895:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(326).configure)([__webpack_require__(896)],module,!1)}).call(this,__webpack_require__(145)(module))},896:function(module,exports,__webpack_require__){var map={"./index.stories.tsx":931};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=896},931:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SingleSelect",(function(){return index_stories_SingleSelect})),__webpack_require__.d(__webpack_exports__,"MultiSelect",(function(){return index_stories_MultiSelect})),__webpack_require__.d(__webpack_exports__,"Styling",(function(){return index_stories_Styling})),__webpack_require__.d(__webpack_exports__,"Events",(function(){return index_stories_Events})),__webpack_require__.d(__webpack_exports__,"Methods",(function(){return index_stories_Methods})),__webpack_require__.d(__webpack_exports__,"Filtering",(function(){return index_stories_Filtering})),__webpack_require__.d(__webpack_exports__,"Windowing",(function(){return index_stories_Windowing})),__webpack_require__.d(__webpack_exports__,"Advanced",(function(){return index_stories_Advanced})),__webpack_require__.d(__webpack_exports__,"Async",(function(){return index_stories_Async}));var toConsumableArray=__webpack_require__(101),objectSpread2=__webpack_require__(20),slicedToArray=__webpack_require__(3),defineProperty=__webpack_require__(62),jsx_runtime=__webpack_require__(0),react=__webpack_require__(1),react_toastify_esm=__webpack_require__(130),useUpdateEffect_useUpdateEffect=function useUpdateEffect(effect,deps){var isFirstRender=Object(react.useRef)(!0);Object(react.useEffect)((function(){if(!isFirstRender.current)return effect();isFirstRender.current=!1}),deps)},useCallbackState_useCallbackState=function useCallbackState(initialState){var _useState=Object(react.useState)(initialState),_useState2=Object(slicedToArray.a)(_useState,2),state=_useState2[0],setState=_useState2[1];return[state,Object(react.useCallback)((function(newState){return setState(newState)}),[])]},styled_components_browser_esm=__webpack_require__(2),_bounceKeyframes=Object(styled_components_browser_esm.e)(["0%,80%,100%{transform:scale(0);}40%{transform:scale(1.0);}"]),_fadeInKeyframes=Object(styled_components_browser_esm.e)(["from{opacity:0;}to{opacity:1;}"]),BOUNCE_ANIMATION_CSS=Object(styled_components_browser_esm.c)([""," 1.19s ease-in-out infinite"],_bounceKeyframes),FADE_IN_ANIMATION_CSS=Object(styled_components_browser_esm.c)([""," 0.225s ease-in-out forwards"],_fadeInKeyframes),SINGLE_VALUE_BASE_STYLE=Object(styled_components_browser_esm.c)(["top:50%;overflow:hidden;position:absolute;white-space:nowrap;box-sizing:border-box;text-overflow:ellipsis;transform:translateY(-50%);"]),RfsTheme={color:{border:"#ced4da",danger:"#dc3545",primary:"#007bff",disabled:"#e9ecef",placeholder:"#6E7276",dangerLight:"rgba(220, 53, 69, 0.25)"},input:{},select:{},loader:{size:"0.625rem",padding:"0.375rem 0.75rem",animation:BOUNCE_ANIMATION_CSS,color:"rgba(0, 123, 255, 0.42)"},icon:{color:"#ccc",hoverColor:"#A6A6A6",padding:"0 0.9375rem",clear:{width:"14px",height:"16px",animation:FADE_IN_ANIMATION_CSS,transition:"color 0.15s ease-in-out"},caret:{size:"7px",transition:"transform 0.25s ease-in-out, color 0.15s ease-in-out"}},control:{minHeight:"38px",borderWidth:"1px",borderStyle:"solid",borderRadius:"0.25rem",boxShadow:"0 0 0 0.2rem",padding:"0.375rem 0.75rem",boxShadowColor:"rgba(0, 123, 255, 0.25)",focusedBorderColor:"rgba(0, 123, 255, 0.75)",transition:"box-shadow 0.15s ease-in-out, border-color 0.15s ease-in-out"},menu:{padding:"0",width:"100%",margin:"0.5rem 0",borderRadius:"0.25rem",backgroundColor:"#fff",animation:FADE_IN_ANIMATION_CSS,boxShadow:"0 0 0 1px rgba(0, 0, 0, 0.1), 0 4px 11px rgba(0, 0, 0, 0.1)",option:{textAlign:"left",selectedColor:"#fff",selectedBgColor:"#007bff",padding:"0.375rem 0.75rem",focusedBgColor:"rgba(0, 123, 255, 0.20)"}},noOptions:{fontSize:"1.25rem",margin:"0.25rem 0",color:"hsl(0, 0%, 60%)",padding:"0.375rem 0.75rem"},multiValue:{margin:"1px 2px",borderRadius:"0.25rem",backgroundColor:"#e7edf3",animation:FADE_IN_ANIMATION_CSS,label:{fontSize:"0.825em",borderRadius:"0.25rem",padding:"1px 2px 1px 6px"},clear:{fontWeight:700,padding:"0 7px",fontSize:"0.67em",alignItems:"center",borderRadius:"0.25rem",transition:"color 0.15s ease-in-out, background-color 0.15s ease-in-out"}}},OPTION_FOCUSED_CLS="".concat("rfs-option","-focused"),OPTION_SELECTED_CLS="".concat("rfs-option","-selected"),OPTION_DISABLED_CLS="".concat("rfs-option","-disabled"),MultiValueWrapper=styled_components_browser_esm.d.div.withConfig({displayName:"MultiValueWrapper",componentId:"sc-5mvzot-0"})(["min-width:0;display:flex;"," ",""],(function(_ref){var multiValue=_ref.theme.multiValue;return Object(styled_components_browser_esm.c)(["margin:",";animation:",";border-radius:",";background-color:",";"],multiValue.margin,multiValue.animation,multiValue.borderRadius,multiValue.backgroundColor)}),(function(_ref2){return _ref2.theme.multiValue.css})),Label=styled_components_browser_esm.d.div.withConfig({displayName:"Label",componentId:"sc-5mvzot-1"})(["overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding:",";font-size:",";border-radius:",";"],(function(_ref3){return _ref3.theme.multiValue.label.padding}),(function(_ref4){return _ref4.theme.multiValue.label.fontSize}),(function(_ref5){return _ref5.theme.multiValue.label.borderRadius})),Clear=styled_components_browser_esm.d.div.withConfig({displayName:"Clear",componentId:"sc-5mvzot-2"})(["display:flex;",""],(function(_ref6){var isFocused=_ref6.isFocused,_ref6$theme=_ref6.theme,color=_ref6$theme.color,clear=_ref6$theme.multiValue.clear;return Object(styled_components_browser_esm.c)(["padding:",";font-size:",";transition:",";align-items:",";font-weight:",";border-radius:",";background-color:",";:hover{color:",";background-color:",";}"],clear.padding,clear.fontSize,clear.transition,clear.alignItems,clear.fontWeight,clear.borderRadius,isFocused?color.dangerLight:"transparent",color.danger,color.dangerLight)})),components_MultiValue=function MultiValue(_ref7){var data=_ref7.data,value=_ref7.value,isFocused=_ref7.isFocused,renderOptionLabel=_ref7.renderOptionLabel,removeSelectedOption=_ref7.removeSelectedOption;return Object(jsx_runtime.jsxs)(MultiValueWrapper,{children:[Object(jsx_runtime.jsx)(Label,{children:renderOptionLabel(data)}),Object(jsx_runtime.jsx)(Clear,{isFocused:isFocused,"data-testid":void 0,onTouchEnd:function onTouchEnd(e){return removeSelectedOption(value,e)},onMouseDown:function onMouseDown(e){return removeSelectedOption(value,e)},children:"X"})]})},FOCUSED_OPTION_DEFAULT={index:-1},EMPTY_ARRAY=[],DIACRITICS_REGEXP=/[\u0300-\u036f]/g,IE_EDGE_BROWSER_REGEXP=/(MSIE|Trident\/|Edge\/|Edg\/)/i;function isArrayWithLength(test){return Array.isArray(test)&&!!test.length}function isPlainObject(test){return null!==test&&"object"==typeof test&&!Array.isArray(test)}function trimAndFormatFilterStr(value,filterIgnoreCase,filterIgnoreAccents){var trimVal=value.trim();return filterIgnoreCase&&(trimVal=trimVal.toLowerCase()),filterIgnoreAccents?function stripDiacritics(value){return value.normalize("NFD").replace(DIACRITICS_REGEXP,"")}(trimVal):trimVal}function normalizeValue(value,getOptionValue,getOptionLabel){var initialValues=Array.isArray(value)?value:isPlainObject(value)?[value]:EMPTY_ARRAY;return isArrayWithLength(initialValues)?initialValues.map((function(x){return{data:x,value:getOptionValue(x),label:getOptionLabel(x)}})):initialValues}var misc_mergeDeep=function mergeDeep(target,source){var output=Object(objectSpread2.a)({},target);return Object.keys(source).forEach((function(key){var sourceProp=source[key];output[key]=isPlainObject(sourceProp)&&"animation"!==key?key in target?mergeDeep(target[key],sourceProp):sourceProp:sourceProp||""})),output},SingleValue=styled_components_browser_esm.d.div.withConfig({displayName:"SingleValue",componentId:"sc-1137-0"})([""," max-width:calc(100% - 0.5rem);"],SINGLE_VALUE_BASE_STYLE),Placeholder=styled_components_browser_esm.d.div.withConfig({displayName:"Placeholder",componentId:"sc-1137-1"})([""," color:",";"],SINGLE_VALUE_BASE_STYLE,(function(_ref){return _ref.theme.color.placeholder})),Value=Object(react.memo)((function(_ref2){var isMulti=_ref2.isMulti,inputValue=_ref2.inputValue,placeholder=_ref2.placeholder,selectedOption=_ref2.selectedOption,focusedMultiValue=_ref2.focusedMultiValue,renderOptionLabel=_ref2.renderOptionLabel,renderMultiOptions=_ref2.renderMultiOptions,removeSelectedOption=_ref2.removeSelectedOption;return!inputValue||isMulti&&(!isMulti||isArrayWithLength(selectedOption)&&!renderMultiOptions)?isArrayWithLength(selectedOption)?isMulti?Object(jsx_runtime.jsx)(react.Fragment,{children:renderMultiOptions?renderMultiOptions({selected:selectedOption,renderOptionLabel:renderOptionLabel}):selectedOption.map((function(_ref3){var data=_ref3.data,value=_ref3.value;return Object(jsx_runtime.jsx)(components_MultiValue,{data:data,value:value,renderOptionLabel:renderOptionLabel,isFocused:value===focusedMultiValue,removeSelectedOption:removeSelectedOption},value)}))}):Object(jsx_runtime.jsx)(SingleValue,{children:renderOptionLabel(selectedOption[0].data)}):Object(jsx_runtime.jsx)(Placeholder,{children:placeholder}):null}));Value.displayName="Value";var components_Value=Value,SizerDiv=styled_components_browser_esm.d.div.withConfig({displayName:"SizerDiv",componentId:"sc-1ivcalt-0"})(["top:0;left:0;height:0;overflow:scroll;white-space:pre;position:absolute;visibility:hidden;font-size:inherit;font-weight:inherit;font-family:inherit;",""],(function(_ref){return _ref.theme.input.css})),Input=styled_components_browser_esm.d.input.withConfig({displayName:"Input",componentId:"sc-1ivcalt-1"})(["border:0;outline:0;padding:0;cursor:text;background:0;color:inherit;font-size:inherit;font-weight:inherit;font-family:inherit;box-sizing:content-box;:read-only{opacity:0;cursor:default;}:required{","}"," ",""],(function(_ref2){var theme=_ref2.theme;return _ref2.isInvalid&&theme.input.cssRequired}),(function(_ref3){return _ref3.theme.input.css}),function isMicrosoftBrowser(){return"undefined"!=typeof navigator&&IE_EDGE_BROWSER_REGEXP.test(navigator.userAgent)}()&&"::-ms-clear{display:none;}"),AutosizeInput=Object(react.memo)(Object(react.forwardRef)((function(_ref4,ref){var id=_ref4.id,onBlur=_ref4.onBlur,onFocus=_ref4.onFocus,readOnly=_ref4.readOnly,required=_ref4.required,onChange=_ref4.onChange,ariaLabel=_ref4.ariaLabel,inputValue=_ref4.inputValue,addClassNames=_ref4.addClassNames,ariaLabelledBy=_ref4.ariaLabelledBy,selectedOption=_ref4.selectedOption,sizerRef=Object(react.useRef)(null),_useState=Object(react.useState)(2),_useState2=Object(slicedToArray.a)(_useState,2),inputWidth=_useState2[0],setInputWidth=_useState2[1],isInvalid=required&&!isArrayWithLength(selectedOption),autosizeInputAttrs={isInvalid:isInvalid,tabIndex:0,type:"text",spellCheck:!1,autoCorrect:"off",autoComplete:"off",autoCapitalize:"none","aria-label":ariaLabel,"aria-autocomplete":"list","aria-labelledby":ariaLabelledBy,"data-testid":void 0,style:{width:inputWidth}};return useUpdateEffect_useUpdateEffect((function(){sizerRef.current&&setInputWidth(sizerRef.current.scrollWidth+2)}),[inputValue]),Object(jsx_runtime.jsxs)(react.Fragment,{children:[Object(jsx_runtime.jsx)(Input,Object(objectSpread2.a)(Object(objectSpread2.a)({id:id,ref:ref,onBlur:onBlur,onFocus:onFocus,value:inputValue,readOnly:readOnly,required:isInvalid},autosizeInputAttrs),{},{onChange:readOnly?void 0:onChange,className:addClassNames?"rfs-autosize-input":void 0})),Object(jsx_runtime.jsx)(SizerDiv,{ref:sizerRef,children:inputValue})]})})));AutosizeInput.displayName="AutosizeInput";var components_AutosizeInput=AutosizeInput,StyledLoadingDots=styled_components_browser_esm.d.div.withConfig({displayName:"StyledLoadingDots",componentId:"d2zqaw-0"})(["display:flex;align-self:center;text-align:center;margin-right:0.25rem;padding:",";> div{border-radius:100%;display:inline-block;",":nth-of-type(1){animation-delay:-0.272s;}:nth-of-type(2){animation-delay:-0.136s;}}"],(function(_ref){return _ref.theme.loader.padding}),(function(_ref2){var loader=_ref2.theme.loader;return Object(styled_components_browser_esm.c)(["width:",";height:",";background-color:",";animation:",";"],loader.size,loader.size,loader.color,loader.animation)})),components_LoadingDots=function LoadingDots(_ref3){var addClassNames=_ref3.addClassNames;return Object(jsx_runtime.jsxs)(StyledLoadingDots,{"aria-hidden":"true",className:addClassNames?"rfs-loading-dots":void 0,children:[Object(jsx_runtime.jsx)("div",{}),Object(jsx_runtime.jsx)("div",{}),Object(jsx_runtime.jsx)("div",{})]})},IndicatorIconsWrapper=styled_components_browser_esm.d.div.withConfig({displayName:"IndicatorIconsWrapper",componentId:"sc-1r9uxct-0"})(["display:flex;flex-shrink:0;align-items:center;align-self:stretch;box-sizing:border-box;"]),IndicatorIcon=styled_components_browser_esm.d.div.withConfig({displayName:"IndicatorIcon",componentId:"sc-1r9uxct-1"})(["height:100%;display:flex;align-items:center;box-sizing:border-box;color:",";padding:",";:hover{color:",";}",""],(function(_ref){return _ref.theme.icon.color}),(function(_ref2){return _ref2.theme.icon.padding}),(function(_ref3){return _ref3.theme.icon.hoverColor}),(function(_ref4){return _ref4.theme.icon.css})),ClearSvg=styled_components_browser_esm.d.svg.withConfig({displayName:"ClearSvg",componentId:"sc-1r9uxct-2"})(["fill:currentColor;",""],(function(_ref5){var clear=_ref5.theme.icon.clear;return Object(styled_components_browser_esm.c)(["width:",";height:",";animation:",";transition:",";"],clear.width,clear.height,clear.animation,clear.transition)})),Caret=styled_components_browser_esm.d.div.withConfig({displayName:"Caret",componentId:"sc-1r9uxct-3"})(["transition:",";border-top:"," dashed;border-left:"," solid transparent;border-right:"," solid transparent;",""],(function(_ref6){return _ref6.theme.icon.caret.transition}),(function(_ref7){return _ref7.theme.icon.caret.size}),(function(_ref8){return _ref8.theme.icon.caret.size}),(function(_ref9){return _ref9.theme.icon.caret.size}),(function(_ref10){var menuOpen=_ref10.menuOpen,isInvalid=_ref10.isInvalid,color=_ref10.theme.color;return menuOpen&&Object(styled_components_browser_esm.c)(["transform:rotate(180deg);color:",";"],isInvalid?color.danger:color.caretActive||color.primary)})),Separator=styled_components_browser_esm.d.div.withConfig({displayName:"Separator",componentId:"sc-1r9uxct-4"})(["width:1px;margin:0.5rem 0;align-self:stretch;box-sizing:border-box;background-color:",";"],(function(_ref11){var theme=_ref11.theme;return theme.color.iconSeparator||theme.color.border})),IndicatorIcons_ClearIcon=function ClearIcon(_ref12){var addClassNames=_ref12.addClassNames;return Object(jsx_runtime.jsx)(ClearSvg,{"aria-hidden":"true",viewBox:"0 0 14 16",className:addClassNames?"rfs-clear-icon":void 0,children:Object(jsx_runtime.jsx)("path",{fillRule:"evenodd",d:"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"})})},IndicatorIcons=Object(react.memo)((function(_ref13){var menuOpen=_ref13.menuOpen,clearIcon=_ref13.clearIcon,caretIcon=_ref13.caretIcon,isInvalid=_ref13.isInvalid,showClear=_ref13.showClear,isLoading=_ref13.isLoading,isDisabled=_ref13.isDisabled,loadingNode=_ref13.loadingNode,addClassNames=_ref13.addClassNames,onCaretMouseDown=_ref13.onCaretMouseDown,onClearMouseDown=_ref13.onClearMouseDown,forwardState="function"==typeof caretIcon||"function"==typeof clearIcon?{menuOpen:menuOpen,isLoading:!!isLoading,isInvalid:!!isInvalid,isDisabled:!!isDisabled}:void 0,renderIconFn=function renderIconFn(renderer){return"function"==typeof renderer?renderer(forwardState):renderer};return Object(jsx_runtime.jsxs)(IndicatorIconsWrapper,{children:[showClear&&!isLoading&&Object(jsx_runtime.jsx)(IndicatorIcon,{onTouchEnd:onClearMouseDown,onMouseDown:onClearMouseDown,"data-testid":void 0,children:renderIconFn(clearIcon)||Object(jsx_runtime.jsx)(IndicatorIcons_ClearIcon,{addClassNames:addClassNames})}),isLoading&&(loadingNode||Object(jsx_runtime.jsx)(components_LoadingDots,{addClassNames:addClassNames})),Object(jsx_runtime.jsx)(Separator,{}),Object(jsx_runtime.jsx)(IndicatorIcon,{onTouchEnd:onCaretMouseDown,onMouseDown:onCaretMouseDown,"data-testid":void 0,children:renderIconFn(caretIcon)||Object(jsx_runtime.jsx)(Caret,{"aria-hidden":"true",menuOpen:menuOpen,isInvalid:isInvalid,className:addClassNames?"rfs-caret-icon":void 0})})]})}));IndicatorIcons.displayName="IndicatorIcons";var components_IndicatorIcons=IndicatorIcons,index_esm=__webpack_require__(165),Option=Object(react.memo)((function(_ref){var index=_ref.index,style=_ref.style,_ref$data=_ref.data,menuOptions=_ref$data.menuOptions,selectOption=_ref$data.selectOption,renderOptionLabel=_ref$data.renderOptionLabel,focusedOptionIndex=_ref$data.focusedOptionIndex,_menuOptions$index=menuOptions[index],data=_menuOptions$index.data,value=_menuOptions$index.value,label=_menuOptions$index.label,isDisabled=_menuOptions$index.isDisabled,isSelected=_menuOptions$index.isSelected,className=function buildOptionClassName(isDisabled,isSelected,isFocused){var className="rfs-option";return isDisabled&&(className+=" "+OPTION_DISABLED_CLS),isSelected&&(className+=" "+OPTION_SELECTED_CLS),isFocused&&(className+=" "+OPTION_FOCUSED_CLS),className}(isDisabled,isSelected,index===focusedOptionIndex),onClick=isDisabled?void 0:function(){return selectOption({data:data,value:value,label:label},isSelected)};return Object(jsx_runtime.jsx)("div",{style:style,onClick:onClick,className:className,children:renderOptionLabel(data)})}),index_esm.b);Option.displayName="Option";var components_Option=Option,NoOptionsMsg=styled_components_browser_esm.d.div.withConfig({displayName:"NoOptionsMsg",componentId:"sc-1iuktah-0"})(["text-align:center;color:",";margin:",";padding:",";font-size:",";",""],(function(_ref){return _ref.theme.noOptions.color}),(function(_ref2){return _ref2.theme.noOptions.margin}),(function(_ref3){return _ref3.theme.noOptions.padding}),(function(_ref4){return _ref4.theme.noOptions.fontSize}),(function(_ref5){return _ref5.theme.noOptions.css})),Menu=Object(react.forwardRef)((function(_ref6,ref){var width=_ref6.width,height=_ref6.height,itemSize=_ref6.itemSize,isLoading=_ref6.isLoading,loadingMsg=_ref6.loadingMsg,menuOptions=_ref6.menuOptions,selectOption=_ref6.selectOption,noOptionsMsg=_ref6.noOptionsMsg,overscanCount=_ref6.overscanCount,itemKeySelector=_ref6.itemKeySelector,renderOptionLabel=_ref6.renderOptionLabel,focusedOptionIndex=_ref6.focusedOptionIndex,itemKey=Object(react.useMemo)((function(){return itemKeySelector?function(idx,data){return data.menuOptions[idx][itemKeySelector]}:void 0}),[itemKeySelector]),itemData=Object(react.useMemo)((function(){return{menuOptions:menuOptions,selectOption:selectOption,renderOptionLabel:renderOptionLabel,focusedOptionIndex:focusedOptionIndex}}),[menuOptions,focusedOptionIndex,selectOption,renderOptionLabel]);return isLoading?Object(jsx_runtime.jsx)(NoOptionsMsg,{children:loadingMsg}):Object(jsx_runtime.jsxs)(react.Fragment,{children:[Object(jsx_runtime.jsx)(index_esm.a,{ref:ref,width:width,height:height,itemKey:itemKey,itemSize:itemSize,itemData:itemData,overscanCount:overscanCount,itemCount:menuOptions.length,children:components_Option}),!isArrayWithLength(menuOptions)&&Object(jsx_runtime.jsx)(NoOptionsMsg,{children:noOptionsMsg})]})}));Menu.displayName="Menu";var MenuPositionEnum,FilterMatchEnum,ValueIndexEnum,OptionIndexEnum,components_Menu=Menu,A11yText=styled_components_browser_esm.d.span.withConfig({displayName:"A11yText",componentId:"sc-4snj8z-0"})(["border:0;padding:0;width:1px;height:1px;margin:-1px;overflow:hidden;position:absolute;white-space:nowrap;clip:rect(0 0 0 0);clip-path:inset(50%);"]),components_AriaLiveRegion=function AriaLiveRegion(_ref){var menuOpen=_ref.menuOpen,isFocused=_ref.isFocused,ariaLabel=_ref.ariaLabel,inputValue=_ref.inputValue,optionCount=_ref.optionCount,isSearchable=_ref.isSearchable,focusedOption=_ref.focusedOption,selectedOption=_ref.selectedOption;if(!isFocused)return null;var optionsMsg="".concat(optionCount," result(s) available").concat(inputValue?" for search input "+inputValue:"","."),focusedMsg=focusedOption.value?"Focused option: ".concat(focusedOption.label).concat(focusedOption.isDisabled?" - disabled":"",", ").concat(focusedOption.index+1," of ").concat(optionCount,"."):"",menuMsg=menuOpen?"Use Up and Down arrow keys to choose options, press Enter or Tab to select the currently focused option, press Escape to close the menu.":"".concat(ariaLabel||"Select"," is focused").concat(isSearchable?", type to filter options":"",", press Down arrow key to open the menu."),selectedOptionLabel=isArrayWithLength(selectedOption)?selectedOption.map((function(_ref2){return _ref2.label})).join(" "):"N/A",selectedOptionMsg="Selected option: ".concat(selectedOptionLabel),extendedFeedbackMsg="".concat(focusedMsg," ").concat(optionsMsg," ").concat(menuMsg);return Object(jsx_runtime.jsxs)(A11yText,{"aria-live":"polite","data-testid":void 0,children:[Object(jsx_runtime.jsxs)("span",{children:[" ",selectedOptionMsg]}),Object(jsx_runtime.jsxs)("span",{children:[" ",extendedFeedbackMsg]})]})};!function(MenuPositionEnum){MenuPositionEnum.TOP="top",MenuPositionEnum.AUTO="auto",MenuPositionEnum.BOTTOM="bottom"}(MenuPositionEnum||(MenuPositionEnum={})),function(FilterMatchEnum){FilterMatchEnum.ANY="any",FilterMatchEnum.START="start"}(FilterMatchEnum||(FilterMatchEnum={})),function(ValueIndexEnum){ValueIndexEnum.NEXT="next",ValueIndexEnum.PREVIOUS="prev"}(ValueIndexEnum||(ValueIndexEnum={})),function(OptionIndexEnum){OptionIndexEnum.UP="up",OptionIndexEnum.DOWN="down",OptionIndexEnum.LAST="last",OptionIndexEnum.FIRST="first"}(OptionIndexEnum||(OptionIndexEnum={}));var useMenuOptions_useMenuOptions=function useMenuOptions(options,debouncedInputValue,filterMatchFrom,selectedOption,getOptionValue,getOptionLabel,getIsOptionDisabled,getFilterOptionString,filterIgnoreCase,filterIgnoreAccents,isMulti,hideSelectedOptions,async){var _useState=Object(react.useState)(EMPTY_ARRAY),_useState2=Object(slicedToArray.a)(_useState,2),menuOptions=_useState2[0],setMenuOptions=_useState2[1],searchValue=async?"":debouncedInputValue,hideSelectedOptionsOrDefault="boolean"!=typeof hideSelectedOptions?!!isMulti:hideSelectedOptions;return Object(react.useEffect)((function(){for(var normalizedInput=trimAndFormatFilterStr(searchValue,filterIgnoreCase,filterIgnoreAccents),selectedHash=selectedOption.length?new Set(selectedOption.map((function(x){return x.value}))):void 0,getIsOptionDisabledOrDefault=getIsOptionDisabled||function(data){return!!data.isDisabled},getFilterOptionStringOrDefault=getFilterOptionString||function(option){return"string"==typeof option.label?option.label:"".concat(option.label)},parseMenuOption=function parseMenuOption(data){var value=getOptionValue(data),label=getOptionLabel(data),menuOption=Object(objectSpread2.a)(Object(objectSpread2.a)({data:data,value:value,label:label},getIsOptionDisabledOrDefault(data)&&{isDisabled:!0}),(null==selectedHash?void 0:selectedHash.has(value))&&{isSelected:!0});if(!(normalizedInput&&!function isOptionFilterMatch(menuOption){var normalizedOptionLabel=trimAndFormatFilterStr(getFilterOptionStringOrDefault(menuOption),filterIgnoreCase,filterIgnoreAccents);return filterMatchFrom===FilterMatchEnum.ANY?normalizedOptionLabel.indexOf(normalizedInput)>-1:normalizedOptionLabel.substr(0,normalizedInput.length)===normalizedInput}(menuOption)||hideSelectedOptionsOrDefault&&menuOption.isSelected))return menuOption},nextMenuOptions=[],i=0;i<options.length;i++){var _option=parseMenuOption(options[i]);_option&&nextMenuOptions.push(_option)}setMenuOptions(nextMenuOptions)}),[options,selectedOption,searchValue,hideSelectedOptionsOrDefault,filterMatchFrom,filterIgnoreCase,filterIgnoreAccents,getFilterOptionString,getIsOptionDisabled,getOptionValue,getOptionLabel]),menuOptions};function getScrollTop(el){return isDocumentElement(el)?window.pageYOffset:el.scrollTop}function scrollTo(el,top){isDocumentElement(el)?window.scrollTo(0,top):el.scrollTop=top}function isDocumentElement(el){return el===document.documentElement||el===document.body||el===window}function styleHasOverlfow(style){var overflow=style.overflow,overflowX=style.overflowX,overflowY=style.overflowY,isOverflow=function isOverflow(x){return"auto"===x||"scroll"===x};return isOverflow(overflow)||isOverflow(overflowX)||isOverflow(overflowY)}function getScrollParent(el){var style=getComputedStyle(el),excludeStaticParent="absolute"===style.position;if("fixed"===style.position)return document.documentElement;for(var parent=el;parent=parent?parent.parentElement:null;)if(style=getComputedStyle(parent),(!excludeStaticParent||"static"!==style.position)&&styleHasOverlfow(style))return parent;return document.documentElement}var scrollMenuIntoViewOnOpen=function scrollMenuIntoViewOnOpen(menuEl,menuScrollDuration,scrollMenuIntoView,handleOnMenuOpen){if(menuEl){var _menuEl$getBoundingCl=menuEl.getBoundingClientRect(),top=_menuEl$getBoundingCl.top,height=_menuEl$getBoundingCl.height,bottom=_menuEl$getBoundingCl.bottom,viewInner=window.innerHeight;if(viewInner-top>=height)handleOnMenuOpen();else{var scrollParent=getScrollParent(menuEl),scrollTop=getScrollTop(scrollParent),scrollSpaceBelow=scrollParent.getBoundingClientRect().height-scrollTop-top,notEnoughSpaceBelow=scrollSpaceBelow<height;if(!notEnoughSpaceBelow&&scrollMenuIntoView)!function smoothScrollTo(el,to){var duration=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,callback=arguments.length>3?arguments[3]:void 0,currentTime=0,start=getScrollTop(el),change=to-start,easeOutCubic=function easeOutCubic(t){return change*((t=t/duration-1)*t*t+1)+start},smoothScroller=function smoothScroller(){scrollTo(el,easeOutCubic(currentTime+=5)),currentTime<duration?window.requestAnimationFrame(smoothScroller):null==callback||callback()};window.requestAnimationFrame(smoothScroller)}(scrollParent,bottom-viewInner+scrollTop+parseInt(getComputedStyle(menuEl).marginBottom,10),menuScrollDuration,handleOnMenuOpen);else handleOnMenuOpen(notEnoughSpaceBelow?scrollSpaceBelow:void 0)}}else handleOnMenuOpen()},useMenuPositioner_useMenuPositioner=function useMenuPositioner(menuRef,controlRef,menuOpen,menuPosition,menuItemSize,menuHeightDefault,menuOptionsLength,menuScrollDuration,scrollMenuIntoView,onMenuOpen,onMenuClose){var resetMenuHeightRef=Object(react.useRef)(!1),isMenuTopPositionRef=Object(react.useRef)(!1),_useState=Object(react.useState)(menuHeightDefault),_useState2=Object(slicedToArray.a)(_useState,2),menuHeight=_useState2[0],setMenuHeight=_useState2[1],_useState3=Object(react.useState)(menuPosition===MenuPositionEnum.TOP),_useState4=Object(slicedToArray.a)(_useState3,2),isMenuTopPosition=_useState4[0],setIsMenuTopPosition=_useState4[1];Object(react.useEffect)((function(){isMenuTopPositionRef.current=isMenuTopPosition}),[isMenuTopPosition]),Object(react.useEffect)((function(){var isTopPosition=menuPosition===MenuPositionEnum.TOP||menuPosition===MenuPositionEnum.AUTO&&!function menuFitsBelowControl(el){if(!el)return!0;var scrollParent=getScrollParent(el),_el$getBoundingClient=el.getBoundingClientRect(),top=_el$getBoundingClient.top,height=_el$getBoundingClient.height;return scrollParent.getBoundingClientRect().height-getScrollTop(scrollParent)-top>=height}(menuRef.current);setIsMenuTopPosition(isTopPosition)}),[menuRef,menuPosition]),useUpdateEffect_useUpdateEffect((function(){if(menuOpen){var handleOnMenuOpen=function handleOnMenuOpen(availableSpace){null==onMenuOpen||onMenuOpen(),availableSpace&&(resetMenuHeightRef.current=!0,setMenuHeight(availableSpace))};isMenuTopPositionRef.current?handleOnMenuOpen():scrollMenuIntoViewOnOpen(menuRef.current,menuScrollDuration,scrollMenuIntoView,handleOnMenuOpen)}else null==onMenuClose||onMenuClose(),resetMenuHeightRef.current&&(resetMenuHeightRef.current=!1,setMenuHeight(menuHeightDefault))}),[menuRef,menuOpen,onMenuClose,onMenuOpen,menuHeightDefault,scrollMenuIntoView,menuScrollDuration]);var menuHeightCalc=Math.min(menuHeight,menuOptionsLength*menuItemSize);return[isMenuTopPosition?function calculateMenuTop(menuHeight,menuEl,controlEl){var menuHeightOrDefault=menuHeight>0||!menuEl?menuHeight:menuEl.getBoundingClientRect().height,controlHeight=controlEl?controlEl.getBoundingClientRect().height:0,menuElStyle=menuEl&&getComputedStyle(menuEl),marginBottom=menuElStyle?parseInt(menuElStyle.marginBottom,10):0,marginTop=menuElStyle?parseInt(menuElStyle.marginTop,10):0;return"calc("+-Math.abs(menuHeightOrDefault+controlHeight)+"px"+(marginBottom+marginTop)+"px)"}(menuHeightCalc,menuRef.current,controlRef.current):void 0,menuHeightCalc]},SelectWrapper=styled_components_browser_esm.d.div.withConfig({displayName:"SelectWrapper",componentId:"kcrmu9-0"})(["position:relative;box-sizing:border-box;",""],(function(_ref){return _ref.theme.select.css})),ValueWrapper=styled_components_browser_esm.d.div.withConfig({displayName:"ValueWrapper",componentId:"kcrmu9-1"})(["flex:1 1 0%;display:flex;flex-wrap:wrap;overflow:hidden;position:relative;align-items:center;box-sizing:border-box;padding:",";"],(function(_ref2){return _ref2.theme.control.padding})),ControlWrapper=styled_components_browser_esm.d.div.withConfig({displayName:"ControlWrapper",componentId:"kcrmu9-2"})(["outline:0;display:flex;flex-wrap:wrap;cursor:default;position:relative;align-items:center;box-sizing:border-box;justify-content:space-between;"," "," ",""],(function(_ref3){var isDisabled=_ref3.isDisabled,isFocused=_ref3.isFocused,isInvalid=_ref3.isInvalid,_ref3$theme=_ref3.theme,control=_ref3$theme.control,color=_ref3$theme.color;return Object(styled_components_browser_esm.c)(["transition:",";border-style:",";border-width:",";border-radius:",";min-height:",";border-color:",";"," "," "," ",""],control.transition,control.borderStyle,control.borderWidth,control.borderRadius,control.height||control.minHeight,isInvalid?color.danger:isFocused?control.focusedBorderColor:color.border,isDisabled?"pointer-events: none;":"",control.height?"height: ".concat(control.height,";"):"",control.backgroundColor||isDisabled?"background-color: ".concat(isDisabled?color.disabled:control.backgroundColor,";"):"",isFocused?"box-shadow: ".concat(control.boxShadow," ").concat(isInvalid?color.dangerLight:control.boxShadowColor,";"):"")}),(function(_ref4){return _ref4.theme.control.css}),(function(_ref5){var isFocused=_ref5.isFocused,theme=_ref5.theme;return isFocused&&theme.control.focusedCss})),MenuWrapper=styled_components_browser_esm.d.div.withConfig({displayName:"MenuWrapper",componentId:"kcrmu9-3"})(["z-index:999;cursor:default;position:absolute;"," "," .","{display:block;overflow:hidden;user-select:none;white-space:nowrap;text-overflow:ellipsis;-webkit-tap-highlight-color:transparent;","}"],(function(_ref6){var menuTop=_ref6.menuTop,menuOpen=_ref6.menuOpen,menu=_ref6.theme.menu;return Object(styled_components_browser_esm.c)(["width:",";margin:",";padding:",";animation:",";box-shadow:",";border-radius:",";background-color:",";"," ",""],menu.width,menu.margin,menu.padding,menu.animation,menu.boxShadow,menu.borderRadius,menu.backgroundColor,menuOpen?"":"display: none;",menuTop?"top: ".concat(menuTop,";"):"")}),(function(_ref7){return _ref7.theme.menu.css}),"rfs-option",(function(_ref8){var option=_ref8.theme.menu.option;return Object(styled_components_browser_esm.c)(["padding:",";text-align:",";&.",",&:hover:not(.","):not(.","){background-color:",";}&.","{color:",";background-color:",";}&.","{opacity:0.35;}"],option.padding,option.textAlign,OPTION_FOCUSED_CLS,OPTION_DISABLED_CLS,OPTION_SELECTED_CLS,option.focusedBgColor,OPTION_SELECTED_CLS,option.selectedColor,option.selectedBgColor,OPTION_DISABLED_CLS)})),Select=Object(react.forwardRef)((function(_ref9,ref){var async=_ref9.async,isMulti=_ref9.isMulti,inputId=_ref9.inputId,selectId=_ref9.selectId,required=_ref9.required,autoFocus=_ref9.autoFocus,isLoading=_ref9.isLoading,onKeyDown=_ref9.onKeyDown,clearIcon=_ref9.clearIcon,caretIcon=_ref9.caretIcon,isInvalid=_ref9.isInvalid,ariaLabel=_ref9.ariaLabel,menuWidth=_ref9.menuWidth,isDisabled=_ref9.isDisabled,inputDelay=_ref9.inputDelay,onMenuOpen=_ref9.onMenuOpen,onMenuClose=_ref9.onMenuClose,onInputBlur=_ref9.onInputBlur,isClearable=_ref9.isClearable,themeConfig=_ref9.themeConfig,loadingNode=_ref9.loadingNode,initialValue=_ref9.initialValue,onInputFocus=_ref9.onInputFocus,onInputChange=_ref9.onInputChange,addClassNames=_ref9.addClassNames,ariaLabelledBy=_ref9.ariaLabelledBy,onOptionChange=_ref9.onOptionChange,onSearchChange=_ref9.onSearchChange,getOptionLabel=_ref9.getOptionLabel,getOptionValue=_ref9.getOptionValue,itemKeySelector=_ref9.itemKeySelector,openMenuOnFocus=_ref9.openMenuOnFocus,isAriaLiveEnabled=_ref9.isAriaLiveEnabled,menuOverscanCount=_ref9.menuOverscanCount,blurInputOnSelect=_ref9.blurInputOnSelect,renderOptionLabel=_ref9.renderOptionLabel,renderMultiOptions=_ref9.renderMultiOptions,menuScrollDuration=_ref9.menuScrollDuration,filterIgnoreAccents=_ref9.filterIgnoreAccents,hideSelectedOptions=_ref9.hideSelectedOptions,getIsOptionDisabled=_ref9.getIsOptionDisabled,getFilterOptionString=_ref9.getFilterOptionString,_ref9$isSearchable=_ref9.isSearchable,isSearchable=void 0===_ref9$isSearchable||_ref9$isSearchable,_ref9$openMenuOnClick=_ref9.openMenuOnClick,openMenuOnClick=void 0===_ref9$openMenuOnClick||_ref9$openMenuOnClick,_ref9$filterIgnoreCas=_ref9.filterIgnoreCase,filterIgnoreCase=void 0===_ref9$filterIgnoreCas||_ref9$filterIgnoreCas,_ref9$tabSelectsOptio=_ref9.tabSelectsOption,tabSelectsOption=void 0===_ref9$tabSelectsOptio||_ref9$tabSelectsOptio,_ref9$closeMenuOnSele=_ref9.closeMenuOnSelect,closeMenuOnSelect=void 0===_ref9$closeMenuOnSele||_ref9$closeMenuOnSele,_ref9$scrollMenuIntoV=_ref9.scrollMenuIntoView,scrollMenuIntoView=void 0===_ref9$scrollMenuIntoV||_ref9$scrollMenuIntoV,_ref9$backspaceClears=_ref9.backspaceClearsValue,backspaceClearsValue=void 0===_ref9$backspaceClears||_ref9$backspaceClears,_ref9$filterMatchFrom=_ref9.filterMatchFrom,filterMatchFrom=void 0===_ref9$filterMatchFrom?FilterMatchEnum.ANY:_ref9$filterMatchFrom,_ref9$menuPosition=_ref9.menuPosition,menuPosition=void 0===_ref9$menuPosition?MenuPositionEnum.BOTTOM:_ref9$menuPosition,_ref9$options=_ref9.options,options=void 0===_ref9$options?EMPTY_ARRAY:_ref9$options,_ref9$loadingMsg=_ref9.loadingMsg,loadingMsg=void 0===_ref9$loadingMsg?"Loading...":_ref9$loadingMsg,_ref9$placeholder=_ref9.placeholder,placeholder=void 0===_ref9$placeholder?"Select option...":_ref9$placeholder,_ref9$noOptionsMsg=_ref9.noOptionsMsg,noOptionsMsg=void 0===_ref9$noOptionsMsg?"No options":_ref9$noOptionsMsg,_ref9$menuItemSize=_ref9.menuItemSize,menuItemSize=void 0===_ref9$menuItemSize?35:_ref9$menuItemSize,_ref9$menuMaxHeight=_ref9.menuMaxHeight,menuMaxHeight=void 0===_ref9$menuMaxHeight?300:_ref9$menuMaxHeight,menuOpenRef=Object(react.useRef)(!1),prevMenuOptionsLength=Object(react.useRef)(),onChangeEventValue=Object(react.useRef)(!1),listRef=Object(react.useRef)(null),menuRef=Object(react.useRef)(null),inputRef=Object(react.useRef)(null),controlRef=Object(react.useRef)(null),_useState=Object(react.useState)(""),_useState2=Object(slicedToArray.a)(_useState,2),inputValue=_useState2[0],setInputValue=_useState2[1],_useState3=Object(react.useState)(!1),_useState4=Object(slicedToArray.a)(_useState3,2),menuOpen=_useState4[0],setMenuOpen=_useState4[1],_useState5=Object(react.useState)(!1),_useState6=Object(slicedToArray.a)(_useState5,2),isFocused=_useState6[0],setIsFocused=_useState6[1],_useState7=Object(react.useState)(null),_useState8=Object(slicedToArray.a)(_useState7,2),focusedMultiValue=_useState8[0],setFocusedMultiValue=_useState8[1],_useState9=Object(react.useState)(FOCUSED_OPTION_DEFAULT),_useState10=Object(slicedToArray.a)(_useState9,2),focusedOption=_useState10[0],setFocusedOption=_useState10[1],theme=Object(react.useMemo)((function(){return isPlainObject(themeConfig)?misc_mergeDeep(RfsTheme,themeConfig):RfsTheme}),[themeConfig]),getOptionLabelFn=Object(react.useMemo)((function(){return getOptionLabel||function(data){return data.label}}),[getOptionLabel]),getOptionValueFn=Object(react.useMemo)((function(){return getOptionValue||function(data){return data.value}}),[getOptionValue]),renderOptionLabelFn=Object(react.useMemo)((function(){return renderOptionLabel||getOptionLabelFn}),[renderOptionLabel,getOptionLabelFn]),debouncedInputValue=function useDebounce(value,delay){var _useState=Object(react.useState)(value),_useState2=Object(slicedToArray.a)(_useState,2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];return Object(react.useEffect)((function(){if(void 0!==delay){var handler=setTimeout((function(){setDebouncedValue(value)}),delay);return function(){clearTimeout(handler)}}}),[value,delay]),void 0===delay?value:debouncedValue}(inputValue,inputDelay),_useState11=Object(react.useState)((function(){return normalizeValue(initialValue,getOptionValueFn,getOptionLabelFn)})),_useState12=Object(slicedToArray.a)(_useState11,2),selectedOption=_useState12[0],setSelectedOption=_useState12[1],menuOptions=useMenuOptions_useMenuOptions(options,debouncedInputValue,filterMatchFrom,selectedOption,getOptionValueFn,getOptionLabelFn,getIsOptionDisabled,getFilterOptionString,filterIgnoreCase,filterIgnoreAccents,isMulti,hideSelectedOptions,async),_useMenuPositioner=useMenuPositioner_useMenuPositioner(menuRef,controlRef,menuOpen,menuPosition,menuItemSize,menuMaxHeight,menuOptions.length,menuScrollDuration,scrollMenuIntoView,onMenuOpen,onMenuClose),_useMenuPositioner2=Object(slicedToArray.a)(_useMenuPositioner,2),menuStyleTop=_useMenuPositioner2[0],menuHeightCalc=_useMenuPositioner2[1],blurInput=function blurInput(){var _inputRef$current;return null===(_inputRef$current=inputRef.current)||void 0===_inputRef$current?void 0:_inputRef$current.blur()},focusInput=function focusInput(){var _inputRef$current2;return null===(_inputRef$current2=inputRef.current)||void 0===_inputRef$current2?void 0:_inputRef$current2.focus()},scrollToItemIndex=function scrollToItemIndex(index){var _listRef$current;return null===(_listRef$current=listRef.current)||void 0===_listRef$current?void 0:_listRef$current.scrollToItem(index)},handleMouseOrTouchEvent=function handleMouseOrTouchEvent(e,preventDefault){e.stopPropagation(),preventDefault&&e.preventDefault()},removeSelectedOption=Object(react.useCallback)((function(removeValue,e){e&&handleMouseOrTouchEvent(e,"mousedown"===e.type),setSelectedOption((function(prevSelectedOption){return prevSelectedOption.filter((function(_ref10){return _ref10.value!==removeValue}))}))}),[]),openMenuAndFocusOption=Object(react.useCallback)((function(position){if(isArrayWithLength(menuOptions)){var selectedIndex=isMulti?-1:menuOptions.findIndex((function(_ref11){return _ref11.isSelected})),index=selectedIndex>-1?selectedIndex:position===OptionIndexEnum.FIRST?0:menuOptions.length-1;!menuOpenRef.current&&setMenuOpen(!0),setFocusedOption(Object(objectSpread2.a)({index:index},menuOptions[index])),scrollToItemIndex(index)}else!menuOpenRef.current&&setMenuOpen(!0)}),[isMulti,menuOptions]),selectOption=Object(react.useCallback)((function(option,isSelected){isSelected?isMulti&&removeSelectedOption(option.value):setSelectedOption((function(prevSelectedOption){return isMulti?[].concat(Object(toConsumableArray.a)(prevSelectedOption),[option]):[option]})),("boolean"==typeof blurInputOnSelect?blurInputOnSelect:function isTouchDevice(){return"undefined"!=typeof window&&"ontouchstart"in window||"undefined"!=typeof navigator&&!!navigator.maxTouchPoints}())?blurInput():closeMenuOnSelect&&(setMenuOpen(!1),setInputValue(""))}),[isMulti,closeMenuOnSelect,removeSelectedOption,blurInputOnSelect]);Object(react.useImperativeHandle)(ref,(function(){return{blur:blurInput,focus:focusInput,clearValue:function clearValue(){setSelectedOption(EMPTY_ARRAY),setFocusedOption(FOCUSED_OPTION_DEFAULT)},setValue:function setValue(option){var normalizedOptions=normalizeValue(option,getOptionValueFn,getOptionLabelFn);setSelectedOption(normalizedOptions)},toggleMenu:function toggleMenu(state){!0===state||void 0===state&&!menuOpen?(!isFocused&&focusInput(),openMenuAndFocusOption(OptionIndexEnum.FIRST)):blurInput()}}})),Object(react.useEffect)((function(){autoFocus&&focusInput()}),[autoFocus]),Object(react.useEffect)((function(){menuOpenRef.current=menuOpen}),[menuOpen]),Object(react.useEffect)((function(){isFocused&&openMenuOnFocus&&openMenuAndFocusOption(OptionIndexEnum.FIRST)}),[isFocused,openMenuOnFocus,openMenuAndFocusOption]),Object(react.useEffect)((function(){onSearchChange&&onChangeEventValue.current&&(onChangeEventValue.current=!1,onSearchChange(debouncedInputValue))}),[onSearchChange,debouncedInputValue]),useUpdateEffect_useUpdateEffect((function(){if(onOptionChange){var normalizedOptionValue=isMulti?selectedOption.map((function(_ref12){return _ref12.data})):isArrayWithLength(selectedOption)?selectedOption[0].data:null;onOptionChange(normalizedOptionValue)}}),[isMulti,selectedOption,onOptionChange]),useUpdateEffect_useUpdateEffect((function(){var inputChanged=menuOptions.length>0&&(async||menuOptions.length!==options.length||0===prevMenuOptionsLength.current);0===menuOptions.length?setFocusedOption(FOCUSED_OPTION_DEFAULT):(1===menuOptions.length||inputChanged)&&(setFocusedOption(Object(objectSpread2.a)({index:0},menuOptions[0])),scrollToItemIndex(0)),prevMenuOptionsLength.current=menuOptions.length}),[async,options,menuOptions]);var selectOptionFromFocused=function selectOptionFromFocused(){var data=focusedOption.data,value=focusedOption.value,label=focusedOption.label,isSelected=focusedOption.isSelected,disabled=focusedOption.isDisabled;data&&!disabled&&selectOption({data:data,value:value,label:label},isSelected)},handleOnControlMouseDown=function handleOnControlMouseDown(e){if(!isDisabled){isFocused||focusInput();var tagIsNotInput="INPUT"!==e.currentTarget.tagName;menuOpen?tagIsNotInput&&(menuOpen&&setMenuOpen(!1),inputValue&&setInputValue("")):openMenuOnClick&&openMenuAndFocusOption(OptionIndexEnum.FIRST),tagIsNotInput&&e.preventDefault()}},handleOnInputBlur=Object(react.useCallback)((function(e){null==onInputBlur||onInputBlur(e),setIsFocused(!1),setMenuOpen(!1),setInputValue("")}),[onInputBlur]),handleOnInputFocus=Object(react.useCallback)((function(e){null==onInputFocus||onInputFocus(e),setIsFocused(!0)}),[onInputFocus]),handleOnInputChange=Object(react.useCallback)((function(e){onChangeEventValue.current=!0;var inputVal=e.currentTarget.value||"";null==onInputChange||onInputChange(inputVal),!menuOpenRef.current&&setMenuOpen(!0),setInputValue(inputVal)}),[onInputChange]),handleOnClearMouseDown=Object(react.useCallback)((function(e){handleMouseOrTouchEvent(e,"mousedown"===e.type),setSelectedOption(EMPTY_ARRAY),focusInput()}),[]),handleOnCaretMouseDown=Object(react.useCallback)((function(e){handleMouseOrTouchEvent(e,"mousedown"===e.type),focusInput(),menuOpenRef.current?setMenuOpen(!1):openMenuAndFocusOption(OptionIndexEnum.FIRST)}),[openMenuAndFocusOption]);return Object(jsx_runtime.jsx)(styled_components_browser_esm.a,{theme:theme,children:Object(jsx_runtime.jsxs)(SelectWrapper,{id:selectId,role:"combobox","aria-haspopup":"listbox","aria-controls":inputId,"aria-expanded":menuOpen,onKeyDown:function handleOnKeyDown(e){if(!(isDisabled||onKeyDown&&(onKeyDown(e,inputValue,focusedOption),e.defaultPrevented))){switch(e.key){case"ArrowDown":case"ArrowUp":var downKey="ArrowDown"===e.key;menuOpen?function focusOptionOnArrowKey(direction){if(isArrayWithLength(menuOptions)){var index=direction===OptionIndexEnum.DOWN?(focusedOption.index+1)%menuOptions.length:focusedOption.index>0?focusedOption.index-1:menuOptions.length-1;focusedMultiValue&&setFocusedMultiValue(null),setFocusedOption(Object(objectSpread2.a)({index:index},menuOptions[index])),scrollToItemIndex(index)}}(downKey?OptionIndexEnum.DOWN:OptionIndexEnum.UP):openMenuAndFocusOption(downKey?OptionIndexEnum.FIRST:OptionIndexEnum.LAST);break;case"ArrowLeft":case"ArrowRight":if(!isMulti||inputValue||renderMultiOptions)return;!function focusValueOnArrowKey(direction){if(isArrayWithLength(selectedOption)){var nextFocusedIdx=-1,lastValueIdx=selectedOption.length-1,curFocusedIdx=focusedMultiValue?selectedOption.findIndex((function(x){return x.value===focusedMultiValue})):-1;switch(direction){case ValueIndexEnum.NEXT:nextFocusedIdx=curFocusedIdx>-1&&curFocusedIdx<lastValueIdx?curFocusedIdx+1:-1;break;case ValueIndexEnum.PREVIOUS:nextFocusedIdx=0!==curFocusedIdx?-1===curFocusedIdx?lastValueIdx:curFocusedIdx-1:0}var nextFocusedVal=nextFocusedIdx>=0?selectedOption[nextFocusedIdx].value:null;focusedOption.data&&setFocusedOption(FOCUSED_OPTION_DEFAULT),nextFocusedVal!==focusedMultiValue&&setFocusedMultiValue(nextFocusedVal)}}("ArrowLeft"===e.key?ValueIndexEnum.PREVIOUS:ValueIndexEnum.NEXT);break;case" ":if(inputValue)return;if(menuOpen){if(!focusedOption.data)return;selectOptionFromFocused()}else openMenuAndFocusOption(OptionIndexEnum.FIRST);break;case"Enter":menuOpen&&229!==e.keyCode&&selectOptionFromFocused();break;case"Escape":menuOpen&&(setMenuOpen(!1),setInputValue(""));break;case"Tab":if(!menuOpen||!tabSelectsOption||!focusedOption.data||e.shiftKey)return;selectOptionFromFocused();break;case"Delete":case"Backspace":if(inputValue)return;if(focusedMultiValue){var clearFocusedIndex=selectedOption.findIndex((function(_ref13){return _ref13.value===focusedMultiValue})),nexFocusedMultiValue=clearFocusedIndex>-1&&clearFocusedIndex<selectedOption.length-1?selectedOption[clearFocusedIndex+1].value:null;removeSelectedOption(focusedMultiValue),setFocusedMultiValue(nexFocusedMultiValue)}else{if(!backspaceClearsValue)return;if(isArrayWithLength(selectedOption))if(isMulti&&!renderMultiOptions){var _value=selectedOption[selectedOption.length-1].value;removeSelectedOption(_value)}else isClearable&&setSelectedOption(EMPTY_ARRAY)}break;default:return}e.preventDefault()}},"data-testid":void 0,className:addClassNames?"rfs-select-container":void 0,children:[Object(jsx_runtime.jsxs)(ControlWrapper,{ref:controlRef,isInvalid:isInvalid,isFocused:isFocused,isDisabled:isDisabled,onTouchEnd:handleOnControlMouseDown,onMouseDown:handleOnControlMouseDown,"data-testid":void 0,className:addClassNames?"rfs-control-container":void 0,children:[Object(jsx_runtime.jsxs)(ValueWrapper,{children:[Object(jsx_runtime.jsx)(components_Value,{isMulti:isMulti,inputValue:inputValue,placeholder:placeholder,selectedOption:selectedOption,focusedMultiValue:focusedMultiValue,renderOptionLabel:renderOptionLabelFn,renderMultiOptions:renderMultiOptions,removeSelectedOption:removeSelectedOption}),Object(jsx_runtime.jsx)(components_AutosizeInput,{id:inputId,ref:inputRef,required:required,ariaLabel:ariaLabel,inputValue:inputValue,onBlur:handleOnInputBlur,onFocus:handleOnInputFocus,addClassNames:addClassNames,onChange:handleOnInputChange,ariaLabelledBy:ariaLabelledBy,selectedOption:selectedOption,readOnly:isDisabled||!isSearchable||!!focusedMultiValue})]}),Object(jsx_runtime.jsx)(components_IndicatorIcons,{menuOpen:menuOpen,clearIcon:clearIcon,caretIcon:caretIcon,isInvalid:isInvalid,isLoading:isLoading,isDisabled:isDisabled,loadingNode:loadingNode,addClassNames:addClassNames,onClearMouseDown:handleOnClearMouseDown,showClear:!(!isClearable||isDisabled||!isArrayWithLength(selectedOption)),onCaretMouseDown:isDisabled||openMenuOnClick?void 0:handleOnCaretMouseDown})]}),Object(jsx_runtime.jsx)(MenuWrapper,{ref:menuRef,menuOpen:menuOpen,menuTop:menuStyleTop,onMouseDown:function handleOnMenuMouseDown(e){handleMouseOrTouchEvent(e,!0),focusInput()},"data-testid":void 0,className:addClassNames?"rfs-menu-container":void 0,children:Object(jsx_runtime.jsx)(components_Menu,{ref:listRef,isLoading:isLoading,height:menuHeightCalc,itemSize:menuItemSize,loadingMsg:loadingMsg,menuOptions:menuOptions,noOptionsMsg:noOptionsMsg,selectOption:selectOption,itemKeySelector:itemKeySelector,overscanCount:menuOverscanCount,width:menuWidth||theme.menu.width,renderOptionLabel:renderOptionLabelFn,focusedOptionIndex:focusedOption.index})}),isAriaLiveEnabled&&Object(jsx_runtime.jsx)(components_AriaLiveRegion,{menuOpen:menuOpen,isFocused:isFocused,ariaLabel:ariaLabel,inputValue:inputValue,isSearchable:isSearchable,focusedOption:focusedOption,selectedOption:selectedOption,optionCount:menuOptions.length})]})})}));Select.displayName="Select";var regenerator=__webpack_require__(238),regenerator_default=__webpack_require__.n(regenerator),asyncToGenerator=__webpack_require__(391),utils_renderInfoToast=function renderInfoToast(message){react_toastify_esm.a.info(message)},stringifyJavaScriptObj=function stringifyJavaScriptObj(data){return JSON.stringify(data||{},null,2).replace(/"(\w+)"\s*:/g,"$1:").replace(/"/g,"'")},createSelectOptions=function createSelectOptions(optionCount){for(var results=[],i=0;i<optionCount;i+=1)results.push({value:i+1,label:"Option ".concat(i+1)});return results},createAsyncOptions=function createAsyncOptions(optionCount,labelSuffix){return createSelectOptions(optionCount).map((function(option){return{value:"".concat(option.value).concat(labelSuffix),label:"".concat(option.label," - ").concat(labelSuffix)}}))};function _mockHttpRequest(){return(_mockHttpRequest=Object(asyncToGenerator.a)(regenerator_default.a.mark((function _callee(){var delay,_args=arguments;return regenerator_default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return delay=_args.length>0&&void 0!==_args[0]?_args[0]:500,_context.next=3,new Promise((function(resolve){return setTimeout(resolve,delay)}));case 3:case"end":return _context.stop()}}),_callee)})))).apply(this,arguments)}var numberWithCommas=function numberWithCommas(value){return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")},_colorBorderChecked=function hexToRgba(hex){var alpha=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,hexReplacer=hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(m,r,g,b){return"#".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b)})),alphaValid=Math.min(1,Math.max(0,alpha)),rgbaParts=[].concat(Object(toConsumableArray.a)(hexReplacer.substring(1).match(/.{2}/g).map((function(x){return parseInt(x,16)}))),[alphaValid]);return"rgba(".concat(rgbaParts.join(","),")")}("#149DF3",.78),Checkbox_Label=styled_components_browser_esm.d.span.withConfig({displayName:"Label",componentId:"whwv4w-0"})(["user-select:none;margin-left:1.6rem;"]),Checkbox_Input=styled_components_browser_esm.d.input.withConfig({displayName:"Input",componentId:"whwv4w-1"})(["z-index:3;opacity:0;width:1em;height:1em;cursor:pointer;position:absolute;:checked ~ i{border-color:",";:after,:before{opacity:1;transition:height 0.365s ease;}:after{height:0.5rem;}:before{height:1.16rem;transition-delay:0.135s;}}"],_colorBorderChecked),CheckboxWrapper=styled_components_browser_esm.d.label.withConfig({displayName:"CheckboxWrapper",componentId:"whwv4w-2"})(["user-select:none;position:relative;margin-top:0.5rem;align-items:center;display:inline-flex;",""],(function(_ref){return _ref.isReadOnly&&"\n      cursor: default;\n      pointer-events: none;\n      > i {\n        opacity: 0.5;\n      }\n    "})),CheckIcon=styled_components_browser_esm.d.i.withConfig({displayName:"CheckIcon",componentId:"whwv4w-3"})(['z-index:0;width:1rem;height:1rem;position:absolute;border-style:solid;border-width:1.5px;box-sizing:border-box;border-radius:0.0625rem;background-color:transparent;border-color:rgba(0,0,0,0.54);transition:border-color 0.365s ease;:after,:before{height:0;opacity:0;content:"";width:0.2rem;display:block;position:absolute;border-radius:0.25rem;transform-origin:left top;background-color:',";transition:opacity 0.365s ease,height 0s linear 0.365s;}:after{top:0.33rem;left:0.01rem;transform:rotate(-45deg);}:before{top:0.68rem;left:0.39rem;transform:rotate(-135deg);}"],"#149DF3"),components_Checkbox=Object(react.memo)((function(_ref2){var label=_ref2.label,onCheck=_ref2.onCheck,checked=_ref2.checked,readOnly=_ref2.readOnly;return Object(jsx_runtime.jsxs)(CheckboxWrapper,{isReadOnly:readOnly,children:[Object(jsx_runtime.jsx)(Checkbox_Input,{type:"checkbox",checked:checked,onChange:function onChange(e){return onCheck(e.target.checked)}}),Object(jsx_runtime.jsx)(CheckIcon,{}),label&&Object(jsx_runtime.jsx)(Checkbox_Label,{children:label})]})})),dark=__webpack_require__(943),prism_light=__webpack_require__(944),MEDIA_QUERY_IS_MOBILE="@media only screen and (max-width: 768px)",_paragraphCSS=Object(styled_components_browser_esm.c)(["margin-top:0;display:block;margin-bottom:1rem;margin-block-end:1em;margin-inline-end:0px;margin-block-start:1em;margin-inline-start:0px;"]),Content=styled_components_browser_esm.d.p.withConfig({displayName:"Content",componentId:"xuaubw-0"})(["",""],_paragraphCSS),Paragraph=styled_components_browser_esm.d.p.withConfig({displayName:"Paragraph",componentId:"xuaubw-1"})([""," ","{max-width:85%;}"],_paragraphCSS,"@media only screen and (min-width: 992px)"),Container=styled_components_browser_esm.d.div.withConfig({displayName:"Container",componentId:"xuaubw-2"})(["width:100%;display:block;margin-left:auto;margin-right:auto;padding:0.25rem 1.75rem;","{font-size:0.96em;padding:0.25rem 1.25rem;}"],MEDIA_QUERY_IS_MOBILE),SelectContainer=styled_components_browser_esm.d.div.withConfig({displayName:"SelectContainer",componentId:"xuaubw-3"})(["width:60%;margin-top:1rem;","{width:75%;}","{width:100%;}"],"@media only screen and (max-width: 991px) and (min-width: 769px)",MEDIA_QUERY_IS_MOBILE),Hr=styled_components_browser_esm.d.hr.withConfig({displayName:"Hr",componentId:"xuaubw-4"})(["border:0;margin-top:1rem;margin-bottom:1rem;padding-bottom:.225rem;border-top:1px solid #ddd;"]),Columns=styled_components_browser_esm.d.div.withConfig({displayName:"Columns",componentId:"xuaubw-5"})(["width:100%;","{display:flex;}"],"@media only screen and (min-width: 992px)"),Column=styled_components_browser_esm.d.div.withConfig({displayName:"Column",componentId:"xuaubw-6"})(["flex-grow:1;flex-basis:0;flex-shrink:1;display:block;padding:0.25rem;","{padding:0.25rem 0;width:100% !important;}",""],MEDIA_QUERY_IS_MOBILE,(function(_ref){var widthPercent=_ref.widthPercent;return widthPercent&&"\n      flex: none;\n      width: ".concat(widthPercent,"%;\n    ")})),ListWrapper=styled_components_browser_esm.d.div.withConfig({displayName:"ListWrapper",componentId:"xuaubw-7"})([""," ","{max-width:85%;}&.is-class-list{font-weight:500;max-width:100% !important;ul{li + li{margin-top:0.8em !important;}}}"],_paragraphCSS,"@media only screen and (min-width: 992px)"),List=styled_components_browser_esm.d.ul.withConfig({displayName:"List",componentId:"xuaubw-8"})(["display:block;padding-left:1.75rem;margin-block-end:1em;list-style-type:disc;margin-inline-end:0px;margin-block-start:1em;margin-inline-start:0px;padding-inline-start:30px;li + li{margin-top:0.55em;}","{padding-inline-start:20px;}"],MEDIA_QUERY_IS_MOBILE),Li=styled_components_browser_esm.d.li.withConfig({displayName:"Li",componentId:"xuaubw-9"})(["display:list-item;text-align:match-parent;"]),TextHeader=styled_components_browser_esm.d.span.withConfig({displayName:"TextHeader",componentId:"xuaubw-10"})(["color:black;font-weight:600;line-height:1.6;font-size:1.025em;word-break:break-word;padding:3px 0 3px 6.4px;","{padding:.1em .25em .1em;}"],"@media only screen and (max-width: 525px)"),Title=styled_components_browser_esm.d.h2.withConfig({displayName:"Title",componentId:"xuaubw-11"})(["font-size:2rem;font-weight:600;line-height:1.167;margin-top:0.5rem;margin-bottom:.5rem;"]),SubTitle=styled_components_browser_esm.d.h4.withConfig({displayName:"SubTitle",componentId:"xuaubw-12"})(["font-weight:600;line-height:1.167;font-size:1.65rem;margin-top:1.25rem;margin-bottom:0.5rem;letter-spacing:0.00735em;"]),Button=styled_components_browser_esm.d.button.withConfig({displayName:"Button",componentId:"xuaubw-13"})(["border:0;color:#212428;cursor:pointer;font-size:1rem;font-weight:400;line-height:1.5;overflow:visible;user-select:none;text-align:center;border-radius:3px;display:inline-block;vertical-align:middle;padding:0.375rem 0.75rem;-webkit-appearance:button;background-color:rgba(9,30,66,0.075);transition:color 0.2s ease-out,background-color 0.2s ease-out;:focus{outline:0;}:hover,:focus{background-color:rgba(9,30,66,0.125);}","{display:block;width:100% !important;}","{font-size:0.9em;}"],MEDIA_QUERY_IS_MOBILE,"@media only screen and (max-width: 525px)"),Buttons=styled_components_browser_esm.d.div.withConfig({displayName:"Buttons",componentId:"xuaubw-14"})(["> button{min-width:4.5rem;margin-top:0.5rem;:not(:last-of-type){margin-right:0.5rem;}}"]),styled_Label=styled_components_browser_esm.d.label.withConfig({displayName:"Label",componentId:"xuaubw-15"})(["width:100%;font-weight:600;text-align:left;user-select:none;display:inline-block;vertical-align:middle;color:rgba(0,0,0,0.54);margin:0.5rem auto 0.25rem 0;","{margin:0 auto 0.15rem 0;}"],MEDIA_QUERY_IS_MOBILE),Checkboxes=styled_components_browser_esm.d.div.withConfig({displayName:"Checkboxes",componentId:"xuaubw-16"})(["font-size:1rem;> label{margin-top:0.5rem;margin-bottom:0.5rem;:not(:last-of-type){margin-right:1.35rem;}}","{text-align:left;> label{width:100%;margin-left:auto;margin-top:0.5rem;margin-bottom:0.5rem;}}"],MEDIA_QUERY_IS_MOBILE),Card=styled_components_browser_esm.d.div.withConfig({displayName:"Card",componentId:"xuaubw-17"})(["min-width:0;display:flex;margin:1.25rem 0;position:relative;word-wrap:break-word;border-radius:0.25rem;background-color:#fff;flex-direction:column;background-clip:border-box;border:1px solid rgba(0,0,0,0.125);box-shadow:0 2px 8px 0 rgba(0,0,0,0.1);","{border:none;border-radius:0;box-shadow:none;margin:0;}"],MEDIA_QUERY_IS_MOBILE),CardHeader=styled_components_browser_esm.d.div.withConfig({displayName:"CardHeader",componentId:"xuaubw-18"})(["display:flex;font-size:1.15rem;flex-flow:row wrap;background-color:#fff;padding:0.75rem 1.25rem;border-top-left-radius:0.25rem;border-top-right-radius:0.25rem;border-bottom:1px solid rgba(0,0,0,0.125);","{font-size:1.1rem;text-align:center;display:inline-block;padding:0 1.15rem 1rem;}"],MEDIA_QUERY_IS_MOBILE),CardBody=styled_components_browser_esm.d.div.withConfig({displayName:"CardBody",componentId:"xuaubw-19"})(["flex:1 1 auto;min-height:32rem;padding:0.75rem 1.25rem;","{padding:0.75rem 0;}"],MEDIA_QUERY_IS_MOBILE),OtherSpan=styled_components_browser_esm.d.span.withConfig({displayName:"OtherSpan",componentId:"xuaubw-20"})(["opacity:0.75;font-size:0.75em;margin-top:0.05em;margin-left:0.45em;"]),_spinKeyframes=Object(styled_components_browser_esm.e)(["from{transform:rotate(0deg);}to{transform:rotate(360deg);}"]),_spinAnimationCss=Object(styled_components_browser_esm.c)(["animation:"," infinite 8s linear;"],_spinKeyframes),ReactSvg=styled_components_browser_esm.d.svg.withConfig({displayName:"ReactSvg",componentId:"xuaubw-21"})(["width:34px;height:34px;color:#1ea7fd;fill:currentColor;display:inline-block;",""],(function(_ref2){return!_ref2.isDisabled&&_spinAnimationCss})),ChevronDownSvg=styled_components_browser_esm.d.svg.withConfig({displayName:"ChevronDownSvg",componentId:"xuaubw-22"})(["width:14px;height:14px;fill:currentColor;transition:transform 0.25s ease-in-out;",""],(function(_ref3){return _ref3.menuOpen&&"transform: rotate(180deg);"})),OptionContainer=styled_components_browser_esm.d.div.withConfig({displayName:"OptionContainer",componentId:"xuaubw-23"})(["height:100%;display:flex;align-items:center;flex-direction:row;"]),OptionName=styled_components_browser_esm.d.span.withConfig({displayName:"OptionName",componentId:"xuaubw-24"})(["color:#515151;font-size:1em;font-weight:600;margin-left:1px;margin-bottom:1.5px;"]),markup=__webpack_require__(395),javascript=__webpack_require__(396);prism_light.a.registerLanguage("markup",markup.a),prism_light.a.registerLanguage("javascript",javascript.a);var _ThemeConfigMap,CodeMarkupContainer=styled_components_browser_esm.d.div.withConfig({displayName:"CodeMarkupContainer",componentId:"ryfs0v-0"})(["font-size:1rem;overflow:hidden;border-radius:6px;margin:1rem 1.5rem;background-color:#282c34;","{margin:1rem 0;}"],MEDIA_QUERY_IS_MOBILE),Header=styled_components_browser_esm.d.div.withConfig({displayName:"Header",componentId:"ryfs0v-1"})(["line-height:3;color:#999;padding:0 .9rem;font-weight:700;letter-spacing:0.05em;text-transform:uppercase;background-color:#20232a;"]),PreContainer=styled_components_browser_esm.d.div.withConfig({displayName:"PreContainer",componentId:"ryfs0v-2"})(["width:100%;height:100%;overflow:auto;border-radius:6px;min-height:385px !important;max-height:385px !important;pre{font-size:14px;margin:0 !important;border:none !important;box-shadow:none !important;text-shadow:none !important;padding:1em !important;background-color:#282c34 !important;> code{background:none !important;text-shadow:none !important;font-family:source-code-pro,Menlo,Monaco,Consolas,Courier New,monospace !important;display:inherit;color:#fff;.block-comment,.comment{color:#ddd;padding-right:1.75em !important;}.boolean,.function,.number{color:rgb(121,182,242);}.tag{color:rgb(252,146,158);}.attr-name{color:rgb(197,165,197);}.string,.tag.attr-value{color:rgb(141,200,145);}.token.punctuation,.tag.punctuation,.tag.attr-value.punctuation{color:rgb(136,198,190);}.operator{color:rgb(215,222,234);}","{font-size:12px !important;.block-comment,.comment{display:none !important;}}}}"],"@media only screen and (max-width: 525px)"),components_CodeMarkup=Object(react.memo)((function(_ref){var data=_ref.data,header=_ref.header,language=_ref.language,formatFn=_ref.formatFn;return Object(jsx_runtime.jsxs)(CodeMarkupContainer,{children:[Object(jsx_runtime.jsx)(Header,{children:header}),Object(jsx_runtime.jsx)(PreContainer,{children:Object(jsx_runtime.jsx)(prism_light.a,{wrapLines:!0,style:dark.a,showLineNumbers:!0,language:language,useInlineStyles:!1,children:formatFn?formatFn(data):data})})]})})),Link=styled_components_browser_esm.d.a.withConfig({displayName:"Link",componentId:"b5ltkb-0"})(["color:#149DF3;cursor:pointer;font-size:1rem;font-weight:600;line-height:1.2;overflow:visible;user-select:none;padding:0 .05rem;text-align:center;text-decoration:none;display:inline-block;background-color:transparent;box-shadow:0 1px 0 0 currentColor;"]),components_PackageLink=Object(react.memo)((function(_ref){var name=_ref.name,href=_ref.href;return Object(jsx_runtime.jsx)(Link,{href:href,target:"_blank","aria-label":name,rel:"noopener noreferrer",children:name})})),StyledButton=Object(styled_components_browser_esm.d)(Button).withConfig({displayName:"StyledButton",componentId:"sc-31c2l4-0"})(["width:6.25rem;transition:none;",":focus{color:#fff !important;background-color:#149DF3 !important;}"],(function(_ref){return _ref.isActive&&"\n      color: #fff;\n      background-color: #149DF3;\n      :hover {\n        background-color: #0A93E9;\n      }\n    "})),components_OptionsCountButton=function OptionsCountButton(_ref2){var count=_ref2.count,optionsCount=_ref2.optionsCount,setOptionsCount=_ref2.setOptionsCount,isActive=count===optionsCount,onClick=isActive?void 0:function(){return setOptionsCount(count)};return Object(jsx_runtime.jsx)(StyledButton,{onClick:onClick,isActive:isActive,children:numberWithCommas(count)})},PACKAGE_OPTIONS=[{id:1,name:"react"},{id:2,name:"react-dom"},{id:3,name:"reactstrap"},{id:4,name:"react-scripts"},{id:5,name:"react-window"}],CITY_OPTIONS=[{id:1,city:"Boston",state:"MA"},{id:2,city:"Austin",state:"TX"},{id:3,city:"Denver",state:"CO"},{id:4,city:"Chicago",state:"IL"},{id:5,city:"Phoenix",state:"AZ"},{id:6,city:"Houston",state:"TX"},{id:7,city:"Orlando",state:"FL"},{id:8,city:"Portland",state:"OR"},{id:9,city:"Milwaukee",state:"WI"},{id:10,city:"Louisville",state:"KY"}],theme_fadeInKeyframes="FADE_IN_KEYFRAMES 0.225s ease-in-out forwards",_themeAnimations={loader:{animation:"BOUNCE_KEYFRAMES 1.19s ease-in-out infinite"},menu:{animation:theme_fadeInKeyframes},multiValue:{animation:theme_fadeInKeyframes},icon:{clear:{animation:theme_fadeInKeyframes}}},ThemeEnum={DEFAULT:"Default",LARGE_TEXT:"Large text",DARK_COLORS:"Dark colors",ZERO_BORDER_RADIUS:"No border-radius"},ThemeConfigMap=(_ThemeConfigMap={},Object(defineProperty.a)(_ThemeConfigMap,ThemeEnum.DEFAULT,void 0),Object(defineProperty.a)(_ThemeConfigMap,ThemeEnum.DARK_COLORS,{color:{border:"#A8AEB4",primary:"#555555"},select:{css:"color: #000;"},control:{boxShadowColor:"rgba(85, 85, 85, 0.25)",focusedBorderColor:"rgba(85, 85, 85, 0.75)"},icon:{color:"#A6A6A6"},menu:{option:{selectedColor:"#fff",selectedBgColor:"#555555",focusedBgColor:"rgba(85, 85, 85, 0.225)"}}}),Object(defineProperty.a)(_ThemeConfigMap,ThemeEnum.LARGE_TEXT,{select:{css:"font-size: 1.25rem;"}}),Object(defineProperty.a)(_ThemeConfigMap,ThemeEnum.ZERO_BORDER_RADIUS,{control:{borderRadius:"0"},menu:{borderRadius:"0"}}),_ThemeConfigMap),THEME_OPTIONS=function createThemeOptions(ThemeEnum){return Object.keys(ThemeEnum).map((function(key){return{value:ThemeEnum[key],label:ThemeEnum[key]}}))}(ThemeEnum),THEME_DEFAULTS=misc_mergeDeep(RfsTheme,_themeAnimations),THEME_CONFIG={menu:{option:{selectedColor:"#515151",focusedBgColor:"#F5F5F5",selectedBgColor:"#F5F5F5"}}},CLASS_NAME_HTML='<div class="'.concat("rfs-select-container",'">\n  <div class="').concat("rfs-control-container",'">\n    <div>\n      <div>Select option...</div>\n      <input\n        value=""\n        type="text"\n        class="').concat("rfs-autosize-input",'"\n      />\n    </div>\n    <div>\n      <div>\n        <svg\n          aria-hidden="true"\n          viewBox="0 0 14 16"\n          class="').concat("rfs-clear-icon",'"\n        >\n          <path\n            fillRule="evenodd"\n            d="M7.71 8.23l3.75 3.75-1.48..."\n          />\n        </svg>\n      </div>\n      <div />\n      <div>\n        <div\n          aria-hidden="true"\n          class="').concat("rfs-caret-icon",'"\n        />\n      </div>\n    </div>\n  </div>\n  <div class="').concat("rfs-menu-container",'">\n    <div>\n      <div>\n        <div class="').concat("rfs-option",'">\n          Option 1\n        </div>\n        <div class="').concat("rfs-option"," ").concat(OPTION_FOCUSED_CLS,'">\n          Option 2\n        </div>\n        <div class="').concat("rfs-option"," ").concat(OPTION_SELECTED_CLS,'">\n          Option 3\n        </div>\n        <div class="').concat("rfs-option"," ").concat(OPTION_DISABLED_CLS,'">\n          Option 4\n        </div>\n      </div>\n    </div>\n  </div>\n</div>'),STYLED_COMPONENTS_PACKAGE={name:"styled-components",href:"https://www.styled-components.com"},REACT_WINDOW_PACKAGE={name:"react-window",href:"https://github.com/bvaughn/react-window"},TOAST_CONTAINER_PROPS={autoClose:2500,draggable:!1,newestOnTop:!0,position:"top-right"},CHEVRON_DOWN_PATH_PROPS={d:"M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"},REACT_SVG_PATH_PROPS={d:"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"},REACT_SVG_CIRCLE_PROPS={r:"45.7",cx:"420.9",cy:"296.5"},index_stories_SingleSelect=(__webpack_exports__.default={parameters:Object(defineProperty.a)({storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import { useMemo, useRef, useState, useEffect, useCallback, Fragment, ReactNode } from \'react\';\\r\\nimport { toast } from \'react-toastify\';\\r\\nimport { SelectedOption } from \'../src/types\';\\r\\nimport { useUpdateEffect } from \'../src/hooks\';\\r\\nimport { useCallbackState } from \'./helpers/hooks\';\\r\\nimport { CityOption, Option, PackageOption } from \'./helpers/types\';\\r\\nimport { Select, MultiParams, MenuOption, SelectRef, FilterMatchEnum, Theme } from \'../src\';\\r\\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from \'./helpers/components\';\\r\\n\\r\\nimport {\\r\\n  mockHttpRequest,\\r\\n  getRandomInt,\\r\\n  createAsyncOptions,\\r\\n  createSelectOptions,\\r\\n  stringifyJavaScriptObj,\\r\\n  renderInfoToast\\r\\n} from \'./helpers/utils\';\\r\\n\\r\\nimport {\\r\\n  ThemeEnum,\\r\\n  ThemeConfigMap,\\r\\n  THEME_DEFAULTS,\\r\\n  THEME_OPTIONS,\\r\\n  THEME_CONFIG,\\r\\n  CITY_OPTIONS,\\r\\n  PACKAGE_OPTIONS,\\r\\n  CLASS_NAME_HTML,\\r\\n  REACT_WINDOW_PACKAGE,\\r\\n  TOAST_CONTAINER_PROPS,\\r\\n  STYLED_COMPONENTS_PACKAGE,\\r\\n  REACT_SVG_CIRCLE_PROPS,\\r\\n  REACT_SVG_PATH_PROPS,\\r\\n  CHEVRON_DOWN_PATH_PROPS\\r\\n} from \'./helpers/constants\';\\r\\n\\r\\nimport {\\r\\n  OPTION_CLS,\\r\\n  OPTION_FOCUSED_CLS,\\r\\n  OPTION_DISABLED_CLS,\\r\\n  OPTION_SELECTED_CLS,\\r\\n  CARET_ICON_CLS,\\r\\n  CLEAR_ICON_CLS,\\r\\n  LOADING_DOTS_CLS,\\r\\n  AUTOSIZE_INPUT_CLS,\\r\\n  MENU_CONTAINER_CLS,\\r\\n  SELECT_CONTAINER_CLS,\\r\\n  CONTROL_CONTAINER_CLS,\\r\\n} from \'../src/constants/dom\';\\r\\n\\r\\nimport {\\r\\n  Button,\\r\\n  Buttons,\\r\\n  Hr,\\r\\n  Title,\\r\\n  SubTitle,\\r\\n  Label,\\r\\n  Columns,\\r\\n  Column,\\r\\n  Content,\\r\\n  Container,\\r\\n  List,\\r\\n  Li,\\r\\n  ListWrapper,\\r\\n  SelectContainer,\\r\\n  Paragraph,\\r\\n  TextHeader,\\r\\n  Checkboxes,\\r\\n  Card,\\r\\n  CardHeader,\\r\\n  CardBody,\\r\\n  OtherSpan,\\r\\n  OptionContainer,\\r\\n  OptionName,\\r\\n  ReactSvg,\\r\\n  ChevronDownSvg\\r\\n} from \'./helpers/styled\';\\r\\n\\r\\nexport default {\\r\\n  title: \'React Functional Select\'\\r\\n};\\r\\n\\r\\nexport const SingleSelect = () => {\\r\\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\\r\\n  const [isLoading, setIsLoading] = useCallbackState(false);\\r\\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\\r\\n  const [isClearable, setIsClearable] = useCallbackState(true);\\r\\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    isDisabled && setIsInvalid(false);\\r\\n  }, [isDisabled]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Single-select</Title>\\r\\n      <Hr />\\r\\n      <Paragraph>\\r\\n        In this story\'s source code, notice that the callback function\\r\\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\\r\\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\\r\\n        memoization of any callback function property whenever possible. This will boost\\r\\n        performance and reduce the amount of renders as these properties are referenced\\r\\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\\r\\n        and <code>useMemos</code>. When defined in a functional component, wrap in\\r\\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\\r\\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\\r\\n        you can opt to hoist functions outside of the component entirely.\\r\\n      </Paragraph>\\r\\n      <Paragraph>\\r\\n        The <code>options</code> property should also be memoized. Either consume\\r\\n        it directly from a state management store, or make sure it is stable by\\r\\n        avoiding inline or render-based mutations.\\r\\n      </Paragraph>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'Searchable\'\\r\\n              checked={isSearchable}\\r\\n              onCheck={setIsSearchable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Clearable\'\\r\\n              checked={isClearable}\\r\\n              onCheck={setIsClearable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Disabled\'\\r\\n              checked={isDisabled}\\r\\n              onCheck={setIsDisabled}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Invalid\'\\r\\n              checked={isInvalid}\\r\\n              readOnly={isDisabled}\\r\\n              onCheck={setIsInvalid}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Loading\'\\r\\n              checked={isLoading}\\r\\n              onCheck={setIsLoading}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isLoading={isLoading}\\r\\n              isInvalid={isInvalid}\\r\\n              options={CITY_OPTIONS}\\r\\n              isDisabled={isDisabled}\\r\\n              isClearable={isClearable}\\r\\n              isSearchable={isSearchable}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const MultiSelect = () => {\\r\\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\\r\\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\\r\\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\\r\\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\\r\\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  // Example \\"renderMultiOptions\\" property that can be used to further customize labeling for multi-option scenarios\\r\\n  const renderMultiOptions = useCallback(\\r\\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\\r\\n      <Fragment>\\r\\n        {selected.length && renderOptionLabel(selected[0].data)}\\r\\n        {selected.length > 1 && (\\r\\n          <OtherSpan>\\r\\n            {`(+${selected.length - 1} ${selected.length === 2 ? \'other\' : \'others\'})`}\\r\\n          </OtherSpan>\\r\\n        )}\\r\\n      </Fragment>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Multi-select</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>isMulti</code> property to allow for multiple selections.\\r\\n        While in multi-select mode, some properties are now applicable and\\r\\n        others become more pertinent.\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\\r\\n            selected option from the menu. Default value is false, however, if\\r\\n            undefined and <code>isMulti === true</code>, then its value defaults\\r\\n            to true.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\\r\\n            menu of options when the user selects an option. Default value is\\r\\n            false, however, it may be benefical to set this property to true for\\r\\n            convenience in multi-select scenarios.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\\r\\n            Optional callback function that can be used to further customize the selection\\r\\n            label in multi-select scenarios. <code>params</code> is an object that contains\\r\\n            the <code>selected</code> and <code>renderOptionLabel</code> properties (array\\r\\n            of selected options and function used to render individual option labels,\\r\\n            respectively). When this function is defined, left and right arrow navigation\\r\\n            of individual options is disabled. When using this property, it may be be a good\\r\\n            idea to set the property <code>backspaceClearsValue</code> to <em>false</em> in\\r\\n            order to avoid accidentally clearing all selections when searching.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'closeMenuOnSelect\'\\r\\n              checked={closeMenuOnSelect}\\r\\n              onCheck={setCloseMenuOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'hideSelectedOptions\'\\r\\n              checked={hideSelectedOptions}\\r\\n              onCheck={setHideSelectedOptions}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'blurInputOnSelect\'\\r\\n              checked={blurInputOnSelect}\\r\\n              onCheck={setBlurInputOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'openMenuOnClick (click caret if false)\'\\r\\n              checked={openMenuOnClick}\\r\\n              onCheck={setOpenMenuOnClick}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'renderMultiOptions (custom renderer)\'\\r\\n              checked={useRenderMultiOptions}\\r\\n              onCheck={setUseRenderMultiOptions}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isMulti\\r\\n              isClearable\\r\\n              isSearchable\\r\\n              options={CITY_OPTIONS}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              openMenuOnClick={openMenuOnClick}\\r\\n              blurInputOnSelect={blurInputOnSelect}\\r\\n              closeMenuOnSelect={closeMenuOnSelect}\\r\\n              hideSelectedOptions={hideSelectedOptions}\\r\\n              backspaceClearsValue={!useRenderMultiOptions}\\r\\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Styling = () => {\\r\\n  const [themeConfig, setThemeConfig] = useState<Theme>();\\r\\n  const [selectedOption, setSelectedOption] = useCallbackState<SelectedOption | null>(null);\\r\\n\\r\\n  const menuItemSize = selectedOption?.value === ThemeEnum.LARGE_TEXT ? 44 : 35;\\r\\n\\r\\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\\r\\n    <CodeMarkup\\r\\n      language=\'markup\'\\r\\n      header=\'Class Markup\'\\r\\n      data={CLASS_NAME_HTML}\\r\\n    />\\r\\n  ), []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (selectedOption) {\\r\\n      const { value } = selectedOption;\\r\\n      setThemeConfig(ThemeConfigMap[value]);\\r\\n    }\\r\\n  }, [selectedOption]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Styling</Title>\\r\\n      <Hr />\\r\\n      <SubTitle>Theming</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            react-functional-select uses <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to\\r\\n            handle its styling. The root node is wrapped in\\r\\n            styled-component\'s <code>ThemeProvider</code> wrapper component which gives all\\r\\n            child styled-components access to the provided theme via React\'s context API.\\r\\n            To override react-functional-select\'s default theme, pass an object to\\r\\n            the <code>themeConfig</code> property - any matching properties will replace\\r\\n            those in the default theme.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\\r\\n            the <code>themeConfig</code> object contain a <code>css</code> property\\r\\n            of type <code>string | FlattenSimpleInterpolation | undefined</code> (default value\\r\\n            is undefined). This property can be used to pass raw CSS styles as a string or wrapped\\r\\n            in <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported <code>css</code> function.\\r\\n            Those objects are: select, control, icon, menu, noOptions, multiValue, and input.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.7.0</strong>, the control object in <code>themeConfig</code> has\\r\\n            the property <code>focusedCss</code> - which is similar to the <code>css</code> property,\\r\\n            except that it is only applied when the select control is focused (and removed when blurred).\\r\\n          </Content>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>\\r\\n          <CodeMarkup\\r\\n            language=\'javascript\'\\r\\n            data={THEME_DEFAULTS}\\r\\n            header=\'Theme Defaults\'\\r\\n            formatFn={stringifyJavaScriptObj}\\r\\n          />\\r\\n        </Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Using Classes</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            If you want to style the component using CSS classes, set the <code>addClassNames</code> prop\\r\\n            to true and it will then generate <code>className</code> attributes for that specific instance\\r\\n            of the component. These are the classes that are available:\\r\\n          </Content>\\r\\n          <ListWrapper className=\'is-class-list\'>\\r\\n            <List>\\r\\n              <Li>{SELECT_CONTAINER_CLS}</Li>\\r\\n              <Li>{CONTROL_CONTAINER_CLS}</Li>\\r\\n              <Li>{MENU_CONTAINER_CLS}</Li>\\r\\n              <Li>{AUTOSIZE_INPUT_CLS}</Li>\\r\\n              <Li>{CARET_ICON_CLS}</Li>\\r\\n              <Li>{CLEAR_ICON_CLS}</Li>\\r\\n              <Li>{LOADING_DOTS_CLS}</Li>\\r\\n              <Li>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</Li>\\r\\n            </List>\\r\\n          </ListWrapper>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Try selecting different themes</Label>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <Columns>\\r\\n            <Column widthPercent={40}>\\r\\n              <div style={{ marginTop: \'1rem\' }}>\\r\\n                <Select\\r\\n                  isClearable={false}\\r\\n                  isSearchable={false}\\r\\n                  options={THEME_OPTIONS}\\r\\n                  themeConfig={themeConfig}\\r\\n                  menuItemSize={menuItemSize}\\r\\n                  initialValue={THEME_OPTIONS[0]}\\r\\n                  onOptionChange={setSelectedOption}\\r\\n                />\\r\\n              </div>\\r\\n            </Column>\\r\\n            <Column widthPercent={60}>\\r\\n              <CodeMarkup\\r\\n                data={themeConfig}\\r\\n                language=\'javascript\'\\r\\n                header=\'theme-config\'\\r\\n                formatFn={stringifyJavaScriptObj}\\r\\n              />\\r\\n            </Column>\\r\\n          </Columns>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Events = () => {\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\\r\\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\\r\\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\\r\\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\\r\\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\\r\\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\\r\\n\\r\\n  const onOptionChange = useCallback((option: Option | null): void => {\\r\\n    const optionJsonStr = JSON.stringify(option || {}).replace(/\\"/g, \\"\'\\");\\r\\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\\r\\n  }, []);\\r\\n\\r\\n  const onMenuOpen = useCallback((): void => renderInfoToast(\'Menu opened!\'), []);\\r\\n  const onMenuClose = useCallback((): void => renderInfoToast(\'Menu closed!\'), []);\\r\\n  const onInputBlur = useCallback((): void => renderInfoToast(\'Control blurred!\'), []);\\r\\n  const onInputFocus = useCallback((): void => renderInfoToast(\'Control focused!\'), []);\\r\\n  const onKeyDown = useCallback((): void => renderInfoToast(\'keydown event executed!\'), []);\\r\\n\\r\\n  // Configure reat-toastify onMount and cleanup active toasts on beforeDismount\\r\\n  useEffect(() => {\\r\\n    toast.configure(TOAST_CONTAINER_PROPS);\\r\\n\\r\\n    return () => {\\r\\n      toast.dismiss();\\r\\n    };\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Events</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        There are various callback function properties that are executed following\\r\\n        their associated events:\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\\r\\n            executed after an option is selected or removed\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is opened\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is closed\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            executed after the input control\'s value changes\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is blurred\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is focused\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>\\r\\n              onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void\\r\\n            </TextHeader> -\\r\\n            executed after the onKeyDown event\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            executed after the input value is persisted to state; this value also evaluates\\r\\n            the <code>inputDelay</code> property for debouncing - this callback is really\\r\\n            only useful when <code>inputDelay</code> is defined, and if not, it probably\\r\\n            makes more sense to use the <code>onInputChange</code> callback\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Events trigger a toast notification</Label>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'onOptionChange\'\\r\\n              checked={addOnOptionChange}\\r\\n              onCheck={setAddOnOptionChange}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuOpen\'\\r\\n              checked={addOnMenuOpen}\\r\\n              onCheck={setAddOnMenuOpen}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuClose\'\\r\\n              checked={addOnMenuClose}\\r\\n              onCheck={setAddOnMenuClose}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputBlur\'\\r\\n              checked={addOnInputBlur}\\r\\n              onCheck={setAddOnInputBlur}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputFocus\'\\r\\n              checked={addOnInputFocus}\\r\\n              onCheck={setAddOnInputFocus}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onKeyDown\'\\r\\n              checked={addOnKeyDown}\\r\\n              onCheck={setAddOnKeyDown}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              options={options}\\r\\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\\r\\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\\r\\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\\r\\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\\r\\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\\r\\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Methods = () => {\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const blurSelect = (): void => selectRef.current?.blur();\\r\\n  const focusSelect = (): void => selectRef.current?.focus();\\r\\n  const clearValue = (): void => selectRef.current?.clearValue();\\r\\n  const toggleMenuOpen = (): void => selectRef.current?.toggleMenu(true);\\r\\n  const updateSelectedOption = (): void => selectRef.current?.setValue(options[0]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Methods</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Five public methods are exposed to wrapping components and are\\r\\n        accessible via a forwarded <code>ref</code>.\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>blur(): void</TextHeader> - blur the control\\r\\n            programatically\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>focus(): void</TextHeader> - focus the control\\r\\n            programatically\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> -\\r\\n            toggle the menu programatically\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\\r\\n            value programatically <em>(if an option is selected)</em>\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\\r\\n            value programatically <em>(option will be validated)</em>\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Methods</Label>\\r\\n          <Buttons>\\r\\n            <Button onClick={focusSelect}>Focus</Button>\\r\\n            <Button onClick={blurSelect}>Blur</Button>\\r\\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\\r\\n            <Button onClick={clearValue}>Clear Value</Button>\\r\\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\\r\\n          </Buttons>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              ref={selectRef}\\r\\n              options={options}\\r\\n              initialValue={options[0]}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Filtering = () => {\\r\\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\\r\\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\\r\\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\\r\\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\\r\\n\\r\\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: \'São Paulo\', state: \'BR\' }], []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Filter Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        The default filtering functionality can be customized via the following properties:\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\\r\\n            case when matching strings. Default value is <code>true</code>.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\\r\\n            ignores accents when matching strings. Default value is <code>false</code>.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>filterMatchFrom?: \'any\' | \'start\'</TextHeader> -\\r\\n            Position in source string to perform match. Default value is <code>\'any\'</code>.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\\r\\n            When defined will take each option and generate a string used in\\r\\n            the filtering process. By default, the stringified version of what is\\r\\n            generated by <code>getOptionLabel</code>, if definded, or the option\'s label\\r\\n            as a fallback. The <code>MenuOption</code> typed parameter\\r\\n            that <code>getFilterOptionString</code> accepts contains a <code>data</code> property\\r\\n            that represents the objects that comprise your <code>options</code> property.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'Ignore Case\'\\r\\n              checked={filterIgnoreCase}\\r\\n              onCheck={setFilterIgnoreCase}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Ignore Accents\'\\r\\n              checked={filterIgnoreAccents}\\r\\n              onCheck={setFilterIgnoreAccents}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Match from the start\'\\r\\n              checked={filterMatchFromStart}\\r\\n              onCheck={setFilterMatchFromStart}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Use custom filter function (by state only)\'\\r\\n              checked={useCustomFilterFunc}\\r\\n              onCheck={setUseCustomFilterFunc}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isClearable\\r\\n              options={options}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              filterIgnoreCase={filterIgnoreCase}\\r\\n              filterIgnoreAccents={filterIgnoreAccents}\\r\\n              getFilterOptionString={useCustomFilterFunc ? getFilterOptionString : undefined}\\r\\n              filterMatchFrom={filterMatchFromStart ? FilterMatchEnum.START : FilterMatchEnum.ANY}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Windowing = () => {\\r\\n  const optionCountList: number[] = [100, 1000, 5000, 25000, 50000];\\r\\n\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n  const [options, setOptions] = useState<Option[]>([]);\\r\\n  const [optionsCount, setOptionsCount] = useState<number>(optionCountList[0]);\\r\\n\\r\\n  useUpdateEffect(() => {\\r\\n    selectRef.current?.clearValue();\\r\\n  }, [options]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const nextSelectOptions = createSelectOptions(optionsCount);\\r\\n    setOptions(nextSelectOptions);\\r\\n  }, [optionsCount]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Integrated Windowing</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Option data is \'windowed\' using the{\' \'}\\r\\n        <PackageLink {...REACT_WINDOW_PACKAGE} /> package. Aside from the\\r\\n        obvious benefits provided by only rendering a small subset of your\\r\\n        enumerable data (rather than bloating the DOM with an excessive amount\\r\\n        of nodes), \'windowing\' can also assist with:\\r\\n        <List>\\r\\n          <Li>\\r\\n            <strong>Efficient memory allocation</strong>. \'Windowing\' naturally\\r\\n            lends itself to the dynamic generation of attributes/values as each\\r\\n            object comes into your renderer\'s scope (as opposed to allocating\\r\\n            this data upfront for each object in your list). This way you can\\r\\n            perform this work just when you absolutely need to and then can\\r\\n            immediately release it for the GC to cleanup. As an example I am\\r\\n            generating the <code>onClick</code>, <code>id</code>, and{\' \'}\\r\\n            <code>className</code> attributes for each <code>menuOption</code>{\' \'}\\r\\n            as they get passed to the <code>&lt;Option /&gt;</code> renderer\\r\\n            component.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <strong>Functional architecture</strong>. The flexibility provided\\r\\n            through only having to manage subsets of your list allows for a more\\r\\n            dynamic application. By breaking your code out into smaller, \'pure\'\\r\\n            child components, you can write code that scales well and becomes\\r\\n            open to performance optimizations - most notably, memoization.\\r\\n            Simple components that rely on the props passed to it (rather than\\r\\n            its own managed state) to generate its JSX are likely candidates for\\r\\n            memoization (testing &amp; debugging becomes much easier as well).\\r\\n          </Li>\\r\\n        </List>\\r\\n        <em>Note: </em>The only time any noticeable performance degradation will\\r\\n        be observed is during search input updates when the <code>options</code>{\' \'}\\r\\n        count reaches the high tens of thousands. To work around this, the{\' \'}\\r\\n        <code>inputDelay</code> (number in milliseconds) can be set to debounce\\r\\n        the input value. That way, the <code>menuOptions</code> will not be\\r\\n        recalculated on every keystroke.\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Options Count</Label>\\r\\n          <Buttons>\\r\\n            {optionCountList.map((count) => (\\r\\n              <OptionsCountButton\\r\\n                key={count}\\r\\n                count={count}\\r\\n                optionsCount={optionsCount}\\r\\n                setOptionsCount={setOptionsCount}\\r\\n              />\\r\\n            ))}\\r\\n          </Buttons>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select ref={selectRef} options={options} />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Advanced = () => {\\r\\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\\r\\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => option.name === PACKAGE_OPTIONS[3].name, []);\\r\\n\\r\\n  const renderOptionLabel = useCallback(\\r\\n    (option: PackageOption): ReactNode => (\\r\\n      <OptionContainer>\\r\\n        <ReactSvg\\r\\n          aria-hidden=\'true\'\\r\\n          viewBox=\'0 0 841.9 595.3\'\\r\\n          isDisabled={getIsOptionDisabled(option)}\\r\\n        >\\r\\n          <path {...REACT_SVG_PATH_PROPS} />\\r\\n          <circle {...REACT_SVG_CIRCLE_PROPS} />\\r\\n        </ReactSvg>\\r\\n        <OptionName>{option.name}</OptionName>\\r\\n      </OptionContainer>\\r\\n    ),\\r\\n    [getIsOptionDisabled]\\r\\n  );\\r\\n\\r\\n  const customCaretIcon = useCallback(\\r\\n    ({ menuOpen }): ReactNode => (\\r\\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden=\'true\' viewBox=\'0 0 448 512\'>\\r\\n        <path {...CHEVRON_DOWN_PATH_PROPS} />\\r\\n      </ChevronDownSvg>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Advanced Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Implementation using a couple of the more specialized properties.\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\\r\\n            function with a return type of <code>ReactNode</code>. Use this property in cases\\r\\n            where the standard <code>getOptionLabel</code> property won\'t meet your needs (for\\r\\n            instance, you want to render each option\'s label using custom JSX). More complex\\r\\n            option labels will likely equate to longer render durations - this can translate\\r\\n            into a flash of empty space when a user first starts scrolling. In order to prevent\\r\\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\\r\\n            rows outside of the visible area. The default value for this property is 1 and it is\\r\\n            important to note that increasing this value can negatively impact performance.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\\r\\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\\r\\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\\r\\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\\r\\n            options - they cannot both be specified.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\\r\\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\\r\\n            When using a function, an object containing stateful data is forwarded and can be used to style\\r\\n            your custom node accordingly. The state is <code>{\'{ menuOpen, isLoading, isInvalid, isDisabled }\'}</code> of\\r\\n            type <code>Record&lt;string, boolean&gt;</code>. The <code>clearIcon</code> property has an identical definition.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>JSX labels, custom caret icon, and disabled option</Label>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isSearchable={false}\\r\\n              options={PACKAGE_OPTIONS}\\r\\n              themeConfig={THEME_CONFIG}\\r\\n              caretIcon={customCaretIcon}\\r\\n              getOptionValue={getOptionValue}\\r\\n              renderOptionLabel={renderOptionLabel}\\r\\n              getIsOptionDisabled={getIsOptionDisabled}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Async = () => {\\r\\n  const [isLoading, setIsLoading] = useState<boolean>(false);\\r\\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, \'Initial\'));\\r\\n\\r\\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\\r\\n\\r\\n  const onSearchChange = useCallback((value?: string): void => {\\r\\n    mockHttpRequest()\\r\\n      .then(() => {\\r\\n        const nextOptions = createAsyncOptions(\\r\\n          getRandomInt(1, 5),\\r\\n          `Search text: ${value || \'Initial\'}`\\r\\n        );\\r\\n\\r\\n        setOptions(nextOptions);\\r\\n      })\\r\\n      .catch((err) => console.error(err))\\r\\n      .then(() => setIsLoading(false));\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Async Mode</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>async</code> property to enable async mode. There is one key\\r\\n        difference in core functionality with async mode - changes to search input\\r\\n        value will not cause the <code>useMenuOptions</code> effect to run. The rest\\r\\n        of hooking into async mode is achieved using some combination of the properties\\r\\n        found below. <em>Properties onInputChange and onSearchChange should be memoized.</em>\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            callback executed directly following the input control\'s <code>onChange</code> event.\\r\\n            This callback is not debounced, so it fires immediately. This is a good\\r\\n            place to set a stateful loading property in your parent component that is mapped to\\r\\n            react-functional-select\'s <code>isLoading</code> property.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            callback executed following component state updates for\\r\\n            the <code>debouncedInputValue</code>. The debounce is set using\\r\\n            the <code>inputDelay</code> property. This callback is a good place for your\\r\\n            http fetch request and post-request logic (i.e. setting isLoading false).\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\\r\\n            set to a positive integer in order to debounce updates to the search input value\\r\\n            following input change events. This property directly maps to the <code>delay</code> in\\r\\n            milliconds passed to the <code>setTimeout</code> method.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\\r\\n            appear in the far-right of the control and take the place of the clear icon (if shown).\\r\\n            Additionally, it will hide options in the menu and instead, display a loading message.\\r\\n            The loading message text defaults to \'Loading...\', but can be overriden via\\r\\n            the <code>loadingMsg</code> property.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Search debounced 500ms and mock HTTP call resolves after 500ms</Label>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              async\\r\\n              isClearable\\r\\n              inputDelay={500}\\r\\n              options={options}\\r\\n              isLoading={isLoading}\\r\\n              onInputChange={onInputChange}\\r\\n              onSearchChange={onSearchChange}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"SingleSelect":{"startLoc":{"col":28,"line":82},"endLoc":{"col":1,"line":167},"startBody":{"col":28,"line":82},"endBody":{"col":1,"line":167}},"MultiSelect":{"startLoc":{"col":27,"line":169},"endLoc":{"col":1,"line":281},"startBody":{"col":27,"line":169},"endBody":{"col":1,"line":281}},"Styling":{"startLoc":{"col":23,"line":283},"endLoc":{"col":1,"line":400},"startBody":{"col":23,"line":283},"endBody":{"col":1,"line":400}},"Events":{"startLoc":{"col":22,"line":402},"endLoc":{"col":1,"line":533},"startBody":{"col":22,"line":402},"endBody":{"col":1,"line":533}},"Methods":{"startLoc":{"col":23,"line":535},"endLoc":{"col":1,"line":600},"startBody":{"col":23,"line":535},"endBody":{"col":1,"line":600}},"Filtering":{"startLoc":{"col":25,"line":602},"endLoc":{"col":1,"line":688},"startBody":{"col":25,"line":602},"endBody":{"col":1,"line":688}},"Windowing":{"startLoc":{"col":25,"line":690},"endLoc":{"col":1,"line":771},"startBody":{"col":25,"line":690},"endBody":{"col":1,"line":771}},"Advanced":{"startLoc":{"col":24,"line":773},"endLoc":{"col":1,"line":859},"startBody":{"col":24,"line":773},"endBody":{"col":1,"line":859}},"Async":{"startLoc":{"col":21,"line":861},"endLoc":{"col":1,"line":943},"startBody":{"col":21,"line":861},"endBody":{"col":1,"line":943}}};\nimport { useMemo, useRef, useState, useEffect, useCallback, Fragment, ReactNode } from \'react\';\r\nimport { toast } from \'react-toastify\';\r\nimport { SelectedOption } from \'../src/types\';\r\nimport { useUpdateEffect } from \'../src/hooks\';\r\nimport { useCallbackState } from \'./helpers/hooks\';\r\nimport { CityOption, Option, PackageOption } from \'./helpers/types\';\r\nimport { Select, MultiParams, MenuOption, SelectRef, FilterMatchEnum, Theme } from \'../src\';\r\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from \'./helpers/components\';\r\n\r\nimport {\r\n  mockHttpRequest,\r\n  getRandomInt,\r\n  createAsyncOptions,\r\n  createSelectOptions,\r\n  stringifyJavaScriptObj,\r\n  renderInfoToast\r\n} from \'./helpers/utils\';\r\n\r\nimport {\r\n  ThemeEnum,\r\n  ThemeConfigMap,\r\n  THEME_DEFAULTS,\r\n  THEME_OPTIONS,\r\n  THEME_CONFIG,\r\n  CITY_OPTIONS,\r\n  PACKAGE_OPTIONS,\r\n  CLASS_NAME_HTML,\r\n  REACT_WINDOW_PACKAGE,\r\n  TOAST_CONTAINER_PROPS,\r\n  STYLED_COMPONENTS_PACKAGE,\r\n  REACT_SVG_CIRCLE_PROPS,\r\n  REACT_SVG_PATH_PROPS,\r\n  CHEVRON_DOWN_PATH_PROPS\r\n} from \'./helpers/constants\';\r\n\r\nimport {\r\n  OPTION_CLS,\r\n  OPTION_FOCUSED_CLS,\r\n  OPTION_DISABLED_CLS,\r\n  OPTION_SELECTED_CLS,\r\n  CARET_ICON_CLS,\r\n  CLEAR_ICON_CLS,\r\n  LOADING_DOTS_CLS,\r\n  AUTOSIZE_INPUT_CLS,\r\n  MENU_CONTAINER_CLS,\r\n  SELECT_CONTAINER_CLS,\r\n  CONTROL_CONTAINER_CLS,\r\n} from \'../src/constants/dom\';\r\n\r\nimport {\r\n  Button,\r\n  Buttons,\r\n  Hr,\r\n  Title,\r\n  SubTitle,\r\n  Label,\r\n  Columns,\r\n  Column,\r\n  Content,\r\n  Container,\r\n  List,\r\n  Li,\r\n  ListWrapper,\r\n  SelectContainer,\r\n  Paragraph,\r\n  TextHeader,\r\n  Checkboxes,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  OtherSpan,\r\n  OptionContainer,\r\n  OptionName,\r\n  ReactSvg,\r\n  ChevronDownSvg\r\n} from \'./helpers/styled\';\r\n\r\nexport default {parameters: {"storySource":{"source":"import { useMemo, useRef, useState, useEffect, useCallback, Fragment, ReactNode } from \'react\';\\r\\nimport { toast } from \'react-toastify\';\\r\\nimport { SelectedOption } from \'../src/types\';\\r\\nimport { useUpdateEffect } from \'../src/hooks\';\\r\\nimport { useCallbackState } from \'./helpers/hooks\';\\r\\nimport { CityOption, Option, PackageOption } from \'./helpers/types\';\\r\\nimport { Select, MultiParams, MenuOption, SelectRef, FilterMatchEnum, Theme } from \'../src\';\\r\\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from \'./helpers/components\';\\r\\n\\r\\nimport {\\r\\n  mockHttpRequest,\\r\\n  getRandomInt,\\r\\n  createAsyncOptions,\\r\\n  createSelectOptions,\\r\\n  stringifyJavaScriptObj,\\r\\n  renderInfoToast\\r\\n} from \'./helpers/utils\';\\r\\n\\r\\nimport {\\r\\n  ThemeEnum,\\r\\n  ThemeConfigMap,\\r\\n  THEME_DEFAULTS,\\r\\n  THEME_OPTIONS,\\r\\n  THEME_CONFIG,\\r\\n  CITY_OPTIONS,\\r\\n  PACKAGE_OPTIONS,\\r\\n  CLASS_NAME_HTML,\\r\\n  REACT_WINDOW_PACKAGE,\\r\\n  TOAST_CONTAINER_PROPS,\\r\\n  STYLED_COMPONENTS_PACKAGE,\\r\\n  REACT_SVG_CIRCLE_PROPS,\\r\\n  REACT_SVG_PATH_PROPS,\\r\\n  CHEVRON_DOWN_PATH_PROPS\\r\\n} from \'./helpers/constants\';\\r\\n\\r\\nimport {\\r\\n  OPTION_CLS,\\r\\n  OPTION_FOCUSED_CLS,\\r\\n  OPTION_DISABLED_CLS,\\r\\n  OPTION_SELECTED_CLS,\\r\\n  CARET_ICON_CLS,\\r\\n  CLEAR_ICON_CLS,\\r\\n  LOADING_DOTS_CLS,\\r\\n  AUTOSIZE_INPUT_CLS,\\r\\n  MENU_CONTAINER_CLS,\\r\\n  SELECT_CONTAINER_CLS,\\r\\n  CONTROL_CONTAINER_CLS,\\r\\n} from \'../src/constants/dom\';\\r\\n\\r\\nimport {\\r\\n  Button,\\r\\n  Buttons,\\r\\n  Hr,\\r\\n  Title,\\r\\n  SubTitle,\\r\\n  Label,\\r\\n  Columns,\\r\\n  Column,\\r\\n  Content,\\r\\n  Container,\\r\\n  List,\\r\\n  Li,\\r\\n  ListWrapper,\\r\\n  SelectContainer,\\r\\n  Paragraph,\\r\\n  TextHeader,\\r\\n  Checkboxes,\\r\\n  Card,\\r\\n  CardHeader,\\r\\n  CardBody,\\r\\n  OtherSpan,\\r\\n  OptionContainer,\\r\\n  OptionName,\\r\\n  ReactSvg,\\r\\n  ChevronDownSvg\\r\\n} from \'./helpers/styled\';\\r\\n\\r\\nexport default {\\r\\n  title: \'React Functional Select\'\\r\\n};\\r\\n\\r\\nexport const SingleSelect = () => {\\r\\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\\r\\n  const [isLoading, setIsLoading] = useCallbackState(false);\\r\\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\\r\\n  const [isClearable, setIsClearable] = useCallbackState(true);\\r\\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    isDisabled && setIsInvalid(false);\\r\\n  }, [isDisabled]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Single-select</Title>\\r\\n      <Hr />\\r\\n      <Paragraph>\\r\\n        In this story\'s source code, notice that the callback function\\r\\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\\r\\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\\r\\n        memoization of any callback function property whenever possible. This will boost\\r\\n        performance and reduce the amount of renders as these properties are referenced\\r\\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\\r\\n        and <code>useMemos</code>. When defined in a functional component, wrap in\\r\\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\\r\\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\\r\\n        you can opt to hoist functions outside of the component entirely.\\r\\n      </Paragraph>\\r\\n      <Paragraph>\\r\\n        The <code>options</code> property should also be memoized. Either consume\\r\\n        it directly from a state management store, or make sure it is stable by\\r\\n        avoiding inline or render-based mutations.\\r\\n      </Paragraph>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'Searchable\'\\r\\n              checked={isSearchable}\\r\\n              onCheck={setIsSearchable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Clearable\'\\r\\n              checked={isClearable}\\r\\n              onCheck={setIsClearable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Disabled\'\\r\\n              checked={isDisabled}\\r\\n              onCheck={setIsDisabled}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Invalid\'\\r\\n              checked={isInvalid}\\r\\n              readOnly={isDisabled}\\r\\n              onCheck={setIsInvalid}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Loading\'\\r\\n              checked={isLoading}\\r\\n              onCheck={setIsLoading}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isLoading={isLoading}\\r\\n              isInvalid={isInvalid}\\r\\n              options={CITY_OPTIONS}\\r\\n              isDisabled={isDisabled}\\r\\n              isClearable={isClearable}\\r\\n              isSearchable={isSearchable}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const MultiSelect = () => {\\r\\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\\r\\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\\r\\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\\r\\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\\r\\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  // Example \\"renderMultiOptions\\" property that can be used to further customize labeling for multi-option scenarios\\r\\n  const renderMultiOptions = useCallback(\\r\\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\\r\\n      <Fragment>\\r\\n        {selected.length && renderOptionLabel(selected[0].data)}\\r\\n        {selected.length > 1 && (\\r\\n          <OtherSpan>\\r\\n            {`(+${selected.length - 1} ${selected.length === 2 ? \'other\' : \'others\'})`}\\r\\n          </OtherSpan>\\r\\n        )}\\r\\n      </Fragment>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Multi-select</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>isMulti</code> property to allow for multiple selections.\\r\\n        While in multi-select mode, some properties are now applicable and\\r\\n        others become more pertinent.\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\\r\\n            selected option from the menu. Default value is false, however, if\\r\\n            undefined and <code>isMulti === true</code>, then its value defaults\\r\\n            to true.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\\r\\n            menu of options when the user selects an option. Default value is\\r\\n            false, however, it may be benefical to set this property to true for\\r\\n            convenience in multi-select scenarios.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\\r\\n            Optional callback function that can be used to further customize the selection\\r\\n            label in multi-select scenarios. <code>params</code> is an object that contains\\r\\n            the <code>selected</code> and <code>renderOptionLabel</code> properties (array\\r\\n            of selected options and function used to render individual option labels,\\r\\n            respectively). When this function is defined, left and right arrow navigation\\r\\n            of individual options is disabled. When using this property, it may be be a good\\r\\n            idea to set the property <code>backspaceClearsValue</code> to <em>false</em> in\\r\\n            order to avoid accidentally clearing all selections when searching.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'closeMenuOnSelect\'\\r\\n              checked={closeMenuOnSelect}\\r\\n              onCheck={setCloseMenuOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'hideSelectedOptions\'\\r\\n              checked={hideSelectedOptions}\\r\\n              onCheck={setHideSelectedOptions}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'blurInputOnSelect\'\\r\\n              checked={blurInputOnSelect}\\r\\n              onCheck={setBlurInputOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'openMenuOnClick (click caret if false)\'\\r\\n              checked={openMenuOnClick}\\r\\n              onCheck={setOpenMenuOnClick}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'renderMultiOptions (custom renderer)\'\\r\\n              checked={useRenderMultiOptions}\\r\\n              onCheck={setUseRenderMultiOptions}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isMulti\\r\\n              isClearable\\r\\n              isSearchable\\r\\n              options={CITY_OPTIONS}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              openMenuOnClick={openMenuOnClick}\\r\\n              blurInputOnSelect={blurInputOnSelect}\\r\\n              closeMenuOnSelect={closeMenuOnSelect}\\r\\n              hideSelectedOptions={hideSelectedOptions}\\r\\n              backspaceClearsValue={!useRenderMultiOptions}\\r\\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Styling = () => {\\r\\n  const [themeConfig, setThemeConfig] = useState<Theme>();\\r\\n  const [selectedOption, setSelectedOption] = useCallbackState<SelectedOption | null>(null);\\r\\n\\r\\n  const menuItemSize = selectedOption?.value === ThemeEnum.LARGE_TEXT ? 44 : 35;\\r\\n\\r\\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\\r\\n    <CodeMarkup\\r\\n      language=\'markup\'\\r\\n      header=\'Class Markup\'\\r\\n      data={CLASS_NAME_HTML}\\r\\n    />\\r\\n  ), []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (selectedOption) {\\r\\n      const { value } = selectedOption;\\r\\n      setThemeConfig(ThemeConfigMap[value]);\\r\\n    }\\r\\n  }, [selectedOption]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Styling</Title>\\r\\n      <Hr />\\r\\n      <SubTitle>Theming</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            react-functional-select uses <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to\\r\\n            handle its styling. The root node is wrapped in\\r\\n            styled-component\'s <code>ThemeProvider</code> wrapper component which gives all\\r\\n            child styled-components access to the provided theme via React\'s context API.\\r\\n            To override react-functional-select\'s default theme, pass an object to\\r\\n            the <code>themeConfig</code> property - any matching properties will replace\\r\\n            those in the default theme.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\\r\\n            the <code>themeConfig</code> object contain a <code>css</code> property\\r\\n            of type <code>string | FlattenSimpleInterpolation | undefined</code> (default value\\r\\n            is undefined). This property can be used to pass raw CSS styles as a string or wrapped\\r\\n            in <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported <code>css</code> function.\\r\\n            Those objects are: select, control, icon, menu, noOptions, multiValue, and input.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.7.0</strong>, the control object in <code>themeConfig</code> has\\r\\n            the property <code>focusedCss</code> - which is similar to the <code>css</code> property,\\r\\n            except that it is only applied when the select control is focused (and removed when blurred).\\r\\n          </Content>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>\\r\\n          <CodeMarkup\\r\\n            language=\'javascript\'\\r\\n            data={THEME_DEFAULTS}\\r\\n            header=\'Theme Defaults\'\\r\\n            formatFn={stringifyJavaScriptObj}\\r\\n          />\\r\\n        </Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Using Classes</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            If you want to style the component using CSS classes, set the <code>addClassNames</code> prop\\r\\n            to true and it will then generate <code>className</code> attributes for that specific instance\\r\\n            of the component. These are the classes that are available:\\r\\n          </Content>\\r\\n          <ListWrapper className=\'is-class-list\'>\\r\\n            <List>\\r\\n              <Li>{SELECT_CONTAINER_CLS}</Li>\\r\\n              <Li>{CONTROL_CONTAINER_CLS}</Li>\\r\\n              <Li>{MENU_CONTAINER_CLS}</Li>\\r\\n              <Li>{AUTOSIZE_INPUT_CLS}</Li>\\r\\n              <Li>{CARET_ICON_CLS}</Li>\\r\\n              <Li>{CLEAR_ICON_CLS}</Li>\\r\\n              <Li>{LOADING_DOTS_CLS}</Li>\\r\\n              <Li>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</Li>\\r\\n            </List>\\r\\n          </ListWrapper>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Try selecting different themes</Label>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <Columns>\\r\\n            <Column widthPercent={40}>\\r\\n              <div style={{ marginTop: \'1rem\' }}>\\r\\n                <Select\\r\\n                  isClearable={false}\\r\\n                  isSearchable={false}\\r\\n                  options={THEME_OPTIONS}\\r\\n                  themeConfig={themeConfig}\\r\\n                  menuItemSize={menuItemSize}\\r\\n                  initialValue={THEME_OPTIONS[0]}\\r\\n                  onOptionChange={setSelectedOption}\\r\\n                />\\r\\n              </div>\\r\\n            </Column>\\r\\n            <Column widthPercent={60}>\\r\\n              <CodeMarkup\\r\\n                data={themeConfig}\\r\\n                language=\'javascript\'\\r\\n                header=\'theme-config\'\\r\\n                formatFn={stringifyJavaScriptObj}\\r\\n              />\\r\\n            </Column>\\r\\n          </Columns>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Events = () => {\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\\r\\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\\r\\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\\r\\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\\r\\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\\r\\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\\r\\n\\r\\n  const onOptionChange = useCallback((option: Option | null): void => {\\r\\n    const optionJsonStr = JSON.stringify(option || {}).replace(/\\"/g, \\"\'\\");\\r\\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\\r\\n  }, []);\\r\\n\\r\\n  const onMenuOpen = useCallback((): void => renderInfoToast(\'Menu opened!\'), []);\\r\\n  const onMenuClose = useCallback((): void => renderInfoToast(\'Menu closed!\'), []);\\r\\n  const onInputBlur = useCallback((): void => renderInfoToast(\'Control blurred!\'), []);\\r\\n  const onInputFocus = useCallback((): void => renderInfoToast(\'Control focused!\'), []);\\r\\n  const onKeyDown = useCallback((): void => renderInfoToast(\'keydown event executed!\'), []);\\r\\n\\r\\n  // Configure reat-toastify onMount and cleanup active toasts on beforeDismount\\r\\n  useEffect(() => {\\r\\n    toast.configure(TOAST_CONTAINER_PROPS);\\r\\n\\r\\n    return () => {\\r\\n      toast.dismiss();\\r\\n    };\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Events</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        There are various callback function properties that are executed following\\r\\n        their associated events:\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\\r\\n            executed after an option is selected or removed\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is opened\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is closed\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            executed after the input control\'s value changes\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is blurred\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is focused\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>\\r\\n              onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void\\r\\n            </TextHeader> -\\r\\n            executed after the onKeyDown event\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            executed after the input value is persisted to state; this value also evaluates\\r\\n            the <code>inputDelay</code> property for debouncing - this callback is really\\r\\n            only useful when <code>inputDelay</code> is defined, and if not, it probably\\r\\n            makes more sense to use the <code>onInputChange</code> callback\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Events trigger a toast notification</Label>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'onOptionChange\'\\r\\n              checked={addOnOptionChange}\\r\\n              onCheck={setAddOnOptionChange}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuOpen\'\\r\\n              checked={addOnMenuOpen}\\r\\n              onCheck={setAddOnMenuOpen}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuClose\'\\r\\n              checked={addOnMenuClose}\\r\\n              onCheck={setAddOnMenuClose}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputBlur\'\\r\\n              checked={addOnInputBlur}\\r\\n              onCheck={setAddOnInputBlur}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputFocus\'\\r\\n              checked={addOnInputFocus}\\r\\n              onCheck={setAddOnInputFocus}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onKeyDown\'\\r\\n              checked={addOnKeyDown}\\r\\n              onCheck={setAddOnKeyDown}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              options={options}\\r\\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\\r\\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\\r\\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\\r\\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\\r\\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\\r\\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Methods = () => {\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const blurSelect = (): void => selectRef.current?.blur();\\r\\n  const focusSelect = (): void => selectRef.current?.focus();\\r\\n  const clearValue = (): void => selectRef.current?.clearValue();\\r\\n  const toggleMenuOpen = (): void => selectRef.current?.toggleMenu(true);\\r\\n  const updateSelectedOption = (): void => selectRef.current?.setValue(options[0]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Methods</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Five public methods are exposed to wrapping components and are\\r\\n        accessible via a forwarded <code>ref</code>.\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>blur(): void</TextHeader> - blur the control\\r\\n            programatically\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>focus(): void</TextHeader> - focus the control\\r\\n            programatically\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> -\\r\\n            toggle the menu programatically\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\\r\\n            value programatically <em>(if an option is selected)</em>\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\\r\\n            value programatically <em>(option will be validated)</em>\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Methods</Label>\\r\\n          <Buttons>\\r\\n            <Button onClick={focusSelect}>Focus</Button>\\r\\n            <Button onClick={blurSelect}>Blur</Button>\\r\\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\\r\\n            <Button onClick={clearValue}>Clear Value</Button>\\r\\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\\r\\n          </Buttons>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              ref={selectRef}\\r\\n              options={options}\\r\\n              initialValue={options[0]}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Filtering = () => {\\r\\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\\r\\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\\r\\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\\r\\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\\r\\n\\r\\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: \'São Paulo\', state: \'BR\' }], []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Filter Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        The default filtering functionality can be customized via the following properties:\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\\r\\n            case when matching strings. Default value is <code>true</code>.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\\r\\n            ignores accents when matching strings. Default value is <code>false</code>.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>filterMatchFrom?: \'any\' | \'start\'</TextHeader> -\\r\\n            Position in source string to perform match. Default value is <code>\'any\'</code>.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\\r\\n            When defined will take each option and generate a string used in\\r\\n            the filtering process. By default, the stringified version of what is\\r\\n            generated by <code>getOptionLabel</code>, if definded, or the option\'s label\\r\\n            as a fallback. The <code>MenuOption</code> typed parameter\\r\\n            that <code>getFilterOptionString</code> accepts contains a <code>data</code> property\\r\\n            that represents the objects that comprise your <code>options</code> property.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Checkboxes>\\r\\n            <Checkbox\\r\\n              label=\'Ignore Case\'\\r\\n              checked={filterIgnoreCase}\\r\\n              onCheck={setFilterIgnoreCase}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Ignore Accents\'\\r\\n              checked={filterIgnoreAccents}\\r\\n              onCheck={setFilterIgnoreAccents}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Match from the start\'\\r\\n              checked={filterMatchFromStart}\\r\\n              onCheck={setFilterMatchFromStart}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Use custom filter function (by state only)\'\\r\\n              checked={useCustomFilterFunc}\\r\\n              onCheck={setUseCustomFilterFunc}\\r\\n            />\\r\\n          </Checkboxes>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isClearable\\r\\n              options={options}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              filterIgnoreCase={filterIgnoreCase}\\r\\n              filterIgnoreAccents={filterIgnoreAccents}\\r\\n              getFilterOptionString={useCustomFilterFunc ? getFilterOptionString : undefined}\\r\\n              filterMatchFrom={filterMatchFromStart ? FilterMatchEnum.START : FilterMatchEnum.ANY}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Windowing = () => {\\r\\n  const optionCountList: number[] = [100, 1000, 5000, 25000, 50000];\\r\\n\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n  const [options, setOptions] = useState<Option[]>([]);\\r\\n  const [optionsCount, setOptionsCount] = useState<number>(optionCountList[0]);\\r\\n\\r\\n  useUpdateEffect(() => {\\r\\n    selectRef.current?.clearValue();\\r\\n  }, [options]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const nextSelectOptions = createSelectOptions(optionsCount);\\r\\n    setOptions(nextSelectOptions);\\r\\n  }, [optionsCount]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Integrated Windowing</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Option data is \'windowed\' using the{\' \'}\\r\\n        <PackageLink {...REACT_WINDOW_PACKAGE} /> package. Aside from the\\r\\n        obvious benefits provided by only rendering a small subset of your\\r\\n        enumerable data (rather than bloating the DOM with an excessive amount\\r\\n        of nodes), \'windowing\' can also assist with:\\r\\n        <List>\\r\\n          <Li>\\r\\n            <strong>Efficient memory allocation</strong>. \'Windowing\' naturally\\r\\n            lends itself to the dynamic generation of attributes/values as each\\r\\n            object comes into your renderer\'s scope (as opposed to allocating\\r\\n            this data upfront for each object in your list). This way you can\\r\\n            perform this work just when you absolutely need to and then can\\r\\n            immediately release it for the GC to cleanup. As an example I am\\r\\n            generating the <code>onClick</code>, <code>id</code>, and{\' \'}\\r\\n            <code>className</code> attributes for each <code>menuOption</code>{\' \'}\\r\\n            as they get passed to the <code>&lt;Option /&gt;</code> renderer\\r\\n            component.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <strong>Functional architecture</strong>. The flexibility provided\\r\\n            through only having to manage subsets of your list allows for a more\\r\\n            dynamic application. By breaking your code out into smaller, \'pure\'\\r\\n            child components, you can write code that scales well and becomes\\r\\n            open to performance optimizations - most notably, memoization.\\r\\n            Simple components that rely on the props passed to it (rather than\\r\\n            its own managed state) to generate its JSX are likely candidates for\\r\\n            memoization (testing &amp; debugging becomes much easier as well).\\r\\n          </Li>\\r\\n        </List>\\r\\n        <em>Note: </em>The only time any noticeable performance degradation will\\r\\n        be observed is during search input updates when the <code>options</code>{\' \'}\\r\\n        count reaches the high tens of thousands. To work around this, the{\' \'}\\r\\n        <code>inputDelay</code> (number in milliseconds) can be set to debounce\\r\\n        the input value. That way, the <code>menuOptions</code> will not be\\r\\n        recalculated on every keystroke.\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Options Count</Label>\\r\\n          <Buttons>\\r\\n            {optionCountList.map((count) => (\\r\\n              <OptionsCountButton\\r\\n                key={count}\\r\\n                count={count}\\r\\n                optionsCount={optionsCount}\\r\\n                setOptionsCount={setOptionsCount}\\r\\n              />\\r\\n            ))}\\r\\n          </Buttons>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select ref={selectRef} options={options} />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Advanced = () => {\\r\\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\\r\\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => option.name === PACKAGE_OPTIONS[3].name, []);\\r\\n\\r\\n  const renderOptionLabel = useCallback(\\r\\n    (option: PackageOption): ReactNode => (\\r\\n      <OptionContainer>\\r\\n        <ReactSvg\\r\\n          aria-hidden=\'true\'\\r\\n          viewBox=\'0 0 841.9 595.3\'\\r\\n          isDisabled={getIsOptionDisabled(option)}\\r\\n        >\\r\\n          <path {...REACT_SVG_PATH_PROPS} />\\r\\n          <circle {...REACT_SVG_CIRCLE_PROPS} />\\r\\n        </ReactSvg>\\r\\n        <OptionName>{option.name}</OptionName>\\r\\n      </OptionContainer>\\r\\n    ),\\r\\n    [getIsOptionDisabled]\\r\\n  );\\r\\n\\r\\n  const customCaretIcon = useCallback(\\r\\n    ({ menuOpen }): ReactNode => (\\r\\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden=\'true\' viewBox=\'0 0 448 512\'>\\r\\n        <path {...CHEVRON_DOWN_PATH_PROPS} />\\r\\n      </ChevronDownSvg>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Advanced Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Implementation using a couple of the more specialized properties.\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\\r\\n            function with a return type of <code>ReactNode</code>. Use this property in cases\\r\\n            where the standard <code>getOptionLabel</code> property won\'t meet your needs (for\\r\\n            instance, you want to render each option\'s label using custom JSX). More complex\\r\\n            option labels will likely equate to longer render durations - this can translate\\r\\n            into a flash of empty space when a user first starts scrolling. In order to prevent\\r\\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\\r\\n            rows outside of the visible area. The default value for this property is 1 and it is\\r\\n            important to note that increasing this value can negatively impact performance.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\\r\\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\\r\\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\\r\\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\\r\\n            options - they cannot both be specified.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\\r\\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\\r\\n            When using a function, an object containing stateful data is forwarded and can be used to style\\r\\n            your custom node accordingly. The state is <code>{\'{ menuOpen, isLoading, isInvalid, isDisabled }\'}</code> of\\r\\n            type <code>Record&lt;string, boolean&gt;</code>. The <code>clearIcon</code> property has an identical definition.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>JSX labels, custom caret icon, and disabled option</Label>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isSearchable={false}\\r\\n              options={PACKAGE_OPTIONS}\\r\\n              themeConfig={THEME_CONFIG}\\r\\n              caretIcon={customCaretIcon}\\r\\n              getOptionValue={getOptionValue}\\r\\n              renderOptionLabel={renderOptionLabel}\\r\\n              getIsOptionDisabled={getIsOptionDisabled}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Async = () => {\\r\\n  const [isLoading, setIsLoading] = useState<boolean>(false);\\r\\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, \'Initial\'));\\r\\n\\r\\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\\r\\n\\r\\n  const onSearchChange = useCallback((value?: string): void => {\\r\\n    mockHttpRequest()\\r\\n      .then(() => {\\r\\n        const nextOptions = createAsyncOptions(\\r\\n          getRandomInt(1, 5),\\r\\n          `Search text: ${value || \'Initial\'}`\\r\\n        );\\r\\n\\r\\n        setOptions(nextOptions);\\r\\n      })\\r\\n      .catch((err) => console.error(err))\\r\\n      .then(() => setIsLoading(false));\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Async Mode</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>async</code> property to enable async mode. There is one key\\r\\n        difference in core functionality with async mode - changes to search input\\r\\n        value will not cause the <code>useMenuOptions</code> effect to run. The rest\\r\\n        of hooking into async mode is achieved using some combination of the properties\\r\\n        found below. <em>Properties onInputChange and onSearchChange should be memoized.</em>\\r\\n        <List>\\r\\n          <Li>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            callback executed directly following the input control\'s <code>onChange</code> event.\\r\\n            This callback is not debounced, so it fires immediately. This is a good\\r\\n            place to set a stateful loading property in your parent component that is mapped to\\r\\n            react-functional-select\'s <code>isLoading</code> property.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            callback executed following component state updates for\\r\\n            the <code>debouncedInputValue</code>. The debounce is set using\\r\\n            the <code>inputDelay</code> property. This callback is a good place for your\\r\\n            http fetch request and post-request logic (i.e. setting isLoading false).\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\\r\\n            set to a positive integer in order to debounce updates to the search input value\\r\\n            following input change events. This property directly maps to the <code>delay</code> in\\r\\n            milliconds passed to the <code>setTimeout</code> method.\\r\\n          </Li>\\r\\n          <Li>\\r\\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\\r\\n            appear in the far-right of the control and take the place of the clear icon (if shown).\\r\\n            Additionally, it will hide options in the menu and instead, display a loading message.\\r\\n            The loading message text defaults to \'Loading...\', but can be overriden via\\r\\n            the <code>loadingMsg</code> property.\\r\\n          </Li>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <Label>Search debounced 500ms and mock HTTP call resolves after 500ms</Label>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              async\\r\\n              isClearable\\r\\n              inputDelay={500}\\r\\n              options={options}\\r\\n              isLoading={isLoading}\\r\\n              onInputChange={onInputChange}\\r\\n              onSearchChange={onSearchChange}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};","locationsMap":{"single-select":{"startLoc":{"col":28,"line":82},"endLoc":{"col":1,"line":167},"startBody":{"col":28,"line":82},"endBody":{"col":1,"line":167}},"multi-select":{"startLoc":{"col":27,"line":169},"endLoc":{"col":1,"line":281},"startBody":{"col":27,"line":169},"endBody":{"col":1,"line":281}},"styling":{"startLoc":{"col":23,"line":283},"endLoc":{"col":1,"line":400},"startBody":{"col":23,"line":283},"endBody":{"col":1,"line":400}},"events":{"startLoc":{"col":22,"line":402},"endLoc":{"col":1,"line":533},"startBody":{"col":22,"line":402},"endBody":{"col":1,"line":533}},"methods":{"startLoc":{"col":23,"line":535},"endLoc":{"col":1,"line":600},"startBody":{"col":23,"line":535},"endBody":{"col":1,"line":600}},"filtering":{"startLoc":{"col":25,"line":602},"endLoc":{"col":1,"line":688},"startBody":{"col":25,"line":602},"endBody":{"col":1,"line":688}},"windowing":{"startLoc":{"col":25,"line":690},"endLoc":{"col":1,"line":771},"startBody":{"col":25,"line":690},"endBody":{"col":1,"line":771}},"advanced":{"startLoc":{"col":24,"line":773},"endLoc":{"col":1,"line":859},"startBody":{"col":24,"line":773},"endBody":{"col":1,"line":859}},"async":{"startLoc":{"col":21,"line":861},"endLoc":{"col":1,"line":943},"startBody":{"col":21,"line":861},"endBody":{"col":1,"line":943}}}},},\r\n  title: \'React Functional Select\'\r\n};\r\n\r\nexport const SingleSelect = () => {\r\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\r\n  const [isLoading, setIsLoading] = useCallbackState(false);\r\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\r\n  const [isClearable, setIsClearable] = useCallbackState(true);\r\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  useEffect(() => {\r\n    isDisabled && setIsInvalid(false);\r\n  }, [isDisabled]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Single-select</Title>\r\n      <Hr />\r\n      <Paragraph>\r\n        In this story\'s source code, notice that the callback function\r\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\r\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\r\n        memoization of any callback function property whenever possible. This will boost\r\n        performance and reduce the amount of renders as these properties are referenced\r\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\r\n        and <code>useMemos</code>. When defined in a functional component, wrap in\r\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\r\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\r\n        you can opt to hoist functions outside of the component entirely.\r\n      </Paragraph>\r\n      <Paragraph>\r\n        The <code>options</code> property should also be memoized. Either consume\r\n        it directly from a state management store, or make sure it is stable by\r\n        avoiding inline or render-based mutations.\r\n      </Paragraph>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label=\'Searchable\'\r\n              checked={isSearchable}\r\n              onCheck={setIsSearchable}\r\n            />\r\n            <Checkbox\r\n              label=\'Clearable\'\r\n              checked={isClearable}\r\n              onCheck={setIsClearable}\r\n            />\r\n            <Checkbox\r\n              label=\'Disabled\'\r\n              checked={isDisabled}\r\n              onCheck={setIsDisabled}\r\n            />\r\n            <Checkbox\r\n              label=\'Invalid\'\r\n              checked={isInvalid}\r\n              readOnly={isDisabled}\r\n              onCheck={setIsInvalid}\r\n            />\r\n            <Checkbox\r\n              label=\'Loading\'\r\n              checked={isLoading}\r\n              onCheck={setIsLoading}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isLoading={isLoading}\r\n              isInvalid={isInvalid}\r\n              options={CITY_OPTIONS}\r\n              isDisabled={isDisabled}\r\n              isClearable={isClearable}\r\n              isSearchable={isSearchable}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const MultiSelect = () => {\r\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\r\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\r\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\r\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\r\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  // Example "renderMultiOptions" property that can be used to further customize labeling for multi-option scenarios\r\n  const renderMultiOptions = useCallback(\r\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\r\n      <Fragment>\r\n        {selected.length && renderOptionLabel(selected[0].data)}\r\n        {selected.length > 1 && (\r\n          <OtherSpan>\r\n            {`(+${selected.length - 1} ${selected.length === 2 ? \'other\' : \'others\'})`}\r\n          </OtherSpan>\r\n        )}\r\n      </Fragment>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Multi-select</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>isMulti</code> property to allow for multiple selections.\r\n        While in multi-select mode, some properties are now applicable and\r\n        others become more pertinent.\r\n        <List>\r\n          <Li>\r\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\r\n            selected option from the menu. Default value is false, however, if\r\n            undefined and <code>isMulti === true</code>, then its value defaults\r\n            to true.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\r\n            menu of options when the user selects an option. Default value is\r\n            false, however, it may be benefical to set this property to true for\r\n            convenience in multi-select scenarios.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\r\n            Optional callback function that can be used to further customize the selection\r\n            label in multi-select scenarios. <code>params</code> is an object that contains\r\n            the <code>selected</code> and <code>renderOptionLabel</code> properties (array\r\n            of selected options and function used to render individual option labels,\r\n            respectively). When this function is defined, left and right arrow navigation\r\n            of individual options is disabled. When using this property, it may be be a good\r\n            idea to set the property <code>backspaceClearsValue</code> to <em>false</em> in\r\n            order to avoid accidentally clearing all selections when searching.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label=\'closeMenuOnSelect\'\r\n              checked={closeMenuOnSelect}\r\n              onCheck={setCloseMenuOnSelect}\r\n            />\r\n            <Checkbox\r\n              label=\'hideSelectedOptions\'\r\n              checked={hideSelectedOptions}\r\n              onCheck={setHideSelectedOptions}\r\n            />\r\n            <Checkbox\r\n              label=\'blurInputOnSelect\'\r\n              checked={blurInputOnSelect}\r\n              onCheck={setBlurInputOnSelect}\r\n            />\r\n            <Checkbox\r\n              label=\'openMenuOnClick (click caret if false)\'\r\n              checked={openMenuOnClick}\r\n              onCheck={setOpenMenuOnClick}\r\n            />\r\n            <Checkbox\r\n              label=\'renderMultiOptions (custom renderer)\'\r\n              checked={useRenderMultiOptions}\r\n              onCheck={setUseRenderMultiOptions}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isMulti\r\n              isClearable\r\n              isSearchable\r\n              options={CITY_OPTIONS}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              openMenuOnClick={openMenuOnClick}\r\n              blurInputOnSelect={blurInputOnSelect}\r\n              closeMenuOnSelect={closeMenuOnSelect}\r\n              hideSelectedOptions={hideSelectedOptions}\r\n              backspaceClearsValue={!useRenderMultiOptions}\r\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Styling = () => {\r\n  const [themeConfig, setThemeConfig] = useState<Theme>();\r\n  const [selectedOption, setSelectedOption] = useCallbackState<SelectedOption | null>(null);\r\n\r\n  const menuItemSize = selectedOption?.value === ThemeEnum.LARGE_TEXT ? 44 : 35;\r\n\r\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\r\n    <CodeMarkup\r\n      language=\'markup\'\r\n      header=\'Class Markup\'\r\n      data={CLASS_NAME_HTML}\r\n    />\r\n  ), []);\r\n\r\n  useEffect(() => {\r\n    if (selectedOption) {\r\n      const { value } = selectedOption;\r\n      setThemeConfig(ThemeConfigMap[value]);\r\n    }\r\n  }, [selectedOption]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Styling</Title>\r\n      <Hr />\r\n      <SubTitle>Theming</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            react-functional-select uses <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to\r\n            handle its styling. The root node is wrapped in\r\n            styled-component\'s <code>ThemeProvider</code> wrapper component which gives all\r\n            child styled-components access to the provided theme via React\'s context API.\r\n            To override react-functional-select\'s default theme, pass an object to\r\n            the <code>themeConfig</code> property - any matching properties will replace\r\n            those in the default theme.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\r\n            the <code>themeConfig</code> object contain a <code>css</code> property\r\n            of type <code>string | FlattenSimpleInterpolation | undefined</code> (default value\r\n            is undefined). This property can be used to pass raw CSS styles as a string or wrapped\r\n            in <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported <code>css</code> function.\r\n            Those objects are: select, control, icon, menu, noOptions, multiValue, and input.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.7.0</strong>, the control object in <code>themeConfig</code> has\r\n            the property <code>focusedCss</code> - which is similar to the <code>css</code> property,\r\n            except that it is only applied when the select control is focused (and removed when blurred).\r\n          </Content>\r\n        </Column>\r\n        <Column widthPercent={60}>\r\n          <CodeMarkup\r\n            language=\'javascript\'\r\n            data={THEME_DEFAULTS}\r\n            header=\'Theme Defaults\'\r\n            formatFn={stringifyJavaScriptObj}\r\n          />\r\n        </Column>\r\n      </Columns>\r\n      <SubTitle>Using Classes</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            If you want to style the component using CSS classes, set the <code>addClassNames</code> prop\r\n            to true and it will then generate <code>className</code> attributes for that specific instance\r\n            of the component. These are the classes that are available:\r\n          </Content>\r\n          <ListWrapper className=\'is-class-list\'>\r\n            <List>\r\n              <Li>{SELECT_CONTAINER_CLS}</Li>\r\n              <Li>{CONTROL_CONTAINER_CLS}</Li>\r\n              <Li>{MENU_CONTAINER_CLS}</Li>\r\n              <Li>{AUTOSIZE_INPUT_CLS}</Li>\r\n              <Li>{CARET_ICON_CLS}</Li>\r\n              <Li>{CLEAR_ICON_CLS}</Li>\r\n              <Li>{LOADING_DOTS_CLS}</Li>\r\n              <Li>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</Li>\r\n            </List>\r\n          </ListWrapper>\r\n        </Column>\r\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\r\n      </Columns>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Try selecting different themes</Label>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Columns>\r\n            <Column widthPercent={40}>\r\n              <div style={{ marginTop: \'1rem\' }}>\r\n                <Select\r\n                  isClearable={false}\r\n                  isSearchable={false}\r\n                  options={THEME_OPTIONS}\r\n                  themeConfig={themeConfig}\r\n                  menuItemSize={menuItemSize}\r\n                  initialValue={THEME_OPTIONS[0]}\r\n                  onOptionChange={setSelectedOption}\r\n                />\r\n              </div>\r\n            </Column>\r\n            <Column widthPercent={60}>\r\n              <CodeMarkup\r\n                data={themeConfig}\r\n                language=\'javascript\'\r\n                header=\'theme-config\'\r\n                formatFn={stringifyJavaScriptObj}\r\n              />\r\n            </Column>\r\n          </Columns>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Events = () => {\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\r\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\r\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\r\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\r\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\r\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\r\n\r\n  const onOptionChange = useCallback((option: Option | null): void => {\r\n    const optionJsonStr = JSON.stringify(option || {}).replace(/"/g, "\'");\r\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\r\n  }, []);\r\n\r\n  const onMenuOpen = useCallback((): void => renderInfoToast(\'Menu opened!\'), []);\r\n  const onMenuClose = useCallback((): void => renderInfoToast(\'Menu closed!\'), []);\r\n  const onInputBlur = useCallback((): void => renderInfoToast(\'Control blurred!\'), []);\r\n  const onInputFocus = useCallback((): void => renderInfoToast(\'Control focused!\'), []);\r\n  const onKeyDown = useCallback((): void => renderInfoToast(\'keydown event executed!\'), []);\r\n\r\n  // Configure reat-toastify onMount and cleanup active toasts on beforeDismount\r\n  useEffect(() => {\r\n    toast.configure(TOAST_CONTAINER_PROPS);\r\n\r\n    return () => {\r\n      toast.dismiss();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Events</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        There are various callback function properties that are executed following\r\n        their associated events:\r\n        <List>\r\n          <Li>\r\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\r\n            executed after an option is selected or removed\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\r\n            executed after the menu is opened\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\r\n            executed after the menu is closed\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            executed after the input control\'s value changes\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is blurred\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is focused\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>\r\n              onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void\r\n            </TextHeader> -\r\n            executed after the onKeyDown event\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            executed after the input value is persisted to state; this value also evaluates\r\n            the <code>inputDelay</code> property for debouncing - this callback is really\r\n            only useful when <code>inputDelay</code> is defined, and if not, it probably\r\n            makes more sense to use the <code>onInputChange</code> callback\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Events trigger a toast notification</Label>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label=\'onOptionChange\'\r\n              checked={addOnOptionChange}\r\n              onCheck={setAddOnOptionChange}\r\n            />\r\n            <Checkbox\r\n              label=\'onMenuOpen\'\r\n              checked={addOnMenuOpen}\r\n              onCheck={setAddOnMenuOpen}\r\n            />\r\n            <Checkbox\r\n              label=\'onMenuClose\'\r\n              checked={addOnMenuClose}\r\n              onCheck={setAddOnMenuClose}\r\n            />\r\n            <Checkbox\r\n              label=\'onInputBlur\'\r\n              checked={addOnInputBlur}\r\n              onCheck={setAddOnInputBlur}\r\n            />\r\n            <Checkbox\r\n              label=\'onInputFocus\'\r\n              checked={addOnInputFocus}\r\n              onCheck={setAddOnInputFocus}\r\n            />\r\n            <Checkbox\r\n              label=\'onKeyDown\'\r\n              checked={addOnKeyDown}\r\n              onCheck={setAddOnKeyDown}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              options={options}\r\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\r\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\r\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\r\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\r\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\r\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Methods = () => {\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const blurSelect = (): void => selectRef.current?.blur();\r\n  const focusSelect = (): void => selectRef.current?.focus();\r\n  const clearValue = (): void => selectRef.current?.clearValue();\r\n  const toggleMenuOpen = (): void => selectRef.current?.toggleMenu(true);\r\n  const updateSelectedOption = (): void => selectRef.current?.setValue(options[0]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Methods</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Five public methods are exposed to wrapping components and are\r\n        accessible via a forwarded <code>ref</code>.\r\n        <List>\r\n          <Li>\r\n            <TextHeader>blur(): void</TextHeader> - blur the control\r\n            programatically\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>focus(): void</TextHeader> - focus the control\r\n            programatically\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> -\r\n            toggle the menu programatically\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\r\n            value programatically <em>(if an option is selected)</em>\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\r\n            value programatically <em>(option will be validated)</em>\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Methods</Label>\r\n          <Buttons>\r\n            <Button onClick={focusSelect}>Focus</Button>\r\n            <Button onClick={blurSelect}>Blur</Button>\r\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\r\n            <Button onClick={clearValue}>Clear Value</Button>\r\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\r\n          </Buttons>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              ref={selectRef}\r\n              options={options}\r\n              initialValue={options[0]}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Filtering = () => {\r\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\r\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\r\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\r\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\r\n\r\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: \'São Paulo\', state: \'BR\' }], []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Filter Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        The default filtering functionality can be customized via the following properties:\r\n        <List>\r\n          <Li>\r\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\r\n            case when matching strings. Default value is <code>true</code>.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\r\n            ignores accents when matching strings. Default value is <code>false</code>.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>filterMatchFrom?: \'any\' | \'start\'</TextHeader> -\r\n            Position in source string to perform match. Default value is <code>\'any\'</code>.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\r\n            When defined will take each option and generate a string used in\r\n            the filtering process. By default, the stringified version of what is\r\n            generated by <code>getOptionLabel</code>, if definded, or the option\'s label\r\n            as a fallback. The <code>MenuOption</code> typed parameter\r\n            that <code>getFilterOptionString</code> accepts contains a <code>data</code> property\r\n            that represents the objects that comprise your <code>options</code> property.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label=\'Ignore Case\'\r\n              checked={filterIgnoreCase}\r\n              onCheck={setFilterIgnoreCase}\r\n            />\r\n            <Checkbox\r\n              label=\'Ignore Accents\'\r\n              checked={filterIgnoreAccents}\r\n              onCheck={setFilterIgnoreAccents}\r\n            />\r\n            <Checkbox\r\n              label=\'Match from the start\'\r\n              checked={filterMatchFromStart}\r\n              onCheck={setFilterMatchFromStart}\r\n            />\r\n            <Checkbox\r\n              label=\'Use custom filter function (by state only)\'\r\n              checked={useCustomFilterFunc}\r\n              onCheck={setUseCustomFilterFunc}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isClearable\r\n              options={options}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              filterIgnoreCase={filterIgnoreCase}\r\n              filterIgnoreAccents={filterIgnoreAccents}\r\n              getFilterOptionString={useCustomFilterFunc ? getFilterOptionString : undefined}\r\n              filterMatchFrom={filterMatchFromStart ? FilterMatchEnum.START : FilterMatchEnum.ANY}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Windowing = () => {\r\n  const optionCountList: number[] = [100, 1000, 5000, 25000, 50000];\r\n\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n  const [options, setOptions] = useState<Option[]>([]);\r\n  const [optionsCount, setOptionsCount] = useState<number>(optionCountList[0]);\r\n\r\n  useUpdateEffect(() => {\r\n    selectRef.current?.clearValue();\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    const nextSelectOptions = createSelectOptions(optionsCount);\r\n    setOptions(nextSelectOptions);\r\n  }, [optionsCount]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Integrated Windowing</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Option data is \'windowed\' using the{\' \'}\r\n        <PackageLink {...REACT_WINDOW_PACKAGE} /> package. Aside from the\r\n        obvious benefits provided by only rendering a small subset of your\r\n        enumerable data (rather than bloating the DOM with an excessive amount\r\n        of nodes), \'windowing\' can also assist with:\r\n        <List>\r\n          <Li>\r\n            <strong>Efficient memory allocation</strong>. \'Windowing\' naturally\r\n            lends itself to the dynamic generation of attributes/values as each\r\n            object comes into your renderer\'s scope (as opposed to allocating\r\n            this data upfront for each object in your list). This way you can\r\n            perform this work just when you absolutely need to and then can\r\n            immediately release it for the GC to cleanup. As an example I am\r\n            generating the <code>onClick</code>, <code>id</code>, and{\' \'}\r\n            <code>className</code> attributes for each <code>menuOption</code>{\' \'}\r\n            as they get passed to the <code>&lt;Option /&gt;</code> renderer\r\n            component.\r\n          </Li>\r\n          <Li>\r\n            <strong>Functional architecture</strong>. The flexibility provided\r\n            through only having to manage subsets of your list allows for a more\r\n            dynamic application. By breaking your code out into smaller, \'pure\'\r\n            child components, you can write code that scales well and becomes\r\n            open to performance optimizations - most notably, memoization.\r\n            Simple components that rely on the props passed to it (rather than\r\n            its own managed state) to generate its JSX are likely candidates for\r\n            memoization (testing &amp; debugging becomes much easier as well).\r\n          </Li>\r\n        </List>\r\n        <em>Note: </em>The only time any noticeable performance degradation will\r\n        be observed is during search input updates when the <code>options</code>{\' \'}\r\n        count reaches the high tens of thousands. To work around this, the{\' \'}\r\n        <code>inputDelay</code> (number in milliseconds) can be set to debounce\r\n        the input value. That way, the <code>menuOptions</code> will not be\r\n        recalculated on every keystroke.\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Options Count</Label>\r\n          <Buttons>\r\n            {optionCountList.map((count) => (\r\n              <OptionsCountButton\r\n                key={count}\r\n                count={count}\r\n                optionsCount={optionsCount}\r\n                setOptionsCount={setOptionsCount}\r\n              />\r\n            ))}\r\n          </Buttons>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select ref={selectRef} options={options} />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Advanced = () => {\r\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\r\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => option.name === PACKAGE_OPTIONS[3].name, []);\r\n\r\n  const renderOptionLabel = useCallback(\r\n    (option: PackageOption): ReactNode => (\r\n      <OptionContainer>\r\n        <ReactSvg\r\n          aria-hidden=\'true\'\r\n          viewBox=\'0 0 841.9 595.3\'\r\n          isDisabled={getIsOptionDisabled(option)}\r\n        >\r\n          <path {...REACT_SVG_PATH_PROPS} />\r\n          <circle {...REACT_SVG_CIRCLE_PROPS} />\r\n        </ReactSvg>\r\n        <OptionName>{option.name}</OptionName>\r\n      </OptionContainer>\r\n    ),\r\n    [getIsOptionDisabled]\r\n  );\r\n\r\n  const customCaretIcon = useCallback(\r\n    ({ menuOpen }): ReactNode => (\r\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden=\'true\' viewBox=\'0 0 448 512\'>\r\n        <path {...CHEVRON_DOWN_PATH_PROPS} />\r\n      </ChevronDownSvg>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Advanced Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Implementation using a couple of the more specialized properties.\r\n        <List>\r\n          <Li>\r\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\r\n            function with a return type of <code>ReactNode</code>. Use this property in cases\r\n            where the standard <code>getOptionLabel</code> property won\'t meet your needs (for\r\n            instance, you want to render each option\'s label using custom JSX). More complex\r\n            option labels will likely equate to longer render durations - this can translate\r\n            into a flash of empty space when a user first starts scrolling. In order to prevent\r\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\r\n            rows outside of the visible area. The default value for this property is 1 and it is\r\n            important to note that increasing this value can negatively impact performance.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\r\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\r\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\r\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\r\n            options - they cannot both be specified.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\r\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\r\n            When using a function, an object containing stateful data is forwarded and can be used to style\r\n            your custom node accordingly. The state is <code>{\'{ menuOpen, isLoading, isInvalid, isDisabled }\'}</code> of\r\n            type <code>Record&lt;string, boolean&gt;</code>. The <code>clearIcon</code> property has an identical definition.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>JSX labels, custom caret icon, and disabled option</Label>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isSearchable={false}\r\n              options={PACKAGE_OPTIONS}\r\n              themeConfig={THEME_CONFIG}\r\n              caretIcon={customCaretIcon}\r\n              getOptionValue={getOptionValue}\r\n              renderOptionLabel={renderOptionLabel}\r\n              getIsOptionDisabled={getIsOptionDisabled}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Async = () => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, \'Initial\'));\r\n\r\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\r\n\r\n  const onSearchChange = useCallback((value?: string): void => {\r\n    mockHttpRequest()\r\n      .then(() => {\r\n        const nextOptions = createAsyncOptions(\r\n          getRandomInt(1, 5),\r\n          `Search text: ${value || \'Initial\'}`\r\n        );\r\n\r\n        setOptions(nextOptions);\r\n      })\r\n      .catch((err) => console.error(err))\r\n      .then(() => setIsLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Async Mode</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>async</code> property to enable async mode. There is one key\r\n        difference in core functionality with async mode - changes to search input\r\n        value will not cause the <code>useMenuOptions</code> effect to run. The rest\r\n        of hooking into async mode is achieved using some combination of the properties\r\n        found below. <em>Properties onInputChange and onSearchChange should be memoized.</em>\r\n        <List>\r\n          <Li>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            callback executed directly following the input control\'s <code>onChange</code> event.\r\n            This callback is not debounced, so it fires immediately. This is a good\r\n            place to set a stateful loading property in your parent component that is mapped to\r\n            react-functional-select\'s <code>isLoading</code> property.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            callback executed following component state updates for\r\n            the <code>debouncedInputValue</code>. The debounce is set using\r\n            the <code>inputDelay</code> property. This callback is a good place for your\r\n            http fetch request and post-request logic (i.e. setting isLoading false).\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\r\n            set to a positive integer in order to debounce updates to the search input value\r\n            following input change events. This property directly maps to the <code>delay</code> in\r\n            milliconds passed to the <code>setTimeout</code> method.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\r\n            appear in the far-right of the control and take the place of the clear icon (if shown).\r\n            Additionally, it will hide options in the menu and instead, display a loading message.\r\n            The loading message text defaults to \'Loading...\', but can be overriden via\r\n            the <code>loadingMsg</code> property.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Search debounced 500ms and mock HTTP call resolves after 500ms</Label>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              async\r\n              isClearable\r\n              inputDelay={500}\r\n              options={options}\r\n              isLoading={isLoading}\r\n              onInputChange={onInputChange}\r\n              onSearchChange={onSearchChange}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\n',locationsMap:{"single-select":{startLoc:{col:28,line:89},endLoc:{col:1,line:174},startBody:{col:28,line:89},endBody:{col:1,line:174}},"multi-select":{startLoc:{col:27,line:176},endLoc:{col:1,line:288},startBody:{col:27,line:176},endBody:{col:1,line:288}},styling:{startLoc:{col:23,line:290},endLoc:{col:1,line:407},startBody:{col:23,line:290},endBody:{col:1,line:407}},events:{startLoc:{col:22,line:409},endLoc:{col:1,line:540},startBody:{col:22,line:409},endBody:{col:1,line:540}},methods:{startLoc:{col:23,line:542},endLoc:{col:1,line:607},startBody:{col:23,line:542},endBody:{col:1,line:607}},filtering:{startLoc:{col:25,line:609},endLoc:{col:1,line:695},startBody:{col:25,line:609},endBody:{col:1,line:695}},windowing:{startLoc:{col:25,line:697},endLoc:{col:1,line:778},startBody:{col:25,line:697},endBody:{col:1,line:778}},advanced:{startLoc:{col:24,line:780},endLoc:{col:1,line:866},startBody:{col:24,line:780},endBody:{col:1,line:866}},async:{startLoc:{col:21,line:868},endLoc:{col:1,line:950},startBody:{col:21,line:868},endBody:{col:1,line:950}}}}},"storySource",{source:"import { useMemo, useRef, useState, useEffect, useCallback, Fragment, ReactNode } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { SelectedOption } from '../src/types';\r\nimport { useUpdateEffect } from '../src/hooks';\r\nimport { useCallbackState } from './helpers/hooks';\r\nimport { CityOption, Option, PackageOption } from './helpers/types';\r\nimport { Select, MultiParams, MenuOption, SelectRef, FilterMatchEnum, Theme } from '../src';\r\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from './helpers/components';\r\n\r\nimport {\r\n  mockHttpRequest,\r\n  getRandomInt,\r\n  createAsyncOptions,\r\n  createSelectOptions,\r\n  stringifyJavaScriptObj,\r\n  renderInfoToast\r\n} from './helpers/utils';\r\n\r\nimport {\r\n  ThemeEnum,\r\n  ThemeConfigMap,\r\n  THEME_DEFAULTS,\r\n  THEME_OPTIONS,\r\n  THEME_CONFIG,\r\n  CITY_OPTIONS,\r\n  PACKAGE_OPTIONS,\r\n  CLASS_NAME_HTML,\r\n  REACT_WINDOW_PACKAGE,\r\n  TOAST_CONTAINER_PROPS,\r\n  STYLED_COMPONENTS_PACKAGE,\r\n  REACT_SVG_CIRCLE_PROPS,\r\n  REACT_SVG_PATH_PROPS,\r\n  CHEVRON_DOWN_PATH_PROPS\r\n} from './helpers/constants';\r\n\r\nimport {\r\n  OPTION_CLS,\r\n  OPTION_FOCUSED_CLS,\r\n  OPTION_DISABLED_CLS,\r\n  OPTION_SELECTED_CLS,\r\n  CARET_ICON_CLS,\r\n  CLEAR_ICON_CLS,\r\n  LOADING_DOTS_CLS,\r\n  AUTOSIZE_INPUT_CLS,\r\n  MENU_CONTAINER_CLS,\r\n  SELECT_CONTAINER_CLS,\r\n  CONTROL_CONTAINER_CLS,\r\n} from '../src/constants/dom';\r\n\r\nimport {\r\n  Button,\r\n  Buttons,\r\n  Hr,\r\n  Title,\r\n  SubTitle,\r\n  Label,\r\n  Columns,\r\n  Column,\r\n  Content,\r\n  Container,\r\n  List,\r\n  Li,\r\n  ListWrapper,\r\n  SelectContainer,\r\n  Paragraph,\r\n  TextHeader,\r\n  Checkboxes,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  OtherSpan,\r\n  OptionContainer,\r\n  OptionName,\r\n  ReactSvg,\r\n  ChevronDownSvg\r\n} from './helpers/styled';\r\n\r\nexport default {\r\n  title: 'React Functional Select'\r\n};\r\n\r\nexport const SingleSelect = () => {\r\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\r\n  const [isLoading, setIsLoading] = useCallbackState(false);\r\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\r\n  const [isClearable, setIsClearable] = useCallbackState(true);\r\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  useEffect(() => {\r\n    isDisabled && setIsInvalid(false);\r\n  }, [isDisabled]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Single-select</Title>\r\n      <Hr />\r\n      <Paragraph>\r\n        In this story's source code, notice that the callback function\r\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\r\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\r\n        memoization of any callback function property whenever possible. This will boost\r\n        performance and reduce the amount of renders as these properties are referenced\r\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\r\n        and <code>useMemos</code>. When defined in a functional component, wrap in\r\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\r\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\r\n        you can opt to hoist functions outside of the component entirely.\r\n      </Paragraph>\r\n      <Paragraph>\r\n        The <code>options</code> property should also be memoized. Either consume\r\n        it directly from a state management store, or make sure it is stable by\r\n        avoiding inline or render-based mutations.\r\n      </Paragraph>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label='Searchable'\r\n              checked={isSearchable}\r\n              onCheck={setIsSearchable}\r\n            />\r\n            <Checkbox\r\n              label='Clearable'\r\n              checked={isClearable}\r\n              onCheck={setIsClearable}\r\n            />\r\n            <Checkbox\r\n              label='Disabled'\r\n              checked={isDisabled}\r\n              onCheck={setIsDisabled}\r\n            />\r\n            <Checkbox\r\n              label='Invalid'\r\n              checked={isInvalid}\r\n              readOnly={isDisabled}\r\n              onCheck={setIsInvalid}\r\n            />\r\n            <Checkbox\r\n              label='Loading'\r\n              checked={isLoading}\r\n              onCheck={setIsLoading}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isLoading={isLoading}\r\n              isInvalid={isInvalid}\r\n              options={CITY_OPTIONS}\r\n              isDisabled={isDisabled}\r\n              isClearable={isClearable}\r\n              isSearchable={isSearchable}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const MultiSelect = () => {\r\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\r\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\r\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\r\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\r\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  // Example \"renderMultiOptions\" property that can be used to further customize labeling for multi-option scenarios\r\n  const renderMultiOptions = useCallback(\r\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\r\n      <Fragment>\r\n        {selected.length && renderOptionLabel(selected[0].data)}\r\n        {selected.length > 1 && (\r\n          <OtherSpan>\r\n            {`(+${selected.length - 1} ${selected.length === 2 ? 'other' : 'others'})`}\r\n          </OtherSpan>\r\n        )}\r\n      </Fragment>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Multi-select</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>isMulti</code> property to allow for multiple selections.\r\n        While in multi-select mode, some properties are now applicable and\r\n        others become more pertinent.\r\n        <List>\r\n          <Li>\r\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\r\n            selected option from the menu. Default value is false, however, if\r\n            undefined and <code>isMulti === true</code>, then its value defaults\r\n            to true.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\r\n            menu of options when the user selects an option. Default value is\r\n            false, however, it may be benefical to set this property to true for\r\n            convenience in multi-select scenarios.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\r\n            Optional callback function that can be used to further customize the selection\r\n            label in multi-select scenarios. <code>params</code> is an object that contains\r\n            the <code>selected</code> and <code>renderOptionLabel</code> properties (array\r\n            of selected options and function used to render individual option labels,\r\n            respectively). When this function is defined, left and right arrow navigation\r\n            of individual options is disabled. When using this property, it may be be a good\r\n            idea to set the property <code>backspaceClearsValue</code> to <em>false</em> in\r\n            order to avoid accidentally clearing all selections when searching.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label='closeMenuOnSelect'\r\n              checked={closeMenuOnSelect}\r\n              onCheck={setCloseMenuOnSelect}\r\n            />\r\n            <Checkbox\r\n              label='hideSelectedOptions'\r\n              checked={hideSelectedOptions}\r\n              onCheck={setHideSelectedOptions}\r\n            />\r\n            <Checkbox\r\n              label='blurInputOnSelect'\r\n              checked={blurInputOnSelect}\r\n              onCheck={setBlurInputOnSelect}\r\n            />\r\n            <Checkbox\r\n              label='openMenuOnClick (click caret if false)'\r\n              checked={openMenuOnClick}\r\n              onCheck={setOpenMenuOnClick}\r\n            />\r\n            <Checkbox\r\n              label='renderMultiOptions (custom renderer)'\r\n              checked={useRenderMultiOptions}\r\n              onCheck={setUseRenderMultiOptions}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isMulti\r\n              isClearable\r\n              isSearchable\r\n              options={CITY_OPTIONS}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              openMenuOnClick={openMenuOnClick}\r\n              blurInputOnSelect={blurInputOnSelect}\r\n              closeMenuOnSelect={closeMenuOnSelect}\r\n              hideSelectedOptions={hideSelectedOptions}\r\n              backspaceClearsValue={!useRenderMultiOptions}\r\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Styling = () => {\r\n  const [themeConfig, setThemeConfig] = useState<Theme>();\r\n  const [selectedOption, setSelectedOption] = useCallbackState<SelectedOption | null>(null);\r\n\r\n  const menuItemSize = selectedOption?.value === ThemeEnum.LARGE_TEXT ? 44 : 35;\r\n\r\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\r\n    <CodeMarkup\r\n      language='markup'\r\n      header='Class Markup'\r\n      data={CLASS_NAME_HTML}\r\n    />\r\n  ), []);\r\n\r\n  useEffect(() => {\r\n    if (selectedOption) {\r\n      const { value } = selectedOption;\r\n      setThemeConfig(ThemeConfigMap[value]);\r\n    }\r\n  }, [selectedOption]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Styling</Title>\r\n      <Hr />\r\n      <SubTitle>Theming</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            react-functional-select uses <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to\r\n            handle its styling. The root node is wrapped in\r\n            styled-component's <code>ThemeProvider</code> wrapper component which gives all\r\n            child styled-components access to the provided theme via React's context API.\r\n            To override react-functional-select's default theme, pass an object to\r\n            the <code>themeConfig</code> property - any matching properties will replace\r\n            those in the default theme.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\r\n            the <code>themeConfig</code> object contain a <code>css</code> property\r\n            of type <code>string | FlattenSimpleInterpolation | undefined</code> (default value\r\n            is undefined). This property can be used to pass raw CSS styles as a string or wrapped\r\n            in <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported <code>css</code> function.\r\n            Those objects are: select, control, icon, menu, noOptions, multiValue, and input.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.7.0</strong>, the control object in <code>themeConfig</code> has\r\n            the property <code>focusedCss</code> - which is similar to the <code>css</code> property,\r\n            except that it is only applied when the select control is focused (and removed when blurred).\r\n          </Content>\r\n        </Column>\r\n        <Column widthPercent={60}>\r\n          <CodeMarkup\r\n            language='javascript'\r\n            data={THEME_DEFAULTS}\r\n            header='Theme Defaults'\r\n            formatFn={stringifyJavaScriptObj}\r\n          />\r\n        </Column>\r\n      </Columns>\r\n      <SubTitle>Using Classes</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            If you want to style the component using CSS classes, set the <code>addClassNames</code> prop\r\n            to true and it will then generate <code>className</code> attributes for that specific instance\r\n            of the component. These are the classes that are available:\r\n          </Content>\r\n          <ListWrapper className='is-class-list'>\r\n            <List>\r\n              <Li>{SELECT_CONTAINER_CLS}</Li>\r\n              <Li>{CONTROL_CONTAINER_CLS}</Li>\r\n              <Li>{MENU_CONTAINER_CLS}</Li>\r\n              <Li>{AUTOSIZE_INPUT_CLS}</Li>\r\n              <Li>{CARET_ICON_CLS}</Li>\r\n              <Li>{CLEAR_ICON_CLS}</Li>\r\n              <Li>{LOADING_DOTS_CLS}</Li>\r\n              <Li>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</Li>\r\n            </List>\r\n          </ListWrapper>\r\n        </Column>\r\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\r\n      </Columns>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Try selecting different themes</Label>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Columns>\r\n            <Column widthPercent={40}>\r\n              <div style={{ marginTop: '1rem' }}>\r\n                <Select\r\n                  isClearable={false}\r\n                  isSearchable={false}\r\n                  options={THEME_OPTIONS}\r\n                  themeConfig={themeConfig}\r\n                  menuItemSize={menuItemSize}\r\n                  initialValue={THEME_OPTIONS[0]}\r\n                  onOptionChange={setSelectedOption}\r\n                />\r\n              </div>\r\n            </Column>\r\n            <Column widthPercent={60}>\r\n              <CodeMarkup\r\n                data={themeConfig}\r\n                language='javascript'\r\n                header='theme-config'\r\n                formatFn={stringifyJavaScriptObj}\r\n              />\r\n            </Column>\r\n          </Columns>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Events = () => {\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\r\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\r\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\r\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\r\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\r\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\r\n\r\n  const onOptionChange = useCallback((option: Option | null): void => {\r\n    const optionJsonStr = JSON.stringify(option || {}).replace(/\"/g, \"'\");\r\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\r\n  }, []);\r\n\r\n  const onMenuOpen = useCallback((): void => renderInfoToast('Menu opened!'), []);\r\n  const onMenuClose = useCallback((): void => renderInfoToast('Menu closed!'), []);\r\n  const onInputBlur = useCallback((): void => renderInfoToast('Control blurred!'), []);\r\n  const onInputFocus = useCallback((): void => renderInfoToast('Control focused!'), []);\r\n  const onKeyDown = useCallback((): void => renderInfoToast('keydown event executed!'), []);\r\n\r\n  // Configure reat-toastify onMount and cleanup active toasts on beforeDismount\r\n  useEffect(() => {\r\n    toast.configure(TOAST_CONTAINER_PROPS);\r\n\r\n    return () => {\r\n      toast.dismiss();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Events</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        There are various callback function properties that are executed following\r\n        their associated events:\r\n        <List>\r\n          <Li>\r\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\r\n            executed after an option is selected or removed\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\r\n            executed after the menu is opened\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\r\n            executed after the menu is closed\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            executed after the input control's value changes\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is blurred\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is focused\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>\r\n              onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void\r\n            </TextHeader> -\r\n            executed after the onKeyDown event\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            executed after the input value is persisted to state; this value also evaluates\r\n            the <code>inputDelay</code> property for debouncing - this callback is really\r\n            only useful when <code>inputDelay</code> is defined, and if not, it probably\r\n            makes more sense to use the <code>onInputChange</code> callback\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Events trigger a toast notification</Label>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label='onOptionChange'\r\n              checked={addOnOptionChange}\r\n              onCheck={setAddOnOptionChange}\r\n            />\r\n            <Checkbox\r\n              label='onMenuOpen'\r\n              checked={addOnMenuOpen}\r\n              onCheck={setAddOnMenuOpen}\r\n            />\r\n            <Checkbox\r\n              label='onMenuClose'\r\n              checked={addOnMenuClose}\r\n              onCheck={setAddOnMenuClose}\r\n            />\r\n            <Checkbox\r\n              label='onInputBlur'\r\n              checked={addOnInputBlur}\r\n              onCheck={setAddOnInputBlur}\r\n            />\r\n            <Checkbox\r\n              label='onInputFocus'\r\n              checked={addOnInputFocus}\r\n              onCheck={setAddOnInputFocus}\r\n            />\r\n            <Checkbox\r\n              label='onKeyDown'\r\n              checked={addOnKeyDown}\r\n              onCheck={setAddOnKeyDown}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              options={options}\r\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\r\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\r\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\r\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\r\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\r\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Methods = () => {\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const blurSelect = (): void => selectRef.current?.blur();\r\n  const focusSelect = (): void => selectRef.current?.focus();\r\n  const clearValue = (): void => selectRef.current?.clearValue();\r\n  const toggleMenuOpen = (): void => selectRef.current?.toggleMenu(true);\r\n  const updateSelectedOption = (): void => selectRef.current?.setValue(options[0]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Methods</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Five public methods are exposed to wrapping components and are\r\n        accessible via a forwarded <code>ref</code>.\r\n        <List>\r\n          <Li>\r\n            <TextHeader>blur(): void</TextHeader> - blur the control\r\n            programatically\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>focus(): void</TextHeader> - focus the control\r\n            programatically\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> -\r\n            toggle the menu programatically\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\r\n            value programatically <em>(if an option is selected)</em>\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\r\n            value programatically <em>(option will be validated)</em>\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Methods</Label>\r\n          <Buttons>\r\n            <Button onClick={focusSelect}>Focus</Button>\r\n            <Button onClick={blurSelect}>Blur</Button>\r\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\r\n            <Button onClick={clearValue}>Clear Value</Button>\r\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\r\n          </Buttons>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              ref={selectRef}\r\n              options={options}\r\n              initialValue={options[0]}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Filtering = () => {\r\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\r\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\r\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\r\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\r\n\r\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: 'São Paulo', state: 'BR' }], []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Filter Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        The default filtering functionality can be customized via the following properties:\r\n        <List>\r\n          <Li>\r\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\r\n            case when matching strings. Default value is <code>true</code>.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\r\n            ignores accents when matching strings. Default value is <code>false</code>.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>filterMatchFrom?: 'any' | 'start'</TextHeader> -\r\n            Position in source string to perform match. Default value is <code>'any'</code>.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\r\n            When defined will take each option and generate a string used in\r\n            the filtering process. By default, the stringified version of what is\r\n            generated by <code>getOptionLabel</code>, if definded, or the option's label\r\n            as a fallback. The <code>MenuOption</code> typed parameter\r\n            that <code>getFilterOptionString</code> accepts contains a <code>data</code> property\r\n            that represents the objects that comprise your <code>options</code> property.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Checkboxes>\r\n            <Checkbox\r\n              label='Ignore Case'\r\n              checked={filterIgnoreCase}\r\n              onCheck={setFilterIgnoreCase}\r\n            />\r\n            <Checkbox\r\n              label='Ignore Accents'\r\n              checked={filterIgnoreAccents}\r\n              onCheck={setFilterIgnoreAccents}\r\n            />\r\n            <Checkbox\r\n              label='Match from the start'\r\n              checked={filterMatchFromStart}\r\n              onCheck={setFilterMatchFromStart}\r\n            />\r\n            <Checkbox\r\n              label='Use custom filter function (by state only)'\r\n              checked={useCustomFilterFunc}\r\n              onCheck={setUseCustomFilterFunc}\r\n            />\r\n          </Checkboxes>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isClearable\r\n              options={options}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              filterIgnoreCase={filterIgnoreCase}\r\n              filterIgnoreAccents={filterIgnoreAccents}\r\n              getFilterOptionString={useCustomFilterFunc ? getFilterOptionString : undefined}\r\n              filterMatchFrom={filterMatchFromStart ? FilterMatchEnum.START : FilterMatchEnum.ANY}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Windowing = () => {\r\n  const optionCountList: number[] = [100, 1000, 5000, 25000, 50000];\r\n\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n  const [options, setOptions] = useState<Option[]>([]);\r\n  const [optionsCount, setOptionsCount] = useState<number>(optionCountList[0]);\r\n\r\n  useUpdateEffect(() => {\r\n    selectRef.current?.clearValue();\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    const nextSelectOptions = createSelectOptions(optionsCount);\r\n    setOptions(nextSelectOptions);\r\n  }, [optionsCount]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Integrated Windowing</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Option data is 'windowed' using the{' '}\r\n        <PackageLink {...REACT_WINDOW_PACKAGE} /> package. Aside from the\r\n        obvious benefits provided by only rendering a small subset of your\r\n        enumerable data (rather than bloating the DOM with an excessive amount\r\n        of nodes), 'windowing' can also assist with:\r\n        <List>\r\n          <Li>\r\n            <strong>Efficient memory allocation</strong>. 'Windowing' naturally\r\n            lends itself to the dynamic generation of attributes/values as each\r\n            object comes into your renderer's scope (as opposed to allocating\r\n            this data upfront for each object in your list). This way you can\r\n            perform this work just when you absolutely need to and then can\r\n            immediately release it for the GC to cleanup. As an example I am\r\n            generating the <code>onClick</code>, <code>id</code>, and{' '}\r\n            <code>className</code> attributes for each <code>menuOption</code>{' '}\r\n            as they get passed to the <code>&lt;Option /&gt;</code> renderer\r\n            component.\r\n          </Li>\r\n          <Li>\r\n            <strong>Functional architecture</strong>. The flexibility provided\r\n            through only having to manage subsets of your list allows for a more\r\n            dynamic application. By breaking your code out into smaller, 'pure'\r\n            child components, you can write code that scales well and becomes\r\n            open to performance optimizations - most notably, memoization.\r\n            Simple components that rely on the props passed to it (rather than\r\n            its own managed state) to generate its JSX are likely candidates for\r\n            memoization (testing &amp; debugging becomes much easier as well).\r\n          </Li>\r\n        </List>\r\n        <em>Note: </em>The only time any noticeable performance degradation will\r\n        be observed is during search input updates when the <code>options</code>{' '}\r\n        count reaches the high tens of thousands. To work around this, the{' '}\r\n        <code>inputDelay</code> (number in milliseconds) can be set to debounce\r\n        the input value. That way, the <code>menuOptions</code> will not be\r\n        recalculated on every keystroke.\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Options Count</Label>\r\n          <Buttons>\r\n            {optionCountList.map((count) => (\r\n              <OptionsCountButton\r\n                key={count}\r\n                count={count}\r\n                optionsCount={optionsCount}\r\n                setOptionsCount={setOptionsCount}\r\n              />\r\n            ))}\r\n          </Buttons>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select ref={selectRef} options={options} />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Advanced = () => {\r\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\r\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => option.name === PACKAGE_OPTIONS[3].name, []);\r\n\r\n  const renderOptionLabel = useCallback(\r\n    (option: PackageOption): ReactNode => (\r\n      <OptionContainer>\r\n        <ReactSvg\r\n          aria-hidden='true'\r\n          viewBox='0 0 841.9 595.3'\r\n          isDisabled={getIsOptionDisabled(option)}\r\n        >\r\n          <path {...REACT_SVG_PATH_PROPS} />\r\n          <circle {...REACT_SVG_CIRCLE_PROPS} />\r\n        </ReactSvg>\r\n        <OptionName>{option.name}</OptionName>\r\n      </OptionContainer>\r\n    ),\r\n    [getIsOptionDisabled]\r\n  );\r\n\r\n  const customCaretIcon = useCallback(\r\n    ({ menuOpen }): ReactNode => (\r\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden='true' viewBox='0 0 448 512'>\r\n        <path {...CHEVRON_DOWN_PATH_PROPS} />\r\n      </ChevronDownSvg>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Advanced Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Implementation using a couple of the more specialized properties.\r\n        <List>\r\n          <Li>\r\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\r\n            function with a return type of <code>ReactNode</code>. Use this property in cases\r\n            where the standard <code>getOptionLabel</code> property won't meet your needs (for\r\n            instance, you want to render each option's label using custom JSX). More complex\r\n            option labels will likely equate to longer render durations - this can translate\r\n            into a flash of empty space when a user first starts scrolling. In order to prevent\r\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\r\n            rows outside of the visible area. The default value for this property is 1 and it is\r\n            important to note that increasing this value can negatively impact performance.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\r\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\r\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\r\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\r\n            options - they cannot both be specified.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\r\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\r\n            When using a function, an object containing stateful data is forwarded and can be used to style\r\n            your custom node accordingly. The state is <code>{'{ menuOpen, isLoading, isInvalid, isDisabled }'}</code> of\r\n            type <code>Record&lt;string, boolean&gt;</code>. The <code>clearIcon</code> property has an identical definition.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>JSX labels, custom caret icon, and disabled option</Label>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isSearchable={false}\r\n              options={PACKAGE_OPTIONS}\r\n              themeConfig={THEME_CONFIG}\r\n              caretIcon={customCaretIcon}\r\n              getOptionValue={getOptionValue}\r\n              renderOptionLabel={renderOptionLabel}\r\n              getIsOptionDisabled={getIsOptionDisabled}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Async = () => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, 'Initial'));\r\n\r\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\r\n\r\n  const onSearchChange = useCallback((value?: string): void => {\r\n    mockHttpRequest()\r\n      .then(() => {\r\n        const nextOptions = createAsyncOptions(\r\n          getRandomInt(1, 5),\r\n          `Search text: ${value || 'Initial'}`\r\n        );\r\n\r\n        setOptions(nextOptions);\r\n      })\r\n      .catch((err) => console.error(err))\r\n      .then(() => setIsLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Async Mode</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>async</code> property to enable async mode. There is one key\r\n        difference in core functionality with async mode - changes to search input\r\n        value will not cause the <code>useMenuOptions</code> effect to run. The rest\r\n        of hooking into async mode is achieved using some combination of the properties\r\n        found below. <em>Properties onInputChange and onSearchChange should be memoized.</em>\r\n        <List>\r\n          <Li>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            callback executed directly following the input control's <code>onChange</code> event.\r\n            This callback is not debounced, so it fires immediately. This is a good\r\n            place to set a stateful loading property in your parent component that is mapped to\r\n            react-functional-select's <code>isLoading</code> property.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            callback executed following component state updates for\r\n            the <code>debouncedInputValue</code>. The debounce is set using\r\n            the <code>inputDelay</code> property. This callback is a good place for your\r\n            http fetch request and post-request logic (i.e. setting isLoading false).\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\r\n            set to a positive integer in order to debounce updates to the search input value\r\n            following input change events. This property directly maps to the <code>delay</code> in\r\n            milliconds passed to the <code>setTimeout</code> method.\r\n          </Li>\r\n          <Li>\r\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\r\n            appear in the far-right of the control and take the place of the clear icon (if shown).\r\n            Additionally, it will hide options in the menu and instead, display a loading message.\r\n            The loading message text defaults to 'Loading...', but can be overriden via\r\n            the <code>loadingMsg</code> property.\r\n          </Li>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <Label>Search debounced 500ms and mock HTTP call resolves after 500ms</Label>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              async\r\n              isClearable\r\n              inputDelay={500}\r\n              options={options}\r\n              isLoading={isLoading}\r\n              onInputChange={onInputChange}\r\n              onSearchChange={onSearchChange}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};",locationsMap:{"single-select":{startLoc:{col:28,line:82},endLoc:{col:1,line:167},startBody:{col:28,line:82},endBody:{col:1,line:167}},"multi-select":{startLoc:{col:27,line:169},endLoc:{col:1,line:281},startBody:{col:27,line:169},endBody:{col:1,line:281}},styling:{startLoc:{col:23,line:283},endLoc:{col:1,line:400},startBody:{col:23,line:283},endBody:{col:1,line:400}},events:{startLoc:{col:22,line:402},endLoc:{col:1,line:533},startBody:{col:22,line:402},endBody:{col:1,line:533}},methods:{startLoc:{col:23,line:535},endLoc:{col:1,line:600},startBody:{col:23,line:535},endBody:{col:1,line:600}},filtering:{startLoc:{col:25,line:602},endLoc:{col:1,line:688},startBody:{col:25,line:602},endBody:{col:1,line:688}},windowing:{startLoc:{col:25,line:690},endLoc:{col:1,line:771},startBody:{col:25,line:690},endBody:{col:1,line:771}},advanced:{startLoc:{col:24,line:773},endLoc:{col:1,line:859},startBody:{col:24,line:773},endBody:{col:1,line:859}},async:{startLoc:{col:21,line:861},endLoc:{col:1,line:943},startBody:{col:21,line:861},endBody:{col:1,line:943}}}}),title:"React Functional Select"},function SingleSelect(){var _useCallbackState=useCallbackState_useCallbackState(!1),_useCallbackState2=Object(slicedToArray.a)(_useCallbackState,2),isInvalid=_useCallbackState2[0],setIsInvalid=_useCallbackState2[1],_useCallbackState3=useCallbackState_useCallbackState(!1),_useCallbackState4=Object(slicedToArray.a)(_useCallbackState3,2),isLoading=_useCallbackState4[0],setIsLoading=_useCallbackState4[1],_useCallbackState5=useCallbackState_useCallbackState(!1),_useCallbackState6=Object(slicedToArray.a)(_useCallbackState5,2),isDisabled=_useCallbackState6[0],setIsDisabled=_useCallbackState6[1],_useCallbackState7=useCallbackState_useCallbackState(!0),_useCallbackState8=Object(slicedToArray.a)(_useCallbackState7,2),isClearable=_useCallbackState8[0],setIsClearable=_useCallbackState8[1],_useCallbackState9=useCallbackState_useCallbackState(!0),_useCallbackState10=Object(slicedToArray.a)(_useCallbackState9,2),isSearchable=_useCallbackState10[0],setIsSearchable=_useCallbackState10[1],getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getOptionLabel=Object(react.useCallback)((function(option){return"".concat(option.city,", ").concat(option.state)}),[]);return Object(react.useEffect)((function(){isDisabled&&setIsInvalid(!1)}),[isDisabled]),Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Single-select"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Paragraph,{children:["In this story's source code, notice that the callback function properties ",Object(jsx_runtime.jsx)("code",{children:"getOptionValue"})," and ",Object(jsx_runtime.jsx)("code",{children:"getOptionLabel"})," are wrapped in a ",Object(jsx_runtime.jsx)("code",{children:"useCallback"}),". While not required, ",Object(jsx_runtime.jsx)("em",{children:" strongly prefer "}),"memoization of any callback function property whenever possible. This will boost performance and reduce the amount of renders as these properties are referenced in the dependency arrays of ",Object(jsx_runtime.jsx)("code",{children:"useCallbacks"}),", ",Object(jsx_runtime.jsx)("code",{children:"useEffects"}),", and ",Object(jsx_runtime.jsx)("code",{children:"useMemos"}),". When defined in a functional component, wrap in a ",Object(jsx_runtime.jsx)("code",{children:"useCallback"}),"; when defined in a legacy class component, ensure proper binding to ",Object(jsx_runtime.jsx)("code",{children:"this"}),". Alternatively, if there is no dependency on any state, you can opt to hoist functions outside of the component entirely."]}),Object(jsx_runtime.jsxs)(Paragraph,{children:["The ",Object(jsx_runtime.jsx)("code",{children:"options"})," property should also be memoized. Either consume it directly from a state management store, or make sure it is stable by avoiding inline or render-based mutations."]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsx)(CardHeader,{children:Object(jsx_runtime.jsxs)(Checkboxes,{children:[Object(jsx_runtime.jsx)(components_Checkbox,{label:"Searchable",checked:isSearchable,onCheck:setIsSearchable}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"Clearable",checked:isClearable,onCheck:setIsClearable}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"Disabled",checked:isDisabled,onCheck:setIsDisabled}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"Invalid",checked:isInvalid,readOnly:isDisabled,onCheck:setIsInvalid}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"Loading",checked:isLoading,onCheck:setIsLoading})]})}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{isLoading:isLoading,isInvalid:isInvalid,options:CITY_OPTIONS,isDisabled:isDisabled,isClearable:isClearable,isSearchable:isSearchable,getOptionValue:getOptionValue,getOptionLabel:getOptionLabel})})})]})]})}),index_stories_MultiSelect=function MultiSelect(){var _useCallbackState11=useCallbackState_useCallbackState(!0),_useCallbackState12=Object(slicedToArray.a)(_useCallbackState11,2),openMenuOnClick=_useCallbackState12[0],setOpenMenuOnClick=_useCallbackState12[1],_useCallbackState13=useCallbackState_useCallbackState(!0),_useCallbackState14=Object(slicedToArray.a)(_useCallbackState13,2),closeMenuOnSelect=_useCallbackState14[0],setCloseMenuOnSelect=_useCallbackState14[1],_useCallbackState15=useCallbackState_useCallbackState(!1),_useCallbackState16=Object(slicedToArray.a)(_useCallbackState15,2),blurInputOnSelect=_useCallbackState16[0],setBlurInputOnSelect=_useCallbackState16[1],_useCallbackState17=useCallbackState_useCallbackState(!0),_useCallbackState18=Object(slicedToArray.a)(_useCallbackState17,2),hideSelectedOptions=_useCallbackState18[0],setHideSelectedOptions=_useCallbackState18[1],_useCallbackState19=useCallbackState_useCallbackState(!1),_useCallbackState20=Object(slicedToArray.a)(_useCallbackState19,2),useRenderMultiOptions=_useCallbackState20[0],setUseRenderMultiOptions=_useCallbackState20[1],getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getOptionLabel=Object(react.useCallback)((function(option){return"".concat(option.city,", ").concat(option.state)}),[]),renderMultiOptions=Object(react.useCallback)((function(_ref){var selected=_ref.selected,renderOptionLabel=_ref.renderOptionLabel;return Object(jsx_runtime.jsxs)(react.Fragment,{children:[selected.length&&renderOptionLabel(selected[0].data),selected.length>1&&Object(jsx_runtime.jsx)(OtherSpan,{children:"(+".concat(selected.length-1," ").concat(2===selected.length?"other":"others",")")})]})}),[]);return Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Multi-select"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(ListWrapper,{children:["Add the ",Object(jsx_runtime.jsx)("code",{children:"isMulti"})," property to allow for multiple selections. While in multi-select mode, some properties are now applicable and others become more pertinent.",Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"hideSelectedOptions?: boolean"})," - Hide the selected option from the menu. Default value is false, however, if undefined and ",Object(jsx_runtime.jsx)("code",{children:"isMulti === true"}),", then its value defaults to true."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"closeMenuOnSelect?: boolean"})," - Close the menu of options when the user selects an option. Default value is false, however, it may be benefical to set this property to true for convenience in multi-select scenarios."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"renderMultiOptions(params: MultiParams): ReactNode"})," - Optional callback function that can be used to further customize the selection label in multi-select scenarios. ",Object(jsx_runtime.jsx)("code",{children:"params"})," is an object that contains the ",Object(jsx_runtime.jsx)("code",{children:"selected"})," and ",Object(jsx_runtime.jsx)("code",{children:"renderOptionLabel"})," properties (array of selected options and function used to render individual option labels, respectively). When this function is defined, left and right arrow navigation of individual options is disabled. When using this property, it may be be a good idea to set the property ",Object(jsx_runtime.jsx)("code",{children:"backspaceClearsValue"})," to ",Object(jsx_runtime.jsx)("em",{children:"false"})," in order to avoid accidentally clearing all selections when searching."]})]})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsx)(CardHeader,{children:Object(jsx_runtime.jsxs)(Checkboxes,{children:[Object(jsx_runtime.jsx)(components_Checkbox,{label:"closeMenuOnSelect",checked:closeMenuOnSelect,onCheck:setCloseMenuOnSelect}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"hideSelectedOptions",checked:hideSelectedOptions,onCheck:setHideSelectedOptions}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"blurInputOnSelect",checked:blurInputOnSelect,onCheck:setBlurInputOnSelect}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"openMenuOnClick (click caret if false)",checked:openMenuOnClick,onCheck:setOpenMenuOnClick}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"renderMultiOptions (custom renderer)",checked:useRenderMultiOptions,onCheck:setUseRenderMultiOptions})]})}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{isMulti:!0,isClearable:!0,isSearchable:!0,options:CITY_OPTIONS,getOptionValue:getOptionValue,getOptionLabel:getOptionLabel,openMenuOnClick:openMenuOnClick,blurInputOnSelect:blurInputOnSelect,closeMenuOnSelect:closeMenuOnSelect,hideSelectedOptions:hideSelectedOptions,backspaceClearsValue:!useRenderMultiOptions,renderMultiOptions:useRenderMultiOptions?renderMultiOptions:void 0})})})]})]})},index_stories_Styling=function Styling(){var _useState=Object(react.useState)(),_useState2=Object(slicedToArray.a)(_useState,2),themeConfig=_useState2[0],setThemeConfig=_useState2[1],_useCallbackState21=useCallbackState_useCallbackState(null),_useCallbackState22=Object(slicedToArray.a)(_useCallbackState21,2),selectedOption=_useCallbackState22[0],setSelectedOption=_useCallbackState22[1],menuItemSize=(null==selectedOption?void 0:selectedOption.value)===ThemeEnum.LARGE_TEXT?44:35,memoizedMarkupNode=Object(react.useMemo)((function(){return Object(jsx_runtime.jsx)(components_CodeMarkup,{language:"markup",header:"Class Markup",data:CLASS_NAME_HTML})}),[]);return Object(react.useEffect)((function(){if(selectedOption){var value=selectedOption.value;setThemeConfig(ThemeConfigMap[value])}}),[selectedOption]),Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Styling"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsx)(SubTitle,{children:"Theming"}),Object(jsx_runtime.jsxs)(Columns,{children:[Object(jsx_runtime.jsxs)(Column,{widthPercent:40,children:[Object(jsx_runtime.jsxs)(Content,{children:["react-functional-select uses ",Object(jsx_runtime.jsx)(components_PackageLink,Object(objectSpread2.a)({},STYLED_COMPONENTS_PACKAGE))," to handle its styling. The root node is wrapped in styled-component's ",Object(jsx_runtime.jsx)("code",{children:"ThemeProvider"})," wrapper component which gives all child styled-components access to the provided theme via React's context API. To override react-functional-select's default theme, pass an object to the ",Object(jsx_runtime.jsx)("code",{children:"themeConfig"})," property - any matching properties will replace those in the default theme."]}),Object(jsx_runtime.jsxs)(Content,{children:["Starting in ",Object(jsx_runtime.jsx)("strong",{children:"v2.0.0"}),", some of the nested objects in the ",Object(jsx_runtime.jsx)("code",{children:"themeConfig"})," object contain a ",Object(jsx_runtime.jsx)("code",{children:"css"})," property of type ",Object(jsx_runtime.jsx)("code",{children:"string | FlattenSimpleInterpolation | undefined"})," (default value is undefined). This property can be used to pass raw CSS styles as a string or wrapped in ",Object(jsx_runtime.jsx)(components_PackageLink,Object(objectSpread2.a)({},STYLED_COMPONENTS_PACKAGE))," exported ",Object(jsx_runtime.jsx)("code",{children:"css"})," function. Those objects are: select, control, icon, menu, noOptions, multiValue, and input."]}),Object(jsx_runtime.jsxs)(Content,{children:["Starting in ",Object(jsx_runtime.jsx)("strong",{children:"v2.7.0"}),", the control object in ",Object(jsx_runtime.jsx)("code",{children:"themeConfig"})," has the property ",Object(jsx_runtime.jsx)("code",{children:"focusedCss"})," - which is similar to the ",Object(jsx_runtime.jsx)("code",{children:"css"})," property, except that it is only applied when the select control is focused (and removed when blurred)."]})]}),Object(jsx_runtime.jsx)(Column,{widthPercent:60,children:Object(jsx_runtime.jsx)(components_CodeMarkup,{language:"javascript",data:THEME_DEFAULTS,header:"Theme Defaults",formatFn:stringifyJavaScriptObj})})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Using Classes"}),Object(jsx_runtime.jsxs)(Columns,{children:[Object(jsx_runtime.jsxs)(Column,{widthPercent:40,children:[Object(jsx_runtime.jsxs)(Content,{children:["If you want to style the component using CSS classes, set the ",Object(jsx_runtime.jsx)("code",{children:"addClassNames"})," prop to true and it will then generate ",Object(jsx_runtime.jsx)("code",{children:"className"})," attributes for that specific instance of the component. These are the classes that are available:"]}),Object(jsx_runtime.jsx)(ListWrapper,{className:"is-class-list",children:Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsx)(Li,{children:"rfs-select-container"}),Object(jsx_runtime.jsx)(Li,{children:"rfs-control-container"}),Object(jsx_runtime.jsx)(Li,{children:"rfs-menu-container"}),Object(jsx_runtime.jsx)(Li,{children:"rfs-autosize-input"}),Object(jsx_runtime.jsx)(Li,{children:"rfs-caret-icon"}),Object(jsx_runtime.jsx)(Li,{children:"rfs-clear-icon"}),Object(jsx_runtime.jsx)(Li,{children:"rfs-loading-dots"}),Object(jsx_runtime.jsx)(Li,{children:"".concat("rfs-option",", ").concat(OPTION_FOCUSED_CLS,", ").concat(OPTION_SELECTED_CLS,", ").concat(OPTION_DISABLED_CLS)})]})})]}),Object(jsx_runtime.jsx)(Column,{widthPercent:60,children:memoizedMarkupNode})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsx)(CardHeader,{children:Object(jsx_runtime.jsx)(styled_Label,{children:"Try selecting different themes"})}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsxs)(Columns,{children:[Object(jsx_runtime.jsx)(Column,{widthPercent:40,children:Object(jsx_runtime.jsx)("div",{style:{marginTop:"1rem"},children:Object(jsx_runtime.jsx)(Select,{isClearable:!1,isSearchable:!1,options:THEME_OPTIONS,themeConfig:themeConfig,menuItemSize:menuItemSize,initialValue:THEME_OPTIONS[0],onOptionChange:setSelectedOption})})}),Object(jsx_runtime.jsx)(Column,{widthPercent:60,children:Object(jsx_runtime.jsx)(components_CodeMarkup,{data:themeConfig,language:"javascript",header:"theme-config",formatFn:stringifyJavaScriptObj})})]})})]})]})},index_stories_Events=function Events(){var options=Object(react.useMemo)((function(){return createSelectOptions(5)}),[]),_useCallbackState23=useCallbackState_useCallbackState(!1),_useCallbackState24=Object(slicedToArray.a)(_useCallbackState23,2),addOnKeyDown=_useCallbackState24[0],setAddOnKeyDown=_useCallbackState24[1],_useCallbackState25=useCallbackState_useCallbackState(!0),_useCallbackState26=Object(slicedToArray.a)(_useCallbackState25,2),addOnMenuOpen=_useCallbackState26[0],setAddOnMenuOpen=_useCallbackState26[1],_useCallbackState27=useCallbackState_useCallbackState(!1),_useCallbackState28=Object(slicedToArray.a)(_useCallbackState27,2),addOnMenuClose=_useCallbackState28[0],setAddOnMenuClose=_useCallbackState28[1],_useCallbackState29=useCallbackState_useCallbackState(!1),_useCallbackState30=Object(slicedToArray.a)(_useCallbackState29,2),addOnInputBlur=_useCallbackState30[0],setAddOnInputBlur=_useCallbackState30[1],_useCallbackState31=useCallbackState_useCallbackState(!1),_useCallbackState32=Object(slicedToArray.a)(_useCallbackState31,2),addOnInputFocus=_useCallbackState32[0],setAddOnInputFocus=_useCallbackState32[1],_useCallbackState33=useCallbackState_useCallbackState(!0),_useCallbackState34=Object(slicedToArray.a)(_useCallbackState33,2),addOnOptionChange=_useCallbackState34[0],setAddOnOptionChange=_useCallbackState34[1],onOptionChange=Object(react.useCallback)((function(option){var optionJsonStr=JSON.stringify(option||{}).replace(/"/g,"'");utils_renderInfoToast("Selected Option: ".concat(optionJsonStr))}),[]),onMenuOpen=Object(react.useCallback)((function(){return utils_renderInfoToast("Menu opened!")}),[]),onMenuClose=Object(react.useCallback)((function(){return utils_renderInfoToast("Menu closed!")}),[]),onInputBlur=Object(react.useCallback)((function(){return utils_renderInfoToast("Control blurred!")}),[]),onInputFocus=Object(react.useCallback)((function(){return utils_renderInfoToast("Control focused!")}),[]),onKeyDown=Object(react.useCallback)((function(){return utils_renderInfoToast("keydown event executed!")}),[]);return Object(react.useEffect)((function(){return react_toastify_esm.a.configure(TOAST_CONTAINER_PROPS),function(){react_toastify_esm.a.dismiss()}}),[]),Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Events"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(ListWrapper,{children:["There are various callback function properties that are executed following their associated events:",Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onOptionChange(data: any): void"})," - executed after an option is selected or removed"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onMenuOpen(...args: any[]): void"})," - executed after the menu is opened"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onMenuClose(...args: any[]): void"})," - executed after the menu is closed"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onInputChange(value: string): void"})," - executed after the input control's value changes"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onInputBlur(e: FocusEvent<HTMLInputElement>): void"})," - executed after the input control is blurred"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onInputFocus(e: FocusEvent<HTMLInputElement>): void"})," - executed after the input control is focused"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onKeyDown(e: KeyboardEvent<HTMLDivElement>, input?: string, focusedOption?: FocusedOption): void"})," - executed after the onKeyDown event"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onSearchChange(value: string): void"})," - executed after the input value is persisted to state; this value also evaluates the ",Object(jsx_runtime.jsx)("code",{children:"inputDelay"})," property for debouncing - this callback is really only useful when ",Object(jsx_runtime.jsx)("code",{children:"inputDelay"})," is defined, and if not, it probably makes more sense to use the ",Object(jsx_runtime.jsx)("code",{children:"onInputChange"})," callback"]})]})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsxs)(CardHeader,{children:[Object(jsx_runtime.jsx)(styled_Label,{children:"Events trigger a toast notification"}),Object(jsx_runtime.jsxs)(Checkboxes,{children:[Object(jsx_runtime.jsx)(components_Checkbox,{label:"onOptionChange",checked:addOnOptionChange,onCheck:setAddOnOptionChange}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"onMenuOpen",checked:addOnMenuOpen,onCheck:setAddOnMenuOpen}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"onMenuClose",checked:addOnMenuClose,onCheck:setAddOnMenuClose}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"onInputBlur",checked:addOnInputBlur,onCheck:setAddOnInputBlur}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"onInputFocus",checked:addOnInputFocus,onCheck:setAddOnInputFocus}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"onKeyDown",checked:addOnKeyDown,onCheck:setAddOnKeyDown})]})]}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{options:options,onKeyDown:addOnKeyDown?onKeyDown:void 0,onMenuOpen:addOnMenuOpen?onMenuOpen:void 0,onMenuClose:addOnMenuClose?onMenuClose:void 0,onInputBlur:addOnInputBlur?onInputBlur:void 0,onInputFocus:addOnInputFocus?onInputFocus:void 0,onOptionChange:addOnOptionChange?onOptionChange:void 0})})})]})]})},index_stories_Methods=function Methods(){var selectRef=Object(react.useRef)(null),options=Object(react.useMemo)((function(){return createSelectOptions(5)}),[]);return Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Methods"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(ListWrapper,{children:["Five public methods are exposed to wrapping components and are accessible via a forwarded ",Object(jsx_runtime.jsx)("code",{children:"ref"}),".",Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"blur(): void"})," - blur the control programatically"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"focus(): void"})," - focus the control programatically"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"toggleMenu(state?: boolean): void"})," - toggle the menu programatically"]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"clearValue(): void"})," - clear the current value programatically ",Object(jsx_runtime.jsx)("em",{children:"(if an option is selected)"})]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"setValue(option?: any): void"})," - set the value programatically ",Object(jsx_runtime.jsx)("em",{children:"(option will be validated)"})]})]})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsxs)(CardHeader,{children:[Object(jsx_runtime.jsx)(styled_Label,{children:"Methods"}),Object(jsx_runtime.jsxs)(Buttons,{children:[Object(jsx_runtime.jsx)(Button,{onClick:function focusSelect(){var _selectRef$current2;return null===(_selectRef$current2=selectRef.current)||void 0===_selectRef$current2?void 0:_selectRef$current2.focus()},children:"Focus"}),Object(jsx_runtime.jsx)(Button,{onClick:function blurSelect(){var _selectRef$current;return null===(_selectRef$current=selectRef.current)||void 0===_selectRef$current?void 0:_selectRef$current.blur()},children:"Blur"}),Object(jsx_runtime.jsx)(Button,{onClick:function toggleMenuOpen(){var _selectRef$current4;return null===(_selectRef$current4=selectRef.current)||void 0===_selectRef$current4?void 0:_selectRef$current4.toggleMenu(!0)},children:"Open Menu"}),Object(jsx_runtime.jsx)(Button,{onClick:function clearValue(){var _selectRef$current3;return null===(_selectRef$current3=selectRef.current)||void 0===_selectRef$current3?void 0:_selectRef$current3.clearValue()},children:"Clear Value"}),Object(jsx_runtime.jsx)(Button,{onClick:function updateSelectedOption(){var _selectRef$current5;return null===(_selectRef$current5=selectRef.current)||void 0===_selectRef$current5?void 0:_selectRef$current5.setValue(options[0])},children:"Set Value (1st Option)"})]})]}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{ref:selectRef,options:options,initialValue:options[0]})})})]})]})},index_stories_Filtering=function Filtering(){var _useCallbackState35=useCallbackState_useCallbackState(!0),_useCallbackState36=Object(slicedToArray.a)(_useCallbackState35,2),filterIgnoreCase=_useCallbackState36[0],setFilterIgnoreCase=_useCallbackState36[1],_useCallbackState37=useCallbackState_useCallbackState(!1),_useCallbackState38=Object(slicedToArray.a)(_useCallbackState37,2),useCustomFilterFunc=_useCallbackState38[0],setUseCustomFilterFunc=_useCallbackState38[1],_useCallbackState39=useCallbackState_useCallbackState(!1),_useCallbackState40=Object(slicedToArray.a)(_useCallbackState39,2),filterIgnoreAccents=_useCallbackState40[0],setFilterIgnoreAccents=_useCallbackState40[1],_useCallbackState41=useCallbackState_useCallbackState(!1),_useCallbackState42=Object(slicedToArray.a)(_useCallbackState41,2),filterMatchFromStart=_useCallbackState42[0],setFilterMatchFromStart=_useCallbackState42[1],getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getOptionLabel=Object(react.useCallback)((function(option){return"".concat(option.city,", ").concat(option.state)}),[]),getFilterOptionString=Object(react.useCallback)((function(menuOption){return menuOption.data.state}),[]),options=Object(react.useMemo)((function(){return[].concat(Object(toConsumableArray.a)(CITY_OPTIONS),[{id:11,city:"São Paulo",state:"BR"}])}),[]);return Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Filter Customization"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(ListWrapper,{children:["The default filtering functionality can be customized via the following properties:",Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"filterIgnoreCase?: boolean"})," - Filter ignores case when matching strings. Default value is ",Object(jsx_runtime.jsx)("code",{children:"true"}),"."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"filterIgnoreAccents?: boolean"})," - Filter ignores accents when matching strings. Default value is ",Object(jsx_runtime.jsx)("code",{children:"false"}),"."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"filterMatchFrom?: 'any' | 'start'"})," - Position in source string to perform match. Default value is ",Object(jsx_runtime.jsx)("code",{children:"'any'"}),"."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"getFilterOptionString(option: MenuOption): string"})," - When defined will take each option and generate a string used in the filtering process. By default, the stringified version of what is generated by ",Object(jsx_runtime.jsx)("code",{children:"getOptionLabel"}),", if definded, or the option's label as a fallback. The ",Object(jsx_runtime.jsx)("code",{children:"MenuOption"})," typed parameter that ",Object(jsx_runtime.jsx)("code",{children:"getFilterOptionString"})," accepts contains a ",Object(jsx_runtime.jsx)("code",{children:"data"})," property that represents the objects that comprise your ",Object(jsx_runtime.jsx)("code",{children:"options"})," property."]})]})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsx)(CardHeader,{children:Object(jsx_runtime.jsxs)(Checkboxes,{children:[Object(jsx_runtime.jsx)(components_Checkbox,{label:"Ignore Case",checked:filterIgnoreCase,onCheck:setFilterIgnoreCase}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"Ignore Accents",checked:filterIgnoreAccents,onCheck:setFilterIgnoreAccents}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"Match from the start",checked:filterMatchFromStart,onCheck:setFilterMatchFromStart}),Object(jsx_runtime.jsx)(components_Checkbox,{label:"Use custom filter function (by state only)",checked:useCustomFilterFunc,onCheck:setUseCustomFilterFunc})]})}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{isClearable:!0,options:options,getOptionValue:getOptionValue,getOptionLabel:getOptionLabel,filterIgnoreCase:filterIgnoreCase,filterIgnoreAccents:filterIgnoreAccents,getFilterOptionString:useCustomFilterFunc?getFilterOptionString:void 0,filterMatchFrom:filterMatchFromStart?FilterMatchEnum.START:FilterMatchEnum.ANY})})})]})]})},index_stories_Windowing=function Windowing(){var optionCountList=[100,1e3,5e3,25e3,5e4],selectRef=Object(react.useRef)(null),_useState3=Object(react.useState)([]),_useState4=Object(slicedToArray.a)(_useState3,2),options=_useState4[0],setOptions=_useState4[1],_useState5=Object(react.useState)(optionCountList[0]),_useState6=Object(slicedToArray.a)(_useState5,2),optionsCount=_useState6[0],setOptionsCount=_useState6[1];return useUpdateEffect_useUpdateEffect((function(){var _selectRef$current6;null===(_selectRef$current6=selectRef.current)||void 0===_selectRef$current6||_selectRef$current6.clearValue()}),[options]),Object(react.useEffect)((function(){var nextSelectOptions=createSelectOptions(optionsCount);setOptions(nextSelectOptions)}),[optionsCount]),Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Integrated Windowing"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(ListWrapper,{children:["Option data is 'windowed' using the"," ",Object(jsx_runtime.jsx)(components_PackageLink,Object(objectSpread2.a)({},REACT_WINDOW_PACKAGE))," package. Aside from the obvious benefits provided by only rendering a small subset of your enumerable data (rather than bloating the DOM with an excessive amount of nodes), 'windowing' can also assist with:",Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)("strong",{children:"Efficient memory allocation"}),". 'Windowing' naturally lends itself to the dynamic generation of attributes/values as each object comes into your renderer's scope (as opposed to allocating this data upfront for each object in your list). This way you can perform this work just when you absolutely need to and then can immediately release it for the GC to cleanup. As an example I am generating the ",Object(jsx_runtime.jsx)("code",{children:"onClick"}),", ",Object(jsx_runtime.jsx)("code",{children:"id"}),", and"," ",Object(jsx_runtime.jsx)("code",{children:"className"})," attributes for each ",Object(jsx_runtime.jsx)("code",{children:"menuOption"})," ","as they get passed to the ",Object(jsx_runtime.jsx)("code",{children:"<Option />"})," renderer component."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)("strong",{children:"Functional architecture"}),". The flexibility provided through only having to manage subsets of your list allows for a more dynamic application. By breaking your code out into smaller, 'pure' child components, you can write code that scales well and becomes open to performance optimizations - most notably, memoization. Simple components that rely on the props passed to it (rather than its own managed state) to generate its JSX are likely candidates for memoization (testing & debugging becomes much easier as well)."]})]}),Object(jsx_runtime.jsx)("em",{children:"Note: "}),"The only time any noticeable performance degradation will be observed is during search input updates when the ",Object(jsx_runtime.jsx)("code",{children:"options"})," ","count reaches the high tens of thousands. To work around this, the"," ",Object(jsx_runtime.jsx)("code",{children:"inputDelay"})," (number in milliseconds) can be set to debounce the input value. That way, the ",Object(jsx_runtime.jsx)("code",{children:"menuOptions"})," will not be recalculated on every keystroke."]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsxs)(CardHeader,{children:[Object(jsx_runtime.jsx)(styled_Label,{children:"Options Count"}),Object(jsx_runtime.jsx)(Buttons,{children:optionCountList.map((function(count){return Object(jsx_runtime.jsx)(components_OptionsCountButton,{count:count,optionsCount:optionsCount,setOptionsCount:setOptionsCount},count)}))})]}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{ref:selectRef,options:options})})})]})]})},index_stories_Advanced=function Advanced(){var getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getIsOptionDisabled=Object(react.useCallback)((function(option){return option.name===PACKAGE_OPTIONS[3].name}),[]),renderOptionLabel=Object(react.useCallback)((function(option){return Object(jsx_runtime.jsxs)(OptionContainer,{children:[Object(jsx_runtime.jsxs)(ReactSvg,{"aria-hidden":"true",viewBox:"0 0 841.9 595.3",isDisabled:getIsOptionDisabled(option),children:[Object(jsx_runtime.jsx)("path",Object(objectSpread2.a)({},REACT_SVG_PATH_PROPS)),Object(jsx_runtime.jsx)("circle",Object(objectSpread2.a)({},REACT_SVG_CIRCLE_PROPS))]}),Object(jsx_runtime.jsx)(OptionName,{children:option.name})]})}),[getIsOptionDisabled]),customCaretIcon=Object(react.useCallback)((function(_ref2){var menuOpen=_ref2.menuOpen;return Object(jsx_runtime.jsx)(ChevronDownSvg,{menuOpen:menuOpen,"aria-hidden":"true",viewBox:"0 0 448 512",children:Object(jsx_runtime.jsx)("path",Object(objectSpread2.a)({},CHEVRON_DOWN_PATH_PROPS))})}),[]);return Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Advanced Customization"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(ListWrapper,{children:["Implementation using a couple of the more specialized properties.",Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"renderOptionLabel(option: any): React.ReactNode"})," - Callback function with a return type of ",Object(jsx_runtime.jsx)("code",{children:"ReactNode"}),". Use this property in cases where the standard ",Object(jsx_runtime.jsx)("code",{children:"getOptionLabel"})," property won't meet your needs (for instance, you want to render each option's label using custom JSX). More complex option labels will likely equate to longer render durations - this can translate into a flash of empty space when a user first starts scrolling. In order to prevent this, the ",Object(jsx_runtime.jsx)("code",{children:"menuOverscanCount"})," property can be increased to render additional rows outside of the visible area. The default value for this property is 1 and it is important to note that increasing this value can negatively impact performance."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"getIsOptionDisabled(option: any): boolean"})," - Callback function with a return type of ",Object(jsx_runtime.jsx)("code",{children:"Boolean"}),". When it evaluates to a value of true, that option iteration will be rendered ",Object(jsx_runtime.jsx)("em",{children:"disabled"}),". As an alternative, you can also pass a property of ",Object(jsx_runtime.jsx)("code",{children:"isDisabled"})," with each option. Use of these two options - they cannot both be specified."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"caretIcon: ReactNode | (...args: any[]) => ReactNode"})," - A custom node or a function that returns a node can used for the ",Object(jsx_runtime.jsx)("code",{children:"caretIcon"})," property. When using a function, an object containing stateful data is forwarded and can be used to style your custom node accordingly. The state is ",Object(jsx_runtime.jsx)("code",{children:"{ menuOpen, isLoading, isInvalid, isDisabled }"})," of type ",Object(jsx_runtime.jsx)("code",{children:"Record<string, boolean>"}),". The ",Object(jsx_runtime.jsx)("code",{children:"clearIcon"})," property has an identical definition."]})]})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsx)(CardHeader,{children:Object(jsx_runtime.jsx)(styled_Label,{children:"JSX labels, custom caret icon, and disabled option"})}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{isSearchable:!1,options:PACKAGE_OPTIONS,themeConfig:THEME_CONFIG,caretIcon:customCaretIcon,getOptionValue:getOptionValue,renderOptionLabel:renderOptionLabel,getIsOptionDisabled:getIsOptionDisabled})})})]})]})},index_stories_Async=function Async(){var _useState7=Object(react.useState)(!1),_useState8=Object(slicedToArray.a)(_useState7,2),isLoading=_useState8[0],setIsLoading=_useState8[1],_useState9=Object(react.useState)((function(){return createAsyncOptions(5,"Initial")})),_useState10=Object(slicedToArray.a)(_useState9,2),options=_useState10[0],setOptions=_useState10[1],onInputChange=Object(react.useCallback)((function(){return setIsLoading(!0)}),[]),onSearchChange=Object(react.useCallback)((function(value){(function mockHttpRequest(){return _mockHttpRequest.apply(this,arguments)})().then((function(){var nextOptions=createAsyncOptions(function getRandomInt(min,max){return Math.floor(Math.random()*(max-min+1))+min}(1,5),"Search text: ".concat(value||"Initial"));setOptions(nextOptions)})).catch((function(err){return console.error(err)})).then((function(){return setIsLoading(!1)}))}),[]);return Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsx)(Title,{children:"Async Mode"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(ListWrapper,{children:["Add the ",Object(jsx_runtime.jsx)("code",{children:"async"})," property to enable async mode. There is one key difference in core functionality with async mode - changes to search input value will not cause the ",Object(jsx_runtime.jsx)("code",{children:"useMenuOptions"})," effect to run. The rest of hooking into async mode is achieved using some combination of the properties found below. ",Object(jsx_runtime.jsx)("em",{children:"Properties onInputChange and onSearchChange should be memoized."}),Object(jsx_runtime.jsxs)(List,{children:[Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onInputChange(value: string): void"})," - callback executed directly following the input control's ",Object(jsx_runtime.jsx)("code",{children:"onChange"})," event. This callback is not debounced, so it fires immediately. This is a good place to set a stateful loading property in your parent component that is mapped to react-functional-select's ",Object(jsx_runtime.jsx)("code",{children:"isLoading"})," property."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"onSearchChange(value: string): void"})," - callback executed following component state updates for the ",Object(jsx_runtime.jsx)("code",{children:"debouncedInputValue"}),". The debounce is set using the ",Object(jsx_runtime.jsx)("code",{children:"inputDelay"})," property. This callback is a good place for your http fetch request and post-request logic (i.e. setting isLoading false)."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"inputDelay?: number"})," - As mentioned above, this can be set to a positive integer in order to debounce updates to the search input value following input change events. This property directly maps to the ",Object(jsx_runtime.jsx)("code",{children:"delay"})," in milliconds passed to the ",Object(jsx_runtime.jsx)("code",{children:"setTimeout"})," method."]}),Object(jsx_runtime.jsxs)(Li,{children:[Object(jsx_runtime.jsx)(TextHeader,{children:"isLoading?: boolean"})," - When true, a loading animation will appear in the far-right of the control and take the place of the clear icon (if shown). Additionally, it will hide options in the menu and instead, display a loading message. The loading message text defaults to 'Loading...', but can be overriden via the ",Object(jsx_runtime.jsx)("code",{children:"loadingMsg"})," property."]})]})]}),Object(jsx_runtime.jsx)(SubTitle,{children:"Demo"}),Object(jsx_runtime.jsx)(Hr,{}),Object(jsx_runtime.jsxs)(Card,{children:[Object(jsx_runtime.jsx)(CardHeader,{children:Object(jsx_runtime.jsx)(styled_Label,{children:"Search debounced 500ms and mock HTTP call resolves after 500ms"})}),Object(jsx_runtime.jsx)(CardBody,{children:Object(jsx_runtime.jsx)(SelectContainer,{children:Object(jsx_runtime.jsx)(Select,{async:!0,isClearable:!0,inputDelay:500,options:options,isLoading:isLoading,onInputChange:onInputChange,onSearchChange:onSearchChange})})})]})]})}},932:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var jsx_runtime=__webpack_require__(0),react_dom=__webpack_require__(48),react_dom_default=__webpack_require__.n(react_dom),taggedTemplateLiteral=__webpack_require__(387),styled_components_browser_esm=__webpack_require__(2),_toastify_trackProgress=Object(styled_components_browser_esm.e)(["0%{transform:scaleX(1);}100%{transform:scaleX(0);}"]),_toastify_bounceOutRight=Object(styled_components_browser_esm.e)(["20%{opacity:1;transform:translate3d(-20px,0,0);}to{opacity:0;transform:translate3d(2000px,0,0);}"]),_toastify_bounceInRight=Object(styled_components_browser_esm.e)(["from,60%,75%,90%,to{animation-timing-function:cubic-bezier(0.215,0.610,0.355,1.000);}from{opacity:0;transform:translate3d(3000px,0,0);}60%{opacity:1;transform:translate3d(-25px,0,0);}75%{transform:translate3d(10px,0,0);}90%{transform:translate3d(-5px,0,0);}to{transform:none;}"]),react_toastify_css=Object(styled_components_browser_esm.c)([".Toastify__toast-container{z-index:9999;position:fixed;padding:4px;width:320px;box-sizing:border-box;color:#fff;&--top-right{top:1em;right:1em;}@media only screen and (max-width:480px){width:100vw;padding:0;left:0;margin:0;&--top-right{top:0;}}.Toastify__toast{position:relative;min-height:64px;box-sizing:border-box;margin-bottom:1rem;padding:8px;border-radius:3px;box-shadow:0 1px 10px 0 rgba(0,0,0,0.1),0 2px 15px 0 rgba(0,0,0,0.05);display:flex;justify-content:space-between;max-height:800px;overflow:hidden;font-size:1.075rem;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;cursor:pointer;direction:ltr;&--default{background:#fff;color:#aaa;}&--info{color:#fff;background:#149df3;}&-body{flex:1;margin:auto 0 auto 0.75rem;}@media only screen and (max-width:480px){font-size:1rem;border-radius:0;margin-bottom:0.25rem;}}.Toastify__close-button{color:#fff;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:0.7;transition:0.3s ease;align-self:flex-start;&--default{color:#000;opacity:0.3;}& > svg{fill:currentColor;height:16px;width:14px;font-weight:700;}&:hover,&:focus{opacity:1;}}.Toastify__progress-bar{position:absolute;bottom:0;left:0;width:100%;height:5px;z-index:9999;opacity:0.7;background-color:rgba(255,255,255,0.7);transform-origin:left;&--animated{animation:"," linear 1 forwards;}&--controlled{transition:transform 0.2s;}&--default{background:linear-gradient( to right,#4cd964,#5ac8fa,#007aff,#34aadc,#5856d6,#ff2d55 );}}}.Toastify__bounce-enter{&--top-right{animation-name:",";}}.Toastify__bounce-exit{&--top-right{animation-name:",";}}"],_toastify_trackProgress,_toastify_bounceInRight,_toastify_bounceOutRight);function _templateObject(){var data=Object(taggedTemplateLiteral.a)(["\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  html {\n    line-height: 1.15;\n    text-size-adjust: 100%;\n    text-rendering: optimizeLegibility;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  }\n\n  body {\n    flex: 1;\n    margin: 0;\n    display: flex;\n    font-size: 1rem;\n    font-weight: 400;\n    text-align: left;\n    line-height: 1.5;\n    min-height: 120vh;\n    padding: 1rem 0.25rem !important;\n    flex-direction: column;\n    background-color: #fff;\n    color: rgba(0, 0, 0, 0.87);\n    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;\n  }\n\n  em {\n    font-weight: 600;\n  }\n\n  strong {\n    color: black;\n    font-weight: 600;\n    font-size: 1.025em;\n  }\n\n  code {\n    font-size: 88%;\n    border-radius: 3px;\n    word-break: break-word;\n    padding: .15em .2em .15em;\n    color: rgba(0, 0, 0, 0.87);\n    background-color: rgba(30, 167, 253, 0.115);\n    font-family: source-code-pro, Menlo, Monaco, Consolas, Courier New, monospace;\n\n    @media only screen and (max-width: 525px) {\n      padding: .1em .25em .1em;\n    }\n  }\n\n  ","\n"]);return _templateObject=function _templateObject(){return data},data}var el,GlobalStyle=Object(styled_components_browser_esm.b)(_templateObject(),react_toastify_css),gsNode=document.getElementById("temp2-global-style")||((el=document.createElement("div")).id="temp2-global-style",document.head.appendChild(el),el);react_dom_default.a.render(Object(jsx_runtime.jsx)(GlobalStyle,{}),gsNode,(function rendererCallbackFn(){gsNode&&document.head.removeChild(gsNode)}))}},[[397,1,2]]]);
//# sourceMappingURL=main.bb7a2fb3f59610f0ccab.bundle.js.map