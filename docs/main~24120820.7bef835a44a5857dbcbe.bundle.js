(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1019:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/react-logo.9f16557d.svg"},1020:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SingleSelect",(function(){return index_stories_SingleSelect})),__webpack_require__.d(__webpack_exports__,"MultiSelect",(function(){return index_stories_MultiSelect})),__webpack_require__.d(__webpack_exports__,"Styling",(function(){return index_stories_Styling})),__webpack_require__.d(__webpack_exports__,"Events",(function(){return index_stories_Events})),__webpack_require__.d(__webpack_exports__,"Methods",(function(){return index_stories_Methods})),__webpack_require__.d(__webpack_exports__,"Filtering",(function(){return index_stories_Filtering})),__webpack_require__.d(__webpack_exports__,"Windowing",(function(){return index_stories_Windowing})),__webpack_require__.d(__webpack_exports__,"Advanced",(function(){return index_stories_Advanced})),__webpack_require__.d(__webpack_exports__,"Async",(function(){return index_stories_Async}));var react=__webpack_require__(0),react_default=__webpack_require__.n(react);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var useCallbackState_useCallbackState=function useCallbackState(initialState){var _useState2=_slicedToArray(Object(react.useState)(initialState),2),state=_useState2[0],setState=_useState2[1];return[state,Object(react.useCallback)((function(newState){return setState(newState)}),[])]},react_toastify_esm=__webpack_require__(94),src=__webpack_require__(29);function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}var utils_renderInfoToast=function renderInfoToast(message){react_toastify_esm.a.info(message)},stringifyJavaScriptObj=function stringifyJavaScriptObj(data){return JSON.stringify(data||{},null,2).replace(/"(\w+)"\s*:/g,"$1:").replace(/"/g,"'")},createSelectOptions=function createSelectOptions(optionCount){for(var results=[],i=0;i<optionCount;i+=1)results.push({value:i+1,label:"Option ".concat(i+1)});return results},createAsyncOptions=function createAsyncOptions(optionCount,labelSuffix){return createSelectOptions(optionCount).map((function(option){return{value:"".concat(option.value).concat(labelSuffix),label:"".concat(option.label," - ").concat(labelSuffix)}}))};function _mockHttpRequest(){return(_mockHttpRequest=_asyncToGenerator(regeneratorRuntime.mark((function _callee(){var delay,_args=arguments;return regeneratorRuntime.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return delay=_args.length>0&&void 0!==_args[0]?_args[0]:500,_context.next=3,new Promise((function(resolve){return setTimeout(resolve,delay)}));case 3:case"end":return _context.stop()}}),_callee)})))).apply(this,arguments)}var styled_components_browser_esm=__webpack_require__(1);function _templateObject4(){var data=_taggedTemplateLiteral(['\n  z-index: 0;\n  width: 1rem;\n  height: 1rem;\n  position: absolute;\n  border-style: solid;\n  border-width: 1.5px;\n  box-sizing: border-box;\n  border-radius: 0.0625rem;\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.54);\n  transition: border-color 0.365s ease;\n\n  :after,\n  :before {\n    height: 0;\n    opacity: 0;\n    content: "";\n    width: 0.2rem;\n    display: block;\n    position: absolute;\n    border-radius: 0.25rem;\n    transform-origin: left top;\n    background-color: ',";\n    transition: opacity 0.365s ease, height 0s linear 0.365s;\n  }\n\n  :after {\n    top: 0.33rem;\n    left: 0.01rem;\n    transform: rotate(-45deg);\n  }\n\n  :before {\n    top: 0.68rem;\n    left: 0.39rem;\n    transform: rotate(-135deg);\n  }\n"]);return _templateObject4=function _templateObject4(){return data},data}function _templateObject3(){var data=_taggedTemplateLiteral(["\n  user-select: none;\n  position: relative;\n  margin-top: 0.5rem;\n  align-items: center;\n  display: inline-flex;\n\n  ","\n"]);return _templateObject3=function _templateObject3(){return data},data}function _templateObject2(){var data=_taggedTemplateLiteral(["\n  z-index: 3;\n  opacity: 0;\n  width: 1em;\n  height: 1em;\n  cursor: pointer;\n  position: absolute;\n\n  :checked ~ i {\n    border-color: ",";\n\n    :after,\n    :before {\n      opacity: 1;\n      transition: height 0.365s ease;\n    }\n\n    :after {\n      height: 0.5rem;\n    }\n\n    :before {\n      height: 1.16rem;\n      transition-delay: 0.135s;\n    }\n  }\n"]);return _templateObject2=function _templateObject2(){return data},data}function _templateObject(){var data=_taggedTemplateLiteral(["\n  user-select: none;\n  margin-left: 1.6rem;\n"]);return _templateObject=function _templateObject(){return data},data}function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var COLOR_BORDER_CHECKED=function hexToRgba(hex){var alpha=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,hexReplacer=hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(m,r,g,b){return"#".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b)})),alphaValid=Math.min(1,Math.max(0,alpha)),rgbaParts=hexReplacer.substring(1).match(/.{2}/g).map((function(x){return parseInt(x,16)}));return rgbaParts.push(alphaValid),"rgba(".concat(rgbaParts.join(","),")")}("#149DF3",.8),Label=styled_components_browser_esm.d.span(_templateObject()),Input=styled_components_browser_esm.d.input(_templateObject2(),COLOR_BORDER_CHECKED),CheckboxWrapper=styled_components_browser_esm.d.label(_templateObject3(),(function(_ref){return _ref.isReadOnly&&"\n      cursor: default;\n      pointer-events: none;\n      > i {\n        opacity: 0.5;\n      }\n    "})),CheckIcon=styled_components_browser_esm.d.i(_templateObject4(),"#149DF3"),components_Checkbox=react_default.a.memo((function(_ref2){var label=_ref2.label,onCheck=_ref2.onCheck,checked=_ref2.checked,readOnly=_ref2.readOnly;return react_default.a.createElement(CheckboxWrapper,{isReadOnly:readOnly},react_default.a.createElement(Input,{type:"checkbox",checked:checked,onChange:function onChange(e){return onCheck(e.target.checked)}}),react_default.a.createElement(CheckIcon,null),label&&react_default.a.createElement(Label,null,label))}));function _templateObject30(){var data=styled_taggedTemplateLiteral(["\n  width: 14px;\n  height: 14px;\n  fill: currentColor;\n  transition: transform 0.25s ease-in-out;\n  ","\n"]);return _templateObject30=function _templateObject30(){return data},data}function _templateObject29(){var data=styled_taggedTemplateLiteral(["\n  height: 30px;\n  border-style: none;\n  display: inline-block;\n  ","\n"]);return _templateObject29=function _templateObject29(){return data},data}function _templateObject28(){var data=styled_taggedTemplateLiteral(["\n  color: #515151;\n  font-size: 1em;\n  font-weight: 600;\n  margin-left: 2px;\n  margin-bottom: 1px;\n  letter-spacing: .01em;\n"]);return _templateObject28=function _templateObject28(){return data},data}function _templateObject27(){var data=styled_taggedTemplateLiteral(["\n  height: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n"]);return _templateObject27=function _templateObject27(){return data},data}function _templateObject26(){var data=styled_taggedTemplateLiteral(["animation: "," infinite 8s linear;"]);return _templateObject26=function _templateObject26(){return data},data}function _templateObject25(){var data=styled_taggedTemplateLiteral(["\n  from {\n    transform: rotate(0deg);\n  } to {\n    transform: rotate(360deg);\n  }\n"]);return _templateObject25=function _templateObject25(){return data},data}function _templateObject24(){var data=styled_taggedTemplateLiteral(["\n  opacity: 0.75;\n  font-size: 0.75em;\n  margin-top: 0.05em;\n  margin-left: 0.45em;\n"]);return _templateObject24=function _templateObject24(){return data},data}function _templateObject23(){var data=styled_taggedTemplateLiteral(["\n  flex: 1 1 auto;\n  min-height: 32rem;\n  padding: 0.75rem 1.25rem;\n\n  "," {\n    padding: 0.75rem 0;\n  }\n"]);return _templateObject23=function _templateObject23(){return data},data}function _templateObject22(){var data=styled_taggedTemplateLiteral(["\n  display: flex;\n  font-size: 1.15rem;\n  flex-flow: row wrap;\n  background-color: #fff;\n  padding: 0.75rem 1.25rem;\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n\n  "," {\n    text-align: center;\n    padding: 0 0 1rem 0;\n  }\n\n  ","\n"]);return _templateObject22=function _templateObject22(){return data},data}function _templateObject21(){var data=styled_taggedTemplateLiteral(["\n  min-width: 0;\n  display: flex;\n  margin: 1.25rem 0;\n  position: relative;\n  word-wrap: break-word;\n  border-radius: 0.25rem;\n  background-color: #fff;\n  flex-direction: column;\n  background-clip: border-box;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.1);\n\n  "," {\n    border: none;\n    border-radius: 0;\n    box-shadow: none;\n    margin: 0;\n  }\n"]);return _templateObject21=function _templateObject21(){return data},data}function _templateObject20(){var data=styled_taggedTemplateLiteral(["\n  font-size: 1rem;\n\n  > label {\n    margin-top: 0.5rem;\n    margin-bottom: 0.5rem;\n\n    :not(:last-of-type) {\n      margin-right: 1.35rem;\n    }\n  }\n\n  "," {\n    text-align: left;\n\n    > label {\n      margin-left: auto;\n      margin-top: 0.5rem;\n      margin-bottom: 0.5rem;\n\n      :not(:last-of-type) {\n        margin-right: 1.25rem;\n      }\n    }\n  }\n"]);return _templateObject20=function _templateObject20(){return data},data}function _templateObject19(){var data=styled_taggedTemplateLiteral(["\n  margin: 0.5rem auto 0.5rem 0;\n\n  "," {\n    text-align: left;\n    margin: 0 auto 0.4rem 0;\n  }\n"]);return _templateObject19=function _templateObject19(){return data},data}function _templateObject18(){var data=styled_taggedTemplateLiteral(["\n  margin-bottom: 0.4rem;\n\n  "," {\n    text-align: left;\n    margin: 0 auto 0.4rem 0;\n  }\n"]);return _templateObject18=function _templateObject18(){return data},data}function _templateObject17(){var data=styled_taggedTemplateLiteral(["\n  user-select: none;\n  display: inline-block;\n  vertical-align: middle;\n  color: rgba(0, 0, 0, 0.54);\n  margin: 0.4rem 1.15rem 0rem 0.4rem;\n\n  "," {\n    margin: 0 auto .25rem auto;\n  }\n"]);return _templateObject17=function _templateObject17(){return data},data}function _templateObject16(){var data=styled_taggedTemplateLiteral(["\n  border: 0;\n  color: #212428;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  overflow: visible;\n  user-select: none;\n  text-align: center;\n  border-radius: 3px;\n  display: inline-block;\n  vertical-align: middle;\n  padding: 0.375rem 0.75rem;\n  -webkit-appearance: button;\n  background-color: rgba(9, 30, 66, 0.075);\n  transition: color 0.2s ease-out, background-color 0.2s ease-out;\n\n  :focus {\n    outline: 0;\n  }\n\n  :hover {\n    background-color: rgba(9, 30, 66, 0.115);\n  }\n\n  "," {\n    display: block;\n    width: 100%;\n  }\n\n  "," {\n    font-size: 0.9em;\n  }\n"]);return _templateObject16=function _templateObject16(){return data},data}function _templateObject15(){var data=styled_taggedTemplateLiteral(["\n  > button {\n    min-width: 4.5rem;\n    margin-top: 0.5rem;\n\n    :not(:last-of-type) {\n      margin-right: 0.5rem;\n    }\n  }\n"]);return _templateObject15=function _templateObject15(){return data},data}function _templateObject14(){var data=styled_taggedTemplateLiteral(["\n  font-weight: 600;\n  line-height: 1.167;\n  font-size: 1.65rem;\n  margin-top: 1.25rem;\n  margin-bottom: 0.5rem;\n  letter-spacing: 0.00735em;\n"]);return _templateObject14=function _templateObject14(){return data},data}function _templateObject13(){var data=styled_taggedTemplateLiteral(["\n  font-size: 2rem;\n  font-weight: 600;\n  line-height: 1.167;\n  margin-top: 0.5rem;\n  margin-bottom: .5rem;\n"]);return _templateObject13=function _templateObject13(){return data},data}function _templateObject12(){var data=styled_taggedTemplateLiteral(["\n  color: black;\n  font-weight: 600;\n  line-height: 1.6;\n  font-size: 1.025em;\n  letter-spacing: 0.01em;\n  word-break: break-word;\n  padding: 3px 0 3px 6.4px;\n\n  "," {\n    padding: .1em .25em .1em;\n  }\n"]);return _templateObject12=function _templateObject12(){return data},data}function _templateObject11(){var data=styled_taggedTemplateLiteral(["\n  display: list-item;\n  text-align: match-parent;\n"]);return _templateObject11=function _templateObject11(){return data},data}function _templateObject10(){var data=styled_taggedTemplateLiteral(["\n  display: block;\n  padding-left: 1.75rem;\n  margin-block-end: 1em;\n  list-style-type: disc;\n  margin-inline-end: 0px;\n  margin-block-start: 1em;\n  margin-inline-start: 0px;\n  padding-inline-start: 30px;\n\n  li + li {\n    margin-top: 0.55em;\n  }\n\n  "," {\n    padding-inline-start: 20px;\n  }\n"]);return _templateObject10=function _templateObject10(){return data},data}function _templateObject9(){var data=styled_taggedTemplateLiteral(["\n  ","\n\n  "," {\n    max-width: 85%;\n  }\n\n  &.is-class-list {\n    font-weight: 600;\n    max-width: 100% !important;\n\n    ul {\n      li + li {\n        margin-top: 0.5em !important;\n      }\n    }\n  }\n"]);return _templateObject9=function _templateObject9(){return data},data}function _templateObject8(){var data=styled_taggedTemplateLiteral(["\n  flex-grow: 1;\n  flex-basis: 0;\n  flex-shrink: 1;\n  display: block;\n  padding: 0.25rem;\n\n  "," {\n    padding: 0.25rem 0;\n    width: 100% !important;\n  }\n\n  ","\n"]);return _templateObject8=function _templateObject8(){return data},data}function _templateObject7(){var data=styled_taggedTemplateLiteral(["\n  width: 100%;\n\n  "," {\n    display: flex;\n  }\n"]);return _templateObject7=function _templateObject7(){return data},data}function _templateObject6(){var data=styled_taggedTemplateLiteral(["\n  border: 0;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  padding-bottom: .225rem;\n  border-top: 1px solid #ddd;\n"]);return _templateObject6=function _templateObject6(){return data},data}function _templateObject5(){var data=styled_taggedTemplateLiteral(["\n  width: 60%;\n  margin-top: 1rem;\n\n  "," {\n    width: 75%;\n  }\n\n  "," {\n    width: 100%;\n  }\n"]);return _templateObject5=function _templateObject5(){return data},data}function styled_templateObject4(){var data=styled_taggedTemplateLiteral(["\n  width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0.25rem 1.75rem;\n\n  "," {\n    font-size: 0.96em;\n    padding: 0.25rem 1.25rem;\n  }\n"]);return styled_templateObject4=function _templateObject4(){return data},data}function styled_templateObject3(){var data=styled_taggedTemplateLiteral(["\n  ","\n  "," {\n    max-width: 85%;\n  }\n"]);return styled_templateObject3=function _templateObject3(){return data},data}function styled_templateObject2(){var data=styled_taggedTemplateLiteral(["\n  ","\n"]);return styled_templateObject2=function _templateObject2(){return data},data}function styled_templateObject(){var data=styled_taggedTemplateLiteral(["\n  margin-top: 0;\n  display: block;\n  margin-bottom: 1rem;\n  margin-block-end: 1em;\n  margin-inline-end: 0px;\n  margin-block-start: 1em;\n  margin-inline-start: 0px;\n"]);return styled_templateObject=function _templateObject(){return data},data}function styled_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var MEDIA_QUERY_IS_MOBILE="@media only screen and (max-width: 768px)",MEDIA_QUERY_IS_MOBILE_XS="@media only screen and (max-width: 525px)",PARAGRAPH_CSS=Object(styled_components_browser_esm.c)(styled_templateObject()),Content=styled_components_browser_esm.d.p(styled_templateObject2(),PARAGRAPH_CSS),Paragraph=styled_components_browser_esm.d.p(styled_templateObject3(),PARAGRAPH_CSS,"@media only screen and (min-width: 992px)"),Container=styled_components_browser_esm.d.div(styled_templateObject4(),MEDIA_QUERY_IS_MOBILE),SelectContainer=styled_components_browser_esm.d.div(_templateObject5(),"@media only screen and (max-width: 991px) and (min-width: 769px)",MEDIA_QUERY_IS_MOBILE),Hr=styled_components_browser_esm.d.hr(_templateObject6()),Columns=styled_components_browser_esm.d.div(_templateObject7(),"@media only screen and (min-width: 992px)"),Column=styled_components_browser_esm.d.div(_templateObject8(),MEDIA_QUERY_IS_MOBILE,(function(_ref){var widthPercent=_ref.widthPercent;return widthPercent&&"\n      flex: none;\n      width: ".concat(widthPercent,"%;\n    ")})),ListWrapper=styled_components_browser_esm.d.div(_templateObject9(),PARAGRAPH_CSS,"@media only screen and (min-width: 992px)"),List=styled_components_browser_esm.d.ul(_templateObject10(),MEDIA_QUERY_IS_MOBILE),ListItem=styled_components_browser_esm.d.li(_templateObject11()),TextHeader=styled_components_browser_esm.d.span(_templateObject12(),MEDIA_QUERY_IS_MOBILE_XS),Title=styled_components_browser_esm.d.h2(_templateObject13()),SubTitle=styled_components_browser_esm.d.h4(_templateObject14()),ButtonGroup=styled_components_browser_esm.d.div(_templateObject15()),Button=styled_components_browser_esm.d.button(_templateObject16(),MEDIA_QUERY_IS_MOBILE,MEDIA_QUERY_IS_MOBILE_XS),styled_Label=styled_components_browser_esm.d.label(_templateObject17(),MEDIA_QUERY_IS_MOBILE),LabelHeader=Object(styled_components_browser_esm.d)(styled_Label)(_templateObject18(),MEDIA_QUERY_IS_MOBILE),LabelNote=Object(styled_components_browser_esm.d)(styled_Label)(_templateObject19(),MEDIA_QUERY_IS_MOBILE),CheckboxGroup=styled_components_browser_esm.d.div(_templateObject20(),MEDIA_QUERY_IS_MOBILE),Card=styled_components_browser_esm.d.div(_templateObject21(),MEDIA_QUERY_IS_MOBILE),CardHeader=styled_components_browser_esm.d.div(_templateObject22(),MEDIA_QUERY_IS_MOBILE,(function(_ref2){return _ref2.supportMobile&&"\n      > * {\n        ".concat(MEDIA_QUERY_IS_MOBILE," {\n          width: 100%;\n          display: block;\n          margin: 0 3.25rem 0.5rem;\n        }\n\n        ").concat(MEDIA_QUERY_IS_MOBILE_XS," {\n          margin: 0 1.25rem 0.5rem;\n        }\n      }\n    ")})),CardBody=styled_components_browser_esm.d.div(_templateObject23(),MEDIA_QUERY_IS_MOBILE),OtherSpan=styled_components_browser_esm.d.span(_templateObject24()),SPIN_LOGO=Object(styled_components_browser_esm.e)(_templateObject25()),SPIN_ANIMATION_CSS=Object(styled_components_browser_esm.c)(_templateObject26(),SPIN_LOGO),OptionContainer=styled_components_browser_esm.d.div(_templateObject27()),OptionName=styled_components_browser_esm.d.span(_templateObject28()),OptionImg=styled_components_browser_esm.d.img(_templateObject29(),(function(_ref3){return!_ref3.isDisabled&&SPIN_ANIMATION_CSS})),ChevronDownSvg=styled_components_browser_esm.d.svg(_templateObject30(),(function(_ref4){return _ref4.menuOpen&&"transform: rotate(180deg);"})),prism_light=__webpack_require__(1028),markup=__webpack_require__(404),javascript=__webpack_require__(405),dark=__webpack_require__(1027);function CodeMarkup_templateObject3(){var data=CodeMarkup_taggedTemplateLiteral(["\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  border-radius: 8px;\n  min-height: 385px !important;\n  max-height: 385px !important;\n\n  pre {\n    font-size: 14px;\n    margin: 0 !important;\n    border: none !important;\n    box-shadow: none !important;\n    text-shadow: none !important;\n    padding: 1em 1.25em !important;\n    background-color: #282c34 !important;\n\n    > code {\n      background: none !important;\n      text-shadow: none !important;\n      font-family: source-code-pro, Menlo, Monaco, Consolas, Courier New, monospace !important;\n\n      > code {\n        color: rgba(255,255,255,0.975) !important;\n      }\n\n      &:first-of-type {\n        color: #94A7A7 !important;\n        padding-right: 20px !important;\n      }\n\n      &:last-of-type {\n        display: inherit;\n        color: "," !important;\n\n        .tag, .string, .number, .operator {\n          color: #fc929e;\n        }\n\n        .attr-value {\n          color: #8dc891;\n        }\n\n        .punctuation {\n          color: #88c6be;\n        }\n\n        .attr-name {\n          color: #79b6f2;\n        }\n      }\n    }\n\n    "," {\n      font-size: 12px;\n      > code:first-of-type {\n        padding-right: 10px !important;\n      }\n    }\n  }\n"]);return CodeMarkup_templateObject3=function _templateObject3(){return data},data}function CodeMarkup_templateObject2(){var data=CodeMarkup_taggedTemplateLiteral(["\n  line-height: 3;\n  color: #9E9E9E;\n  padding: 0 .9rem;\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  text-transform: uppercase;\n  background-color: #20232a;\n"]);return CodeMarkup_templateObject2=function _templateObject2(){return data},data}function CodeMarkup_templateObject(){var data=CodeMarkup_taggedTemplateLiteral(["\n  font-size: 1rem;\n  overflow: hidden;\n  border-radius: 8px;\n  margin: 1rem 1.5rem;\n  background-color: #282c34;\n\n  "," {\n    margin: 1rem 0;\n  }\n"]);return CodeMarkup_templateObject=function _templateObject(){return data},data}function CodeMarkup_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}prism_light.a.registerLanguage("markup",markup.a),prism_light.a.registerLanguage("javascript",javascript.a);var CodeMarkupContainer=styled_components_browser_esm.d.div(CodeMarkup_templateObject(),MEDIA_QUERY_IS_MOBILE),Header=styled_components_browser_esm.d.div(CodeMarkup_templateObject2()),PreContainer=styled_components_browser_esm.d.div(CodeMarkup_templateObject3(),(function(_ref){return _ref.$color}),MEDIA_QUERY_IS_MOBILE_XS),components_CodeMarkup=react_default.a.memo((function(_ref2){var data=_ref2.data,header=_ref2.header,language=_ref2.language,formatFn=_ref2.formatFn,_ref2$textColor=_ref2.textColor,textColor=void 0===_ref2$textColor?"rgba(255,255,255,0.975)":_ref2$textColor;return react_default.a.createElement(CodeMarkupContainer,null,react_default.a.createElement(Header,null,header),react_default.a.createElement(PreContainer,{$color:textColor},react_default.a.createElement(prism_light.a,{wrapLines:!0,style:dark.a,showLineNumbers:!0,language:language,useInlineStyles:!1},formatFn?formatFn(data):data)))}));function PackageLink_templateObject(){var data=function PackageLink_taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(["\n  color: #149DF3;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: none;\n  font-weight: 600;\n  line-height: 1.2;\n  overflow: visible;\n  user-select: none;\n  padding: 0 .05rem;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  background-color: transparent;\n  transition: box-shadow 0.2s ease-out;\n\n  :hover {\n    box-shadow: 0 1px 0 0 currentColor;\n  }\n"]);return PackageLink_templateObject=function _templateObject(){return data},data}var Link=styled_components_browser_esm.d.a(PackageLink_templateObject()),PackageLink=react_default.a.memo((function(_ref){var name=_ref.name,href=_ref.href;return react_default.a.createElement(Link,{href:href,target:"_blank","aria-label":name,rel:"noopener noreferrer"},name)})),components_PackageLink=PackageLink;try{PackageLink.displayName="PackageLink",PackageLink.__docgenInfo={description:"",displayName:"PackageLink",props:{name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},href:{defaultValue:null,description:"",name:"href",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["__stories__/helpers/components/PackageLink.tsx#PackageLink"]={docgenInfo:PackageLink.__docgenInfo,name:"PackageLink",path:"__stories__/helpers/components/PackageLink.tsx#PackageLink"})}catch(__react_docgen_typescript_loader_error){}try{PackageLink.displayName="PackageLink",PackageLink.__docgenInfo={description:"",displayName:"PackageLink",props:{name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},href:{defaultValue:null,description:"",name:"href",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["__stories__/helpers/components/PackageLink.tsx#PackageLink"]={docgenInfo:PackageLink.__docgenInfo,name:"PackageLink",path:"__stories__/helpers/components/PackageLink.tsx#PackageLink"})}catch(__react_docgen_typescript_loader_error){}function OptionsCountButton_templateObject(){var data=function OptionsCountButton_taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(["\n  width: 6.25rem;\n  transition: color 0.115s ease, background-color 0.115s ease;\n\n  ","\n\n  :focus {\n    color: #fff !important;\n    background-color: #149DF3 !important;\n  }\n"]);return OptionsCountButton_templateObject=function _templateObject(){return data},data}var StyledButton=Object(styled_components_browser_esm.d)(Button)(OptionsCountButton_templateObject(),(function(_ref){return _ref.isActive&&"\n      color: #fff;\n      background-color: #149DF3;\n      :hover {\n        background-color: #0A93E9;\n      }\n    "})),OptionsCountButton_OptionsCountButton=function OptionsCountButton(_ref2){var count=_ref2.count,optionsCount=_ref2.optionsCount,setOptionsCount=_ref2.setOptionsCount,isActive=count===optionsCount,onClick=isActive?void 0:function(){return setOptionsCount(count)};return react_default.a.createElement(StyledButton,{onClick:onClick,isActive:isActive},function numberWithCommas(value){return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}(count))},components_OptionsCountButton=OptionsCountButton_OptionsCountButton;try{OptionsCountButton_OptionsCountButton.displayName="OptionsCountButton",OptionsCountButton_OptionsCountButton.__docgenInfo={description:"",displayName:"OptionsCountButton",props:{count:{defaultValue:null,description:"",name:"count",required:!0,type:{name:"number"}},optionsCount:{defaultValue:null,description:"",name:"optionsCount",required:!0,type:{name:"number"}},setOptionsCount:{defaultValue:null,description:"",name:"setOptionsCount",required:!0,type:{name:"(count: number) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["__stories__/helpers/components/OptionsCountButton.tsx#OptionsCountButton"]={docgenInfo:OptionsCountButton_OptionsCountButton.__docgenInfo,name:"OptionsCountButton",path:"__stories__/helpers/components/OptionsCountButton.tsx#OptionsCountButton"})}catch(__react_docgen_typescript_loader_error){}try{OptionsCountButton_OptionsCountButton.displayName="OptionsCountButton",OptionsCountButton_OptionsCountButton.__docgenInfo={description:"",displayName:"OptionsCountButton",props:{count:{defaultValue:null,description:"",name:"count",required:!0,type:{name:"number"}},optionsCount:{defaultValue:null,description:"",name:"optionsCount",required:!0,type:{name:"number"}},setOptionsCount:{defaultValue:null,description:"",name:"setOptionsCount",required:!0,type:{name:"(count: number) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["__stories__/helpers/components/OptionsCountButton.tsx#OptionsCountButton"]={docgenInfo:OptionsCountButton_OptionsCountButton.__docgenInfo,name:"OptionsCountButton",path:"__stories__/helpers/components/OptionsCountButton.tsx#OptionsCountButton"})}catch(__react_docgen_typescript_loader_error){}var _Object$freeze,theme=__webpack_require__(116),utils=__webpack_require__(7);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var FADE_IN_KEYFRAMES="FADE_IN_KEYFRAMES 0.225s ease-in-out forwards",KEYFRAMES_SOURCE_OBJ={loader:{animation:"BOUNCE_KEYFRAMES 1.19s ease-in-out infinite"},menu:{animation:FADE_IN_KEYFRAMES},multiValue:{animation:FADE_IN_KEYFRAMES},icon:{clear:{animation:FADE_IN_KEYFRAMES}}},ThemeEnum=Object.freeze({DEFAULT:"Default",LARGE_TEXT:"Large text",DARK_COLORS:"Dark colors",ZERO_BORDER_RADIUS:"No border-radius"}),ThemeConfigMap=Object.freeze((_defineProperty(_Object$freeze={},ThemeEnum.DEFAULT,void 0),_defineProperty(_Object$freeze,ThemeEnum.DARK_COLORS,{color:{border:"#A8AEB4",primary:"#555555"},select:{css:"color: #000;"},control:{boxShadowColor:"rgba(85, 85, 85, 0.25)",focusedBorderColor:"rgba(85, 85, 85, 0.75)"},icon:{color:"#A6A6A6"},menu:{option:{selectedColor:"#fff",selectedBgColor:"#555555",focusedBgColor:"rgba(85, 85, 85, 0.225)"}}}),_defineProperty(_Object$freeze,ThemeEnum.LARGE_TEXT,{select:{css:"font-size: 1.25rem;"}}),_defineProperty(_Object$freeze,ThemeEnum.ZERO_BORDER_RADIUS,{control:{borderRadius:"0"},menu:{borderRadius:"0"}}),_Object$freeze)),SELECT_CONTAINER_STYLE={marginTop:"1rem"},OPTIONS=function createThemeOptions(ThemeEnum){return Object.keys(ThemeEnum).map((function(key){return{value:ThemeEnum[key],label:ThemeEnum[key]}}))}(ThemeEnum),THEME_DEFAULTS=Object(utils.f)(theme.a,KEYFRAMES_SOURCE_OBJ),THEME_CONFIG={menu:{option:{selectedColor:"#515151",focusedBgColor:"#F5F5F5",selectedBgColor:"#F5F5F5"}}},dom=__webpack_require__(2),CLASS_NAME_HTML='<div class="'.concat(dom.r,'">\n  <div class="').concat(dom.i,'">\n    <div>\n      <div>Select option...</div>\n      <input\n        value=""\n        type="text"\n        class="').concat(dom.b,'"\n      />\n    </div>\n    <div>\n      <div>\n        <svg\n          aria-hidden="true"\n          viewBox="0 0 14 16"\n          class="').concat(dom.f,'"\n        >\n          <path\n            fillRule="evenodd"\n            d="M7.71 8.23l3.75 3.75-1.48..."\n          />\n        </svg>\n      </div>\n      <div />\n      <div>\n        <div\n          aria-hidden="true"\n          class="').concat(dom.d,'"\n        />\n      </div>\n    </div>\n  </div>\n  <div class="').concat(dom.l,'">\n    <div>\n      <div>\n        <div class="').concat(dom.n,'">\n          Option 1\n        </div>\n        <div class="').concat(dom.n," ").concat(dom.p,'">\n          Option 2\n        </div>\n        <div class="').concat(dom.n," ").concat(dom.q,'">\n          Option 3\n        </div>\n        <div class="').concat(dom.n," ").concat(dom.o,'">\n          Option 4\n        </div>\n      </div>\n    </div>\n  </div>\n</div>'),STYLED_COMPONENTS_PACKAGE={name:"styled-components",href:"https://www.styled-components.com"},REACT_WINDOW_PACKAGE={name:"react-window",href:"https://github.com/bvaughn/react-window"},PACKAGE_OPTIONS=[{id:1,name:"react"},{id:2,name:"react-dom"},{id:3,name:"reactstrap"},{id:4,name:"react-scripts"},{id:5,name:"react-window"}],CITY_OPTIONS=[{id:1,city:"Boston",state:"MA"},{id:2,city:"Austin",state:"TX"},{id:3,city:"Denver",state:"CO"},{id:4,city:"Chicago",state:"IL"},{id:5,city:"Phoenix",state:"AZ"},{id:6,city:"Houston",state:"TX"},{id:7,city:"Orlando",state:"FL"},{id:8,city:"Portland",state:"OR"},{id:9,city:"Milwaukee",state:"WI"},{id:10,city:"Louisville",state:"KY"}];function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return index_stories_arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||index_stories_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function index_stories_slicedToArray(arr,i){return function index_stories_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function index_stories_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||index_stories_unsupportedIterableToArray(arr,i)||function index_stories_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function index_stories_unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return index_stories_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?index_stories_arrayLikeToArray(o,minLen):void 0}}function index_stories_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var REACT_LOGO_SVG=__webpack_require__(1019),index_stories_SingleSelect=(__webpack_exports__.default={parameters:function index_stories_defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}({storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React, { useMemo, useRef, useState, useEffect, useCallback, Fragment, FocusEvent, KeyboardEvent, ReactNode } from \'react\';\\r\\nimport { CityOption, Option, PackageOption } from \'./helpers/types\';\\r\\nimport { useCallbackState, useClearToastsOnUnmount } from \'./helpers/hooks\';\\r\\nimport { Select, MultiParams, Theme, MenuOption, SelectRef, FilterMatchEnum } from \'../src\';\\r\\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from \'./helpers/components\';\\r\\nimport { mockHttpRequest, getRandomInt, createAsyncOptions, createSelectOptions, stringifyJavaScriptObj, renderInfoToast } from \'./helpers/utils\';\\r\\nimport { CITY_OPTIONS, PACKAGE_OPTIONS, REACT_WINDOW_PACKAGE, CLASS_NAME_HTML, STYLED_COMPONENTS_PACKAGE, ThemeEnum, ThemeConfigMap, THEME_DEFAULTS, OPTIONS, SELECT_CONTAINER_STYLE, THEME_CONFIG } from \'./helpers/constants\';\\r\\nimport { OPTION_CLS, OPTION_FOCUSED_CLS, OPTION_DISABLED_CLS, OPTION_SELECTED_CLS, CARET_ICON_CLS, CLEAR_ICON_CLS, LOADING_DOTS_CLS, AUTOSIZE_INPUT_CLS, MENU_CONTAINER_CLS, SELECT_CONTAINER_CLS, CONTROL_CONTAINER_CLS } from \'../src/constants/dom\';\\r\\nimport {\\r\\n  Button,\\r\\n  ButtonGroup,\\r\\n  Hr,\\r\\n  Title,\\r\\n  SubTitle,\\r\\n  Label,\\r\\n  LabelHeader,\\r\\n  LabelNote,\\r\\n  Columns,\\r\\n  Column,\\r\\n  Content,\\r\\n  Container,\\r\\n  List,\\r\\n  ListItem,\\r\\n  ListWrapper,\\r\\n  SelectContainer,\\r\\n  Paragraph,\\r\\n  TextHeader,\\r\\n  CheckboxGroup,\\r\\n  Card,\\r\\n  CardHeader,\\r\\n  CardBody,\\r\\n  OtherSpan,\\r\\n  OptionContainer,\\r\\n  OptionName,\\r\\n  OptionImg,\\r\\n  ChevronDownSvg\\r\\n} from \'./helpers/styled\';\\r\\n\\r\\nconst REACT_LOGO_SVG = require(\'./assets/react-logo.svg\') as string;\\r\\nconst CHEVRON_SVG_PATH = \'M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z\';\\r\\n\\r\\nexport default {\\r\\n  title: \'React Functional Select\'\\r\\n};\\r\\n\\r\\nexport const SingleSelect = () => {\\r\\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\\r\\n  const [isLoading, setIsLoading] = useCallbackState(false);\\r\\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\\r\\n  const [isClearable, setIsClearable] = useCallbackState(true);\\r\\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    isDisabled && setIsInvalid(false);\\r\\n  }, [isDisabled]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Single-select</Title>\\r\\n      <Hr />\\r\\n      <Paragraph>\\r\\n        In this story\'s source code, notice that the callback function\\r\\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\\r\\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\\r\\n        memoization of any callback function property whenever possible. This will boost\\r\\n        performance and reduce the amount of renders as these properties are referenced\\r\\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\\r\\n        and <code>useMemos</code>. When defined in a functional component, wrap in\\r\\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\\r\\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\\r\\n        you can opt to hoist functions outside of the component entirely.\\r\\n      </Paragraph>\\r\\n      <Paragraph>\\r\\n        The <code>options</code> property should also be memoized. Either consume\\r\\n        it directly from a state management store, or make sure it is stable by\\r\\n        avoiding inline or render-based mutations.\\r\\n      </Paragraph>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\'Searchable\'\\r\\n              checked={isSearchable}\\r\\n              onCheck={setIsSearchable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Clearable\'\\r\\n              checked={isClearable}\\r\\n              onCheck={setIsClearable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Disabled\'\\r\\n              checked={isDisabled}\\r\\n              onCheck={setIsDisabled}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Invalid\'\\r\\n              checked={isInvalid}\\r\\n              readOnly={isDisabled}\\r\\n              onCheck={setIsInvalid}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Loading\'\\r\\n              checked={isLoading}\\r\\n              onCheck={setIsLoading}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isLoading={isLoading}\\r\\n              isInvalid={isInvalid}\\r\\n              options={CITY_OPTIONS}\\r\\n              isDisabled={isDisabled}\\r\\n              isClearable={isClearable}\\r\\n              isSearchable={isSearchable}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const MultiSelect = () => {\\r\\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\\r\\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\\r\\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\\r\\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\\r\\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  // Example \\"renderMultiOptions\\" property that can be used to further customize labeling for multi-option scenarios\\r\\n  const renderMultiOptions = useCallback(\\r\\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\\r\\n      <Fragment>\\r\\n        {selected.length && renderOptionLabel(selected[0].data)}\\r\\n        {selected.length > 1 && (\\r\\n          <OtherSpan>\\r\\n            {`(+${selected.length - 1} ${selected.length === 2 ? \'other\' : \'others\'})`}\\r\\n          </OtherSpan>\\r\\n        )}\\r\\n      </Fragment>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Multi-select</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>isMulti</code> property to allow for multiple selections.\\r\\n        While in multi-select mode, some properties are now applicable and\\r\\n        others become more pertinent.\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\\r\\n            selected option from the menu. Default value is false, however, if\\r\\n            undefined and <code>isMulti === true</code>, then its value defaults\\r\\n            to true.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\\r\\n            menu of options when the user selects an option. Default value is\\r\\n            false, however, it may be benefical to set this property to true for\\r\\n            convenience in multi-select scenarios.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\\r\\n            Optional callback function that can be used to further customize\\r\\n            the selection label in multi-select scenarios . <code>params</code>{\' \'}\\r\\n            is an object that contains the <code>selected</code> and{\' \'}\\r\\n            <code>renderOptionLabel</code> properties (array of selected options\\r\\n            and function used to render individual option labels, respectively).\\r\\n            When this function is defined, left and right arrow navigation of\\r\\n            individual options is disabled. When using this property, it may be\\r\\n            be a good idea to set the property <code>backspaceClearsValue</code>{\' \'}\\r\\n            to <em>false</em> in order to avoid accidentally clearing all\\r\\n            selections when searching.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\'closeMenuOnSelect\'\\r\\n              checked={closeMenuOnSelect}\\r\\n              onCheck={setCloseMenuOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'hideSelectedOptions\'\\r\\n              checked={hideSelectedOptions}\\r\\n              onCheck={setHideSelectedOptions}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'blurInputOnSelect\'\\r\\n              checked={blurInputOnSelect}\\r\\n              onCheck={setBlurInputOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'openMenuOnClick (click caret if false)\'\\r\\n              checked={openMenuOnClick}\\r\\n              onCheck={setOpenMenuOnClick}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'renderMultiOptions (custom renderer)\'\\r\\n              checked={useRenderMultiOptions}\\r\\n              onCheck={setUseRenderMultiOptions}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isMulti\\r\\n              isClearable\\r\\n              isSearchable\\r\\n              options={CITY_OPTIONS}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              openMenuOnClick={openMenuOnClick}\\r\\n              blurInputOnSelect={blurInputOnSelect}\\r\\n              closeMenuOnSelect={closeMenuOnSelect}\\r\\n              hideSelectedOptions={hideSelectedOptions}\\r\\n              backspaceClearsValue={!useRenderMultiOptions}\\r\\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Styling = () => {\\r\\n  const [themeConfig, setThemeConfig] = useState<Theme | undefined>(undefined);\\r\\n  const [selectedOption, setSelectedOption] = useCallbackState<Option | null>(null);\\r\\n  const menuItemSize = (selectedOption && selectedOption.value === ThemeEnum.LARGE_TEXT) ? 44 : 35;\\r\\n\\r\\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\\r\\n    <CodeMarkup\\r\\n      language=\'markup\'\\r\\n      header=\'Class Markup\'\\r\\n      data={CLASS_NAME_HTML}\\r\\n    />\\r\\n  ), []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (selectedOption) {\\r\\n      const { value } = selectedOption;\\r\\n      setThemeConfig(ThemeConfigMap[value]);\\r\\n    }\\r\\n  }, [selectedOption]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Styling</Title>\\r\\n      <Hr />\\r\\n      <SubTitle>Theming</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            react-functional-select uses{\' \'}\\r\\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to handle its\\r\\n            styling. The root node is wrapped in styled-component\'s{\' \'}\\r\\n            <code>ThemeProvider</code> wrapper component which gives all child\\r\\n            styled-components access to the provided theme via React\'s context\\r\\n            API. To override react-functional-select\'s default theme, pass an\\r\\n            object to the <code>themeConfig</code> property - any matching\\r\\n            properties will replace those in the default theme.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\\r\\n            the <code>themeConfig</code> object contain a <code>css</code>{\' \'}\\r\\n            property of type{\' \'}\\r\\n            <code>string | FlattenSimpleInterpolation | undefined</code>{\' \'}\\r\\n            (default value is undefined). This property can be used to pass raw\\r\\n            CSS styles as a string or wrapped in{\' \'}\\r\\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported{\' \'}\\r\\n            <code>css</code> function. Those objects are: select, control, icon,\\r\\n            menu, noOptions, multiValue, and input.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.7.0</strong>, the control object in{\' \'}\\r\\n            <code>themeConfig</code> has the property <code>focusedCss</code> -\\r\\n            which is similar to the <code>css</code> property, except that it is\\r\\n            only applied when the select control is focused (and removed when\\r\\n            blurred).\\r\\n          </Content>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>\\r\\n          <CodeMarkup\\r\\n            textColor=\\"#79b6f2\\"\\r\\n            language=\\"javascript\\"\\r\\n            data={THEME_DEFAULTS}\\r\\n            header=\\"Theme Defaults\\"\\r\\n            formatFn={stringifyJavaScriptObj}\\r\\n          />\\r\\n        </Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Using Classes</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            If you want to style the component using CSS classes, set the{\' \'}\\r\\n            <code>addClassNames</code> prop to true and it will then generate{\' \'}\\r\\n            <code>className</code> attributes for that specific instance of the\\r\\n            component. These are the classes that are available:\\r\\n          </Content>\\r\\n          <ListWrapper className=\\"is-class-list\\">\\r\\n            <List>\\r\\n              <ListItem>{SELECT_CONTAINER_CLS}</ListItem>\\r\\n              <ListItem>{CONTROL_CONTAINER_CLS}</ListItem>\\r\\n              <ListItem>{MENU_CONTAINER_CLS}</ListItem>\\r\\n              <ListItem>{AUTOSIZE_INPUT_CLS}</ListItem>\\r\\n              <ListItem>{CARET_ICON_CLS}</ListItem>\\r\\n              <ListItem>{CLEAR_ICON_CLS}</ListItem>\\r\\n              <ListItem>{LOADING_DOTS_CLS}</ListItem>\\r\\n              <ListItem>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</ListItem>\\r\\n            </List>\\r\\n          </ListWrapper>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelHeader>Try selecting themeConfig objects below</LabelHeader>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <Columns>\\r\\n            <Column widthPercent={40}>\\r\\n              <div style={SELECT_CONTAINER_STYLE}>\\r\\n                <Select\\r\\n                  options={OPTIONS}\\r\\n                  isClearable={false}\\r\\n                  isSearchable={false}\\r\\n                  themeConfig={themeConfig}\\r\\n                  initialValue={OPTIONS[0]}\\r\\n                  menuItemSize={menuItemSize}\\r\\n                  onOptionChange={setSelectedOption}\\r\\n                />\\r\\n              </div>\\r\\n            </Column>\\r\\n            <Column widthPercent={60}>\\r\\n              <CodeMarkup\\r\\n                data={themeConfig}\\r\\n                textColor=\\"#79b6f2\\"\\r\\n                language=\\"javascript\\"\\r\\n                header=\\"theme-config\\"\\r\\n                formatFn={stringifyJavaScriptObj}\\r\\n              />\\r\\n            </Column>\\r\\n          </Columns>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Events = () => {\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\\r\\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\\r\\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\\r\\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\\r\\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\\r\\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\\r\\n\\r\\n  const onOptionChange = useCallback((option: Option | null): void => {\\r\\n    const optionJsonStr = JSON.stringify(option || {}).replace(/\\"/g, \\"\'\\");\\r\\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\\r\\n  }, []);\\r\\n\\r\\n  const onMenuOpen = useCallback((...args: any[]): void => renderInfoToast(\'Menu opened!\'), []);\\r\\n  const onMenuClose = useCallback((...args: any[]): void => renderInfoToast(\'Menu closed!\'), []);\\r\\n  const onInputBlur = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast(\'Control blurred!\'), []);\\r\\n  const onInputFocus = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast(\'Control focused!\'), []);\\r\\n  const onKeyDown = useCallback((e: KeyboardEvent<HTMLDivElement>): void => renderInfoToast(\'keydown event executed!\'), []);\\r\\n\\r\\n  useClearToastsOnUnmount();\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Events</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        There are various callback function properties that are executed following\\r\\n        their associated events:\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\\r\\n            executed after an option is selected or removed\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is opened\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is closed\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            executed after the input control\'s value changes\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is blurred\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is focused\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void</TextHeader> -\\r\\n            executed after the onKeyDown event\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            executed after the input value is persisted to state; this value also evaluates\\r\\n            the <code>inputDelay</code> property for debouncing - this callback is really only\\r\\n            useful when <code>inputDelay</code> is defined, and if not, it probably makes more\\r\\n            sense to use the <code>onInputChange</code> callback\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelNote>Events in demo will trigger a toast notification</LabelNote>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\'onOptionChange\'\\r\\n              checked={addOnOptionChange}\\r\\n              onCheck={setAddOnOptionChange}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuOpen\'\\r\\n              checked={addOnMenuOpen}\\r\\n              onCheck={setAddOnMenuOpen}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuClose\'\\r\\n              checked={addOnMenuClose}\\r\\n              onCheck={setAddOnMenuClose}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputBlur\'\\r\\n              checked={addOnInputBlur}\\r\\n              onCheck={setAddOnInputBlur}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputFocus\'\\r\\n              checked={addOnInputFocus}\\r\\n              onCheck={setAddOnInputFocus}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onKeyDown\'\\r\\n              checked={addOnKeyDown}\\r\\n              onCheck={setAddOnKeyDown}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              options={options}\\r\\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\\r\\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\\r\\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\\r\\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\\r\\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\\r\\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Methods = () => {\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const blurSelect = (): void => {\\r\\n    selectRef.current && selectRef.current.blur();\\r\\n  };\\r\\n\\r\\n  const focusSelect = (): void => {\\r\\n    selectRef.current && selectRef.current.focus();\\r\\n  };\\r\\n\\r\\n  const clearValue = (): void => {\\r\\n    selectRef.current && selectRef.current.clearValue();\\r\\n  };\\r\\n\\r\\n  const toggleMenuOpen = (): void => {\\r\\n    selectRef.current && selectRef.current.toggleMenu(true);\\r\\n  };\\r\\n\\r\\n  const updateSelectedOption = (): void => {\\r\\n    selectRef.current && selectRef.current.setValue(options[0]);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Methods</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Five public methods are exposed to wrapping components and are\\r\\n        accessible via a forwarded <code>ref</code>.\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>blur(): void</TextHeader> - blur the control\\r\\n            programatically\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>focus(): void</TextHeader> - focus the control\\r\\n            programatically\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> - toggle\\r\\n            the menu programatically\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\\r\\n            value programatically <em>(if an option is selected)</em>\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\\r\\n            value programatically <em>(option will be validated)</em>\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader supportMobile>\\r\\n          <ButtonGroup>\\r\\n            <Label>Methods</Label>\\r\\n            <Button onClick={focusSelect}>Focus</Button>\\r\\n            <Button onClick={blurSelect}>Blur</Button>\\r\\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\\r\\n            <Button onClick={clearValue}>Clear Value</Button>\\r\\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\\r\\n          </ButtonGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              ref={selectRef}\\r\\n              options={options}\\r\\n              initialValue={options[0]}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Filtering = () => {\\r\\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\\r\\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\\r\\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\\r\\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\\r\\n\\r\\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: \'São Paulo\', state: \'BR\' }], []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Filter Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        The default filtering functionality can be customized via the following\\r\\n        properties:\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\\r\\n            case when matching strings. Default value is <code>true</code>.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\\r\\n            ignores accents when matching strings. Default value is <code>false</code>.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>filterMatchFrom?: \'any\' | \'start\'</TextHeader> -\\r\\n            Position in source string to perform match. Default value is <code>\'any\'</code>.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\\r\\n            When defined will take each option and generate a string used in\\r\\n            the filtering process. By default, the stringified version of what\\r\\n            is generated by <code>getOptionLabel</code>, if definded, or the\\r\\n            option\'s label as a fallback. The <code>MenuOption</code> typed\\r\\n            parameter that <code>getFilterOptionString</code> accepts contains a{\' \'}\\r\\n            <code>data</code> property that represents the objects that comprise\\r\\n            your <code>options</code> property.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\\"Ignore Case\\"\\r\\n              checked={filterIgnoreCase}\\r\\n              onCheck={setFilterIgnoreCase}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\\"Ignore Accents\\"\\r\\n              checked={filterIgnoreAccents}\\r\\n              onCheck={setFilterIgnoreAccents}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\\"Match from the start\\"\\r\\n              checked={filterMatchFromStart}\\r\\n              onCheck={setFilterMatchFromStart}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\\"Use custom filter function (by state only)\\"\\r\\n              checked={useCustomFilterFunc}\\r\\n              onCheck={setUseCustomFilterFunc}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isClearable\\r\\n              options={options}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              filterIgnoreCase={filterIgnoreCase}\\r\\n              filterIgnoreAccents={filterIgnoreAccents}\\r\\n              getFilterOptionString={\\r\\n                useCustomFilterFunc ? getFilterOptionString : undefined\\r\\n              }\\r\\n              filterMatchFrom={\\r\\n                filterMatchFromStart\\r\\n                  ? FilterMatchEnum.START\\r\\n                  : FilterMatchEnum.ANY\\r\\n              }\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Windowing = () => {\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n\\r\\n  const [options, setOptions] = useState<Option[]>([]);\\r\\n  const [optionsCount, setOptionsCount] = useState<number>(100);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const handler = setTimeout(() => {\\r\\n      const nextOptions = createSelectOptions(optionsCount);\\r\\n      setOptions(nextOptions);\\r\\n    }, 115);\\r\\n\\r\\n    return () => {\\r\\n      clearTimeout(handler);\\r\\n    };\\r\\n  }, [optionsCount]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (selectRef.current) {\\r\\n      selectRef.current.clearValue();\\r\\n    }\\r\\n  }, [options]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Integrated Windowing</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Option data is \'windowed\' using the <PackageLink {...REACT_WINDOW_PACKAGE} /> package.\\r\\n        Aside from the obvious benefits provided by only rendering a small subset of your\\r\\n        enumerable data (rather than bloating the DOM with an excessive amount of nodes),\\r\\n        \'windowing\' can also assist with:\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <strong>Efficient memory allocation</strong>. \'Windowing\' naturally\\r\\n            lends itself to the dynamic generation of attributes/values as each\\r\\n            object comes into your renderer\'s scope (as opposed to allocating\\r\\n            this data upfront for each object in your list). This way you can\\r\\n            perform this work just when you absolutely need to and then can\\r\\n            immediately release it for the GC to cleanup. As an example I am\\r\\n            generating the <code>onClick</code>, <code>id</code>,\\r\\n            and <code>className</code> attributes for each <code>menuOption</code> as\\r\\n            they get passed to the <code>&lt;Option /&gt;</code> renderer component.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <strong>Functional architecture</strong>. The flexibility provided\\r\\n            through only having to manage subsets of your list allows for a more\\r\\n            dynamic application. By breaking your code out into smaller, \'pure\'\\r\\n            child components, you can write code that scales well and becomes\\r\\n            open to performance optimizations - most notably, memoization.\\r\\n            Simple components that rely on the props passed to it (rather than\\r\\n            its own managed state) to generate its JSX are likely candidates for\\r\\n            memoization (testing &amp; debugging becomes much easier as well).\\r\\n          </ListItem>\\r\\n        </List>\\r\\n        <em>Note: </em>The only time any noticeable performance degradation will be observed\\r\\n        is during search input updates when the <code>options</code> count reaches the high\\r\\n        tens of thousands. To work around this, the <code>inputDelay</code> (number in milliseconds)\\r\\n        can be set to debounce the input value. That way, the <code>menuOptions</code> will not be\\r\\n        recalculated on every keystroke.\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader supportMobile>\\r\\n          <ButtonGroup>\\r\\n            <Label>Options Count</Label>\\r\\n            <OptionsCountButton\\r\\n              count={100}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n            <OptionsCountButton\\r\\n              count={1000}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n            <OptionsCountButton\\r\\n              count={5000}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n            <OptionsCountButton\\r\\n              count={25000}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n          </ButtonGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select ref={selectRef} options={options} />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Advanced = () => {\\r\\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\\r\\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => (option.name === PACKAGE_OPTIONS[3].name), []);\\r\\n\\r\\n  const renderOptionLabel = useCallback(\\r\\n    (option: PackageOption): ReactNode => (\\r\\n      <OptionContainer>\\r\\n        <OptionImg src={REACT_LOGO_SVG} isDisabled={getIsOptionDisabled(option)} />\\r\\n        <OptionName>{option.name}</OptionName>\\r\\n      </OptionContainer>\\r\\n    ),\\r\\n    [getIsOptionDisabled]\\r\\n  );\\r\\n\\r\\n  const customCaretIcon = useCallback(\\r\\n    ({ menuOpen }): ReactNode => (\\r\\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden=\'true\' viewBox=\'0 0 448 512\'>\\r\\n        <path d={CHEVRON_SVG_PATH} />\\r\\n      </ChevronDownSvg>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Advanced Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Implementation using a couple of the more specialized properties.\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\\r\\n            function with a return type of <code>ReactNode</code>. Use this property in cases\\r\\n            where the standard <code>getOptionLabel</code> property won\'t meet your needs (for\\r\\n            instance, you want to render each option\'s label using custom JSX). More complex\\r\\n            option labels will likely equate to longer render durations - this can translate\\r\\n            into a flash of empty space when a user first starts scrolling. In order to prevent\\r\\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\\r\\n            rows outside of the visible area. The default value for this property is 1 and it is\\r\\n            important to note that increasing this value can negatively impact performance.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\\r\\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\\r\\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\\r\\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\\r\\n            options - they cannot both be specified.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\\r\\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\\r\\n            When using a function, an object containing stateful data is forwarded and can be used to style\\r\\n            your custom node accordingly. The state is <code>{\'{ menuOpen, isLoading, isInvalid, isDisabled }\'}</code> of\\r\\n            type <code>{\'Record<string, boolean>\'}</code>. The <code>clearIcon</code> property has an identical definition.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelHeader>JSX labels, custom caret icon, and disabled option</LabelHeader>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isSearchable={false}\\r\\n              options={PACKAGE_OPTIONS}\\r\\n              themeConfig={THEME_CONFIG}\\r\\n              caretIcon={customCaretIcon}\\r\\n              getOptionValue={getOptionValue}\\r\\n              renderOptionLabel={renderOptionLabel}\\r\\n              getIsOptionDisabled={getIsOptionDisabled}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Async = () => {\\r\\n  const [isLoading, setIsLoading] = useState<boolean>(false);\\r\\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, \'Initial\'));\\r\\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\\r\\n\\r\\n  const onSearchChange = useCallback((value: string): void => {\\r\\n    mockHttpRequest()\\r\\n      .then(() => {\\r\\n        const count = getRandomInt(1, 5);\\r\\n        const nextOptions = createAsyncOptions(count, `Search text: ${value || \'Initial\'}`);\\r\\n        setOptions(nextOptions);\\r\\n      })\\r\\n      .catch((e) => console.error(e))\\r\\n      .then(() => setIsLoading(false));\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Async Mode</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>async</code> property to enable async mode. There is one key difference\\r\\n        in core functionality with async mode - changes to search input value will not cause\\r\\n        the <code>useMenuOptions</code> effect to run. The rest of hooking into async mode is\\r\\n        achieved using some combination of the properties found below\\r\\n        . <em>Properties onInputChange and onSearchChange should be memoized.</em>\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            callback executed directly following the input control\'s <code>onChange</code> event.\\r\\n            This callback is not debounced, so it fires immediately. This is a good\\r\\n            place to set a stateful loading property in your parent component that is mapped to\\r\\n            react-functional-select\'s <code>isLoading</code> property.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            callback executed following component state updates for\\r\\n            the <code>debouncedInputValue</code>. The debounce is set using\\r\\n            the <code>inputDelay</code> property. This callback is a good place for your\\r\\n            http fetch request and post-request logic (i.e. setting isLoading false).\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\\r\\n            set to a positive integer in order to debounce updates to the search input value\\r\\n            following input change events. This property directly maps to the <code>delay</code> in\\r\\n            milliconds passed to the <code>setTimeout</code> method.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\\r\\n            appear in the far-right of the control and take the place of the clear icon (if shown).\\r\\n            Additionally, it will hide options in the menu and instead, display a loading message.\\r\\n            The loading message text defaults to \'Loading...\', but can be overriden via\\r\\n            the <code>loadingMsg</code> property.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelNote>Search debounced 375ms and mock HTTP call resolves after 500ms</LabelNote>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              async\\r\\n              isClearable\\r\\n              inputDelay={375}\\r\\n              options={options}\\r\\n              isLoading={isLoading}\\r\\n              onInputChange={onInputChange}\\r\\n              onSearchChange={onSearchChange}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"SingleSelect":{"startLoc":{"col":28,"line":46},"endLoc":{"col":1,"line":131},"startBody":{"col":28,"line":46},"endBody":{"col":1,"line":131}},"MultiSelect":{"startLoc":{"col":27,"line":133},"endLoc":{"col":1,"line":247},"startBody":{"col":27,"line":133},"endBody":{"col":1,"line":247}},"Styling":{"startLoc":{"col":23,"line":249},"endLoc":{"col":1,"line":374},"startBody":{"col":23,"line":249},"endBody":{"col":1,"line":374}},"Events":{"startLoc":{"col":22,"line":376},"endLoc":{"col":1,"line":498},"startBody":{"col":22,"line":376},"endBody":{"col":1,"line":498}},"Methods":{"startLoc":{"col":23,"line":500},"endLoc":{"col":1,"line":579},"startBody":{"col":23,"line":500},"endBody":{"col":1,"line":579}},"Filtering":{"startLoc":{"col":25,"line":581},"endLoc":{"col":1,"line":675},"startBody":{"col":25,"line":581},"endBody":{"col":1,"line":675}},"Windowing":{"startLoc":{"col":25,"line":677},"endLoc":{"col":1,"line":774},"startBody":{"col":25,"line":677},"endBody":{"col":1,"line":774}},"Advanced":{"startLoc":{"col":24,"line":776},"endLoc":{"col":1,"line":855},"startBody":{"col":24,"line":776},"endBody":{"col":1,"line":855}},"Async":{"startLoc":{"col":21,"line":857},"endLoc":{"col":1,"line":935},"startBody":{"col":21,"line":857},"endBody":{"col":1,"line":935}}};\n    \nimport React, { useMemo, useRef, useState, useEffect, useCallback, Fragment, FocusEvent, KeyboardEvent, ReactNode } from \'react\';\r\nimport { CityOption, Option, PackageOption } from \'./helpers/types\';\r\nimport { useCallbackState, useClearToastsOnUnmount } from \'./helpers/hooks\';\r\nimport { Select, MultiParams, Theme, MenuOption, SelectRef, FilterMatchEnum } from \'../src\';\r\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from \'./helpers/components\';\r\nimport { mockHttpRequest, getRandomInt, createAsyncOptions, createSelectOptions, stringifyJavaScriptObj, renderInfoToast } from \'./helpers/utils\';\r\nimport { CITY_OPTIONS, PACKAGE_OPTIONS, REACT_WINDOW_PACKAGE, CLASS_NAME_HTML, STYLED_COMPONENTS_PACKAGE, ThemeEnum, ThemeConfigMap, THEME_DEFAULTS, OPTIONS, SELECT_CONTAINER_STYLE, THEME_CONFIG } from \'./helpers/constants\';\r\nimport { OPTION_CLS, OPTION_FOCUSED_CLS, OPTION_DISABLED_CLS, OPTION_SELECTED_CLS, CARET_ICON_CLS, CLEAR_ICON_CLS, LOADING_DOTS_CLS, AUTOSIZE_INPUT_CLS, MENU_CONTAINER_CLS, SELECT_CONTAINER_CLS, CONTROL_CONTAINER_CLS } from \'../src/constants/dom\';\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Hr,\r\n  Title,\r\n  SubTitle,\r\n  Label,\r\n  LabelHeader,\r\n  LabelNote,\r\n  Columns,\r\n  Column,\r\n  Content,\r\n  Container,\r\n  List,\r\n  ListItem,\r\n  ListWrapper,\r\n  SelectContainer,\r\n  Paragraph,\r\n  TextHeader,\r\n  CheckboxGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  OtherSpan,\r\n  OptionContainer,\r\n  OptionName,\r\n  OptionImg,\r\n  ChevronDownSvg\r\n} from \'./helpers/styled\';\r\n\r\nconst REACT_LOGO_SVG = require(\'./assets/react-logo.svg\') as string;\r\nconst CHEVRON_SVG_PATH = \'M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z\';\r\n\r\nexport default {parameters: {"storySource":{"source":"import React, { useMemo, useRef, useState, useEffect, useCallback, Fragment, FocusEvent, KeyboardEvent, ReactNode } from \'react\';\\r\\nimport { CityOption, Option, PackageOption } from \'./helpers/types\';\\r\\nimport { useCallbackState, useClearToastsOnUnmount } from \'./helpers/hooks\';\\r\\nimport { Select, MultiParams, Theme, MenuOption, SelectRef, FilterMatchEnum } from \'../src\';\\r\\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from \'./helpers/components\';\\r\\nimport { mockHttpRequest, getRandomInt, createAsyncOptions, createSelectOptions, stringifyJavaScriptObj, renderInfoToast } from \'./helpers/utils\';\\r\\nimport { CITY_OPTIONS, PACKAGE_OPTIONS, REACT_WINDOW_PACKAGE, CLASS_NAME_HTML, STYLED_COMPONENTS_PACKAGE, ThemeEnum, ThemeConfigMap, THEME_DEFAULTS, OPTIONS, SELECT_CONTAINER_STYLE, THEME_CONFIG } from \'./helpers/constants\';\\r\\nimport { OPTION_CLS, OPTION_FOCUSED_CLS, OPTION_DISABLED_CLS, OPTION_SELECTED_CLS, CARET_ICON_CLS, CLEAR_ICON_CLS, LOADING_DOTS_CLS, AUTOSIZE_INPUT_CLS, MENU_CONTAINER_CLS, SELECT_CONTAINER_CLS, CONTROL_CONTAINER_CLS } from \'../src/constants/dom\';\\r\\nimport {\\r\\n  Button,\\r\\n  ButtonGroup,\\r\\n  Hr,\\r\\n  Title,\\r\\n  SubTitle,\\r\\n  Label,\\r\\n  LabelHeader,\\r\\n  LabelNote,\\r\\n  Columns,\\r\\n  Column,\\r\\n  Content,\\r\\n  Container,\\r\\n  List,\\r\\n  ListItem,\\r\\n  ListWrapper,\\r\\n  SelectContainer,\\r\\n  Paragraph,\\r\\n  TextHeader,\\r\\n  CheckboxGroup,\\r\\n  Card,\\r\\n  CardHeader,\\r\\n  CardBody,\\r\\n  OtherSpan,\\r\\n  OptionContainer,\\r\\n  OptionName,\\r\\n  OptionImg,\\r\\n  ChevronDownSvg\\r\\n} from \'./helpers/styled\';\\r\\n\\r\\nconst REACT_LOGO_SVG = require(\'./assets/react-logo.svg\') as string;\\r\\nconst CHEVRON_SVG_PATH = \'M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z\';\\r\\n\\r\\nexport default {\\r\\n  title: \'React Functional Select\'\\r\\n};\\r\\n\\r\\nexport const SingleSelect = () => {\\r\\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\\r\\n  const [isLoading, setIsLoading] = useCallbackState(false);\\r\\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\\r\\n  const [isClearable, setIsClearable] = useCallbackState(true);\\r\\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    isDisabled && setIsInvalid(false);\\r\\n  }, [isDisabled]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Single-select</Title>\\r\\n      <Hr />\\r\\n      <Paragraph>\\r\\n        In this story\'s source code, notice that the callback function\\r\\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\\r\\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\\r\\n        memoization of any callback function property whenever possible. This will boost\\r\\n        performance and reduce the amount of renders as these properties are referenced\\r\\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\\r\\n        and <code>useMemos</code>. When defined in a functional component, wrap in\\r\\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\\r\\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\\r\\n        you can opt to hoist functions outside of the component entirely.\\r\\n      </Paragraph>\\r\\n      <Paragraph>\\r\\n        The <code>options</code> property should also be memoized. Either consume\\r\\n        it directly from a state management store, or make sure it is stable by\\r\\n        avoiding inline or render-based mutations.\\r\\n      </Paragraph>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\'Searchable\'\\r\\n              checked={isSearchable}\\r\\n              onCheck={setIsSearchable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Clearable\'\\r\\n              checked={isClearable}\\r\\n              onCheck={setIsClearable}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Disabled\'\\r\\n              checked={isDisabled}\\r\\n              onCheck={setIsDisabled}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Invalid\'\\r\\n              checked={isInvalid}\\r\\n              readOnly={isDisabled}\\r\\n              onCheck={setIsInvalid}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'Loading\'\\r\\n              checked={isLoading}\\r\\n              onCheck={setIsLoading}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isLoading={isLoading}\\r\\n              isInvalid={isInvalid}\\r\\n              options={CITY_OPTIONS}\\r\\n              isDisabled={isDisabled}\\r\\n              isClearable={isClearable}\\r\\n              isSearchable={isSearchable}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const MultiSelect = () => {\\r\\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\\r\\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\\r\\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\\r\\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\\r\\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n\\r\\n  // Example \\"renderMultiOptions\\" property that can be used to further customize labeling for multi-option scenarios\\r\\n  const renderMultiOptions = useCallback(\\r\\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\\r\\n      <Fragment>\\r\\n        {selected.length && renderOptionLabel(selected[0].data)}\\r\\n        {selected.length > 1 && (\\r\\n          <OtherSpan>\\r\\n            {`(+${selected.length - 1} ${selected.length === 2 ? \'other\' : \'others\'})`}\\r\\n          </OtherSpan>\\r\\n        )}\\r\\n      </Fragment>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Multi-select</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>isMulti</code> property to allow for multiple selections.\\r\\n        While in multi-select mode, some properties are now applicable and\\r\\n        others become more pertinent.\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\\r\\n            selected option from the menu. Default value is false, however, if\\r\\n            undefined and <code>isMulti === true</code>, then its value defaults\\r\\n            to true.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\\r\\n            menu of options when the user selects an option. Default value is\\r\\n            false, however, it may be benefical to set this property to true for\\r\\n            convenience in multi-select scenarios.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\\r\\n            Optional callback function that can be used to further customize\\r\\n            the selection label in multi-select scenarios . <code>params</code>{\' \'}\\r\\n            is an object that contains the <code>selected</code> and{\' \'}\\r\\n            <code>renderOptionLabel</code> properties (array of selected options\\r\\n            and function used to render individual option labels, respectively).\\r\\n            When this function is defined, left and right arrow navigation of\\r\\n            individual options is disabled. When using this property, it may be\\r\\n            be a good idea to set the property <code>backspaceClearsValue</code>{\' \'}\\r\\n            to <em>false</em> in order to avoid accidentally clearing all\\r\\n            selections when searching.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\'closeMenuOnSelect\'\\r\\n              checked={closeMenuOnSelect}\\r\\n              onCheck={setCloseMenuOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'hideSelectedOptions\'\\r\\n              checked={hideSelectedOptions}\\r\\n              onCheck={setHideSelectedOptions}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'blurInputOnSelect\'\\r\\n              checked={blurInputOnSelect}\\r\\n              onCheck={setBlurInputOnSelect}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'openMenuOnClick (click caret if false)\'\\r\\n              checked={openMenuOnClick}\\r\\n              onCheck={setOpenMenuOnClick}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'renderMultiOptions (custom renderer)\'\\r\\n              checked={useRenderMultiOptions}\\r\\n              onCheck={setUseRenderMultiOptions}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isMulti\\r\\n              isClearable\\r\\n              isSearchable\\r\\n              options={CITY_OPTIONS}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              openMenuOnClick={openMenuOnClick}\\r\\n              blurInputOnSelect={blurInputOnSelect}\\r\\n              closeMenuOnSelect={closeMenuOnSelect}\\r\\n              hideSelectedOptions={hideSelectedOptions}\\r\\n              backspaceClearsValue={!useRenderMultiOptions}\\r\\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Styling = () => {\\r\\n  const [themeConfig, setThemeConfig] = useState<Theme | undefined>(undefined);\\r\\n  const [selectedOption, setSelectedOption] = useCallbackState<Option | null>(null);\\r\\n  const menuItemSize = (selectedOption && selectedOption.value === ThemeEnum.LARGE_TEXT) ? 44 : 35;\\r\\n\\r\\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\\r\\n    <CodeMarkup\\r\\n      language=\'markup\'\\r\\n      header=\'Class Markup\'\\r\\n      data={CLASS_NAME_HTML}\\r\\n    />\\r\\n  ), []);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (selectedOption) {\\r\\n      const { value } = selectedOption;\\r\\n      setThemeConfig(ThemeConfigMap[value]);\\r\\n    }\\r\\n  }, [selectedOption]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Styling</Title>\\r\\n      <Hr />\\r\\n      <SubTitle>Theming</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            react-functional-select uses{\' \'}\\r\\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to handle its\\r\\n            styling. The root node is wrapped in styled-component\'s{\' \'}\\r\\n            <code>ThemeProvider</code> wrapper component which gives all child\\r\\n            styled-components access to the provided theme via React\'s context\\r\\n            API. To override react-functional-select\'s default theme, pass an\\r\\n            object to the <code>themeConfig</code> property - any matching\\r\\n            properties will replace those in the default theme.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\\r\\n            the <code>themeConfig</code> object contain a <code>css</code>{\' \'}\\r\\n            property of type{\' \'}\\r\\n            <code>string | FlattenSimpleInterpolation | undefined</code>{\' \'}\\r\\n            (default value is undefined). This property can be used to pass raw\\r\\n            CSS styles as a string or wrapped in{\' \'}\\r\\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported{\' \'}\\r\\n            <code>css</code> function. Those objects are: select, control, icon,\\r\\n            menu, noOptions, multiValue, and input.\\r\\n          </Content>\\r\\n          <Content>\\r\\n            Starting in <strong>v2.7.0</strong>, the control object in{\' \'}\\r\\n            <code>themeConfig</code> has the property <code>focusedCss</code> -\\r\\n            which is similar to the <code>css</code> property, except that it is\\r\\n            only applied when the select control is focused (and removed when\\r\\n            blurred).\\r\\n          </Content>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>\\r\\n          <CodeMarkup\\r\\n            textColor=\\"#79b6f2\\"\\r\\n            language=\\"javascript\\"\\r\\n            data={THEME_DEFAULTS}\\r\\n            header=\\"Theme Defaults\\"\\r\\n            formatFn={stringifyJavaScriptObj}\\r\\n          />\\r\\n        </Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Using Classes</SubTitle>\\r\\n      <Columns>\\r\\n        <Column widthPercent={40}>\\r\\n          <Content>\\r\\n            If you want to style the component using CSS classes, set the{\' \'}\\r\\n            <code>addClassNames</code> prop to true and it will then generate{\' \'}\\r\\n            <code>className</code> attributes for that specific instance of the\\r\\n            component. These are the classes that are available:\\r\\n          </Content>\\r\\n          <ListWrapper className=\\"is-class-list\\">\\r\\n            <List>\\r\\n              <ListItem>{SELECT_CONTAINER_CLS}</ListItem>\\r\\n              <ListItem>{CONTROL_CONTAINER_CLS}</ListItem>\\r\\n              <ListItem>{MENU_CONTAINER_CLS}</ListItem>\\r\\n              <ListItem>{AUTOSIZE_INPUT_CLS}</ListItem>\\r\\n              <ListItem>{CARET_ICON_CLS}</ListItem>\\r\\n              <ListItem>{CLEAR_ICON_CLS}</ListItem>\\r\\n              <ListItem>{LOADING_DOTS_CLS}</ListItem>\\r\\n              <ListItem>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</ListItem>\\r\\n            </List>\\r\\n          </ListWrapper>\\r\\n        </Column>\\r\\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\\r\\n      </Columns>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelHeader>Try selecting themeConfig objects below</LabelHeader>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <Columns>\\r\\n            <Column widthPercent={40}>\\r\\n              <div style={SELECT_CONTAINER_STYLE}>\\r\\n                <Select\\r\\n                  options={OPTIONS}\\r\\n                  isClearable={false}\\r\\n                  isSearchable={false}\\r\\n                  themeConfig={themeConfig}\\r\\n                  initialValue={OPTIONS[0]}\\r\\n                  menuItemSize={menuItemSize}\\r\\n                  onOptionChange={setSelectedOption}\\r\\n                />\\r\\n              </div>\\r\\n            </Column>\\r\\n            <Column widthPercent={60}>\\r\\n              <CodeMarkup\\r\\n                data={themeConfig}\\r\\n                textColor=\\"#79b6f2\\"\\r\\n                language=\\"javascript\\"\\r\\n                header=\\"theme-config\\"\\r\\n                formatFn={stringifyJavaScriptObj}\\r\\n              />\\r\\n            </Column>\\r\\n          </Columns>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Events = () => {\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\\r\\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\\r\\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\\r\\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\\r\\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\\r\\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\\r\\n\\r\\n  const onOptionChange = useCallback((option: Option | null): void => {\\r\\n    const optionJsonStr = JSON.stringify(option || {}).replace(/\\"/g, \\"\'\\");\\r\\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\\r\\n  }, []);\\r\\n\\r\\n  const onMenuOpen = useCallback((...args: any[]): void => renderInfoToast(\'Menu opened!\'), []);\\r\\n  const onMenuClose = useCallback((...args: any[]): void => renderInfoToast(\'Menu closed!\'), []);\\r\\n  const onInputBlur = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast(\'Control blurred!\'), []);\\r\\n  const onInputFocus = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast(\'Control focused!\'), []);\\r\\n  const onKeyDown = useCallback((e: KeyboardEvent<HTMLDivElement>): void => renderInfoToast(\'keydown event executed!\'), []);\\r\\n\\r\\n  useClearToastsOnUnmount();\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Events</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        There are various callback function properties that are executed following\\r\\n        their associated events:\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\\r\\n            executed after an option is selected or removed\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is opened\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\\r\\n            executed after the menu is closed\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            executed after the input control\'s value changes\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is blurred\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\\r\\n            executed after the input control is focused\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void</TextHeader> -\\r\\n            executed after the onKeyDown event\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            executed after the input value is persisted to state; this value also evaluates\\r\\n            the <code>inputDelay</code> property for debouncing - this callback is really only\\r\\n            useful when <code>inputDelay</code> is defined, and if not, it probably makes more\\r\\n            sense to use the <code>onInputChange</code> callback\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelNote>Events in demo will trigger a toast notification</LabelNote>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\'onOptionChange\'\\r\\n              checked={addOnOptionChange}\\r\\n              onCheck={setAddOnOptionChange}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuOpen\'\\r\\n              checked={addOnMenuOpen}\\r\\n              onCheck={setAddOnMenuOpen}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onMenuClose\'\\r\\n              checked={addOnMenuClose}\\r\\n              onCheck={setAddOnMenuClose}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputBlur\'\\r\\n              checked={addOnInputBlur}\\r\\n              onCheck={setAddOnInputBlur}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onInputFocus\'\\r\\n              checked={addOnInputFocus}\\r\\n              onCheck={setAddOnInputFocus}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\'onKeyDown\'\\r\\n              checked={addOnKeyDown}\\r\\n              onCheck={setAddOnKeyDown}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              options={options}\\r\\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\\r\\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\\r\\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\\r\\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\\r\\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\\r\\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Methods = () => {\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\\r\\n\\r\\n  const blurSelect = (): void => {\\r\\n    selectRef.current && selectRef.current.blur();\\r\\n  };\\r\\n\\r\\n  const focusSelect = (): void => {\\r\\n    selectRef.current && selectRef.current.focus();\\r\\n  };\\r\\n\\r\\n  const clearValue = (): void => {\\r\\n    selectRef.current && selectRef.current.clearValue();\\r\\n  };\\r\\n\\r\\n  const toggleMenuOpen = (): void => {\\r\\n    selectRef.current && selectRef.current.toggleMenu(true);\\r\\n  };\\r\\n\\r\\n  const updateSelectedOption = (): void => {\\r\\n    selectRef.current && selectRef.current.setValue(options[0]);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Methods</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Five public methods are exposed to wrapping components and are\\r\\n        accessible via a forwarded <code>ref</code>.\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>blur(): void</TextHeader> - blur the control\\r\\n            programatically\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>focus(): void</TextHeader> - focus the control\\r\\n            programatically\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> - toggle\\r\\n            the menu programatically\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\\r\\n            value programatically <em>(if an option is selected)</em>\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\\r\\n            value programatically <em>(option will be validated)</em>\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader supportMobile>\\r\\n          <ButtonGroup>\\r\\n            <Label>Methods</Label>\\r\\n            <Button onClick={focusSelect}>Focus</Button>\\r\\n            <Button onClick={blurSelect}>Blur</Button>\\r\\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\\r\\n            <Button onClick={clearValue}>Clear Value</Button>\\r\\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\\r\\n          </ButtonGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              ref={selectRef}\\r\\n              options={options}\\r\\n              initialValue={options[0]}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Filtering = () => {\\r\\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\\r\\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\\r\\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\\r\\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\\r\\n\\r\\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\\r\\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\\r\\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\\r\\n\\r\\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: \'São Paulo\', state: \'BR\' }], []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Filter Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        The default filtering functionality can be customized via the following\\r\\n        properties:\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\\r\\n            case when matching strings. Default value is <code>true</code>.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\\r\\n            ignores accents when matching strings. Default value is <code>false</code>.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>filterMatchFrom?: \'any\' | \'start\'</TextHeader> -\\r\\n            Position in source string to perform match. Default value is <code>\'any\'</code>.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\\r\\n            When defined will take each option and generate a string used in\\r\\n            the filtering process. By default, the stringified version of what\\r\\n            is generated by <code>getOptionLabel</code>, if definded, or the\\r\\n            option\'s label as a fallback. The <code>MenuOption</code> typed\\r\\n            parameter that <code>getFilterOptionString</code> accepts contains a{\' \'}\\r\\n            <code>data</code> property that represents the objects that comprise\\r\\n            your <code>options</code> property.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <CheckboxGroup>\\r\\n            <Checkbox\\r\\n              label=\\"Ignore Case\\"\\r\\n              checked={filterIgnoreCase}\\r\\n              onCheck={setFilterIgnoreCase}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\\"Ignore Accents\\"\\r\\n              checked={filterIgnoreAccents}\\r\\n              onCheck={setFilterIgnoreAccents}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\\"Match from the start\\"\\r\\n              checked={filterMatchFromStart}\\r\\n              onCheck={setFilterMatchFromStart}\\r\\n            />\\r\\n            <Checkbox\\r\\n              label=\\"Use custom filter function (by state only)\\"\\r\\n              checked={useCustomFilterFunc}\\r\\n              onCheck={setUseCustomFilterFunc}\\r\\n            />\\r\\n          </CheckboxGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isClearable\\r\\n              options={options}\\r\\n              getOptionValue={getOptionValue}\\r\\n              getOptionLabel={getOptionLabel}\\r\\n              filterIgnoreCase={filterIgnoreCase}\\r\\n              filterIgnoreAccents={filterIgnoreAccents}\\r\\n              getFilterOptionString={\\r\\n                useCustomFilterFunc ? getFilterOptionString : undefined\\r\\n              }\\r\\n              filterMatchFrom={\\r\\n                filterMatchFromStart\\r\\n                  ? FilterMatchEnum.START\\r\\n                  : FilterMatchEnum.ANY\\r\\n              }\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Windowing = () => {\\r\\n  const selectRef = useRef<SelectRef | null>(null);\\r\\n\\r\\n  const [options, setOptions] = useState<Option[]>([]);\\r\\n  const [optionsCount, setOptionsCount] = useState<number>(100);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const handler = setTimeout(() => {\\r\\n      const nextOptions = createSelectOptions(optionsCount);\\r\\n      setOptions(nextOptions);\\r\\n    }, 115);\\r\\n\\r\\n    return () => {\\r\\n      clearTimeout(handler);\\r\\n    };\\r\\n  }, [optionsCount]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (selectRef.current) {\\r\\n      selectRef.current.clearValue();\\r\\n    }\\r\\n  }, [options]);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Integrated Windowing</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Option data is \'windowed\' using the <PackageLink {...REACT_WINDOW_PACKAGE} /> package.\\r\\n        Aside from the obvious benefits provided by only rendering a small subset of your\\r\\n        enumerable data (rather than bloating the DOM with an excessive amount of nodes),\\r\\n        \'windowing\' can also assist with:\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <strong>Efficient memory allocation</strong>. \'Windowing\' naturally\\r\\n            lends itself to the dynamic generation of attributes/values as each\\r\\n            object comes into your renderer\'s scope (as opposed to allocating\\r\\n            this data upfront for each object in your list). This way you can\\r\\n            perform this work just when you absolutely need to and then can\\r\\n            immediately release it for the GC to cleanup. As an example I am\\r\\n            generating the <code>onClick</code>, <code>id</code>,\\r\\n            and <code>className</code> attributes for each <code>menuOption</code> as\\r\\n            they get passed to the <code>&lt;Option /&gt;</code> renderer component.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <strong>Functional architecture</strong>. The flexibility provided\\r\\n            through only having to manage subsets of your list allows for a more\\r\\n            dynamic application. By breaking your code out into smaller, \'pure\'\\r\\n            child components, you can write code that scales well and becomes\\r\\n            open to performance optimizations - most notably, memoization.\\r\\n            Simple components that rely on the props passed to it (rather than\\r\\n            its own managed state) to generate its JSX are likely candidates for\\r\\n            memoization (testing &amp; debugging becomes much easier as well).\\r\\n          </ListItem>\\r\\n        </List>\\r\\n        <em>Note: </em>The only time any noticeable performance degradation will be observed\\r\\n        is during search input updates when the <code>options</code> count reaches the high\\r\\n        tens of thousands. To work around this, the <code>inputDelay</code> (number in milliseconds)\\r\\n        can be set to debounce the input value. That way, the <code>menuOptions</code> will not be\\r\\n        recalculated on every keystroke.\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader supportMobile>\\r\\n          <ButtonGroup>\\r\\n            <Label>Options Count</Label>\\r\\n            <OptionsCountButton\\r\\n              count={100}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n            <OptionsCountButton\\r\\n              count={1000}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n            <OptionsCountButton\\r\\n              count={5000}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n            <OptionsCountButton\\r\\n              count={25000}\\r\\n              optionsCount={optionsCount}\\r\\n              setOptionsCount={setOptionsCount}\\r\\n            />\\r\\n          </ButtonGroup>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select ref={selectRef} options={options} />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Advanced = () => {\\r\\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\\r\\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => (option.name === PACKAGE_OPTIONS[3].name), []);\\r\\n\\r\\n  const renderOptionLabel = useCallback(\\r\\n    (option: PackageOption): ReactNode => (\\r\\n      <OptionContainer>\\r\\n        <OptionImg src={REACT_LOGO_SVG} isDisabled={getIsOptionDisabled(option)} />\\r\\n        <OptionName>{option.name}</OptionName>\\r\\n      </OptionContainer>\\r\\n    ),\\r\\n    [getIsOptionDisabled]\\r\\n  );\\r\\n\\r\\n  const customCaretIcon = useCallback(\\r\\n    ({ menuOpen }): ReactNode => (\\r\\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden=\'true\' viewBox=\'0 0 448 512\'>\\r\\n        <path d={CHEVRON_SVG_PATH} />\\r\\n      </ChevronDownSvg>\\r\\n    ),\\r\\n    []\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Advanced Customization</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Implementation using a couple of the more specialized properties.\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\\r\\n            function with a return type of <code>ReactNode</code>. Use this property in cases\\r\\n            where the standard <code>getOptionLabel</code> property won\'t meet your needs (for\\r\\n            instance, you want to render each option\'s label using custom JSX). More complex\\r\\n            option labels will likely equate to longer render durations - this can translate\\r\\n            into a flash of empty space when a user first starts scrolling. In order to prevent\\r\\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\\r\\n            rows outside of the visible area. The default value for this property is 1 and it is\\r\\n            important to note that increasing this value can negatively impact performance.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\\r\\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\\r\\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\\r\\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\\r\\n            options - they cannot both be specified.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\\r\\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\\r\\n            When using a function, an object containing stateful data is forwarded and can be used to style\\r\\n            your custom node accordingly. The state is <code>{\'{ menuOpen, isLoading, isInvalid, isDisabled }\'}</code> of\\r\\n            type <code>{\'Record<string, boolean>\'}</code>. The <code>clearIcon</code> property has an identical definition.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelHeader>JSX labels, custom caret icon, and disabled option</LabelHeader>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              isSearchable={false}\\r\\n              options={PACKAGE_OPTIONS}\\r\\n              themeConfig={THEME_CONFIG}\\r\\n              caretIcon={customCaretIcon}\\r\\n              getOptionValue={getOptionValue}\\r\\n              renderOptionLabel={renderOptionLabel}\\r\\n              getIsOptionDisabled={getIsOptionDisabled}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport const Async = () => {\\r\\n  const [isLoading, setIsLoading] = useState<boolean>(false);\\r\\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, \'Initial\'));\\r\\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\\r\\n\\r\\n  const onSearchChange = useCallback((value: string): void => {\\r\\n    mockHttpRequest()\\r\\n      .then(() => {\\r\\n        const count = getRandomInt(1, 5);\\r\\n        const nextOptions = createAsyncOptions(count, `Search text: ${value || \'Initial\'}`);\\r\\n        setOptions(nextOptions);\\r\\n      })\\r\\n      .catch((e) => console.error(e))\\r\\n      .then(() => setIsLoading(false));\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Container>\\r\\n      <Title>Async Mode</Title>\\r\\n      <Hr />\\r\\n      <ListWrapper>\\r\\n        Add the <code>async</code> property to enable async mode. There is one key difference\\r\\n        in core functionality with async mode - changes to search input value will not cause\\r\\n        the <code>useMenuOptions</code> effect to run. The rest of hooking into async mode is\\r\\n        achieved using some combination of the properties found below\\r\\n        . <em>Properties onInputChange and onSearchChange should be memoized.</em>\\r\\n        <List>\\r\\n          <ListItem>\\r\\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\\r\\n            callback executed directly following the input control\'s <code>onChange</code> event.\\r\\n            This callback is not debounced, so it fires immediately. This is a good\\r\\n            place to set a stateful loading property in your parent component that is mapped to\\r\\n            react-functional-select\'s <code>isLoading</code> property.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\\r\\n            callback executed following component state updates for\\r\\n            the <code>debouncedInputValue</code>. The debounce is set using\\r\\n            the <code>inputDelay</code> property. This callback is a good place for your\\r\\n            http fetch request and post-request logic (i.e. setting isLoading false).\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\\r\\n            set to a positive integer in order to debounce updates to the search input value\\r\\n            following input change events. This property directly maps to the <code>delay</code> in\\r\\n            milliconds passed to the <code>setTimeout</code> method.\\r\\n          </ListItem>\\r\\n          <ListItem>\\r\\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\\r\\n            appear in the far-right of the control and take the place of the clear icon (if shown).\\r\\n            Additionally, it will hide options in the menu and instead, display a loading message.\\r\\n            The loading message text defaults to \'Loading...\', but can be overriden via\\r\\n            the <code>loadingMsg</code> property.\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </ListWrapper>\\r\\n      <SubTitle>Demo</SubTitle>\\r\\n      <Hr />\\r\\n      <Card>\\r\\n        <CardHeader>\\r\\n          <LabelNote>Search debounced 375ms and mock HTTP call resolves after 500ms</LabelNote>\\r\\n        </CardHeader>\\r\\n        <CardBody>\\r\\n          <SelectContainer>\\r\\n            <Select\\r\\n              async\\r\\n              isClearable\\r\\n              inputDelay={375}\\r\\n              options={options}\\r\\n              isLoading={isLoading}\\r\\n              onInputChange={onInputChange}\\r\\n              onSearchChange={onSearchChange}\\r\\n            />\\r\\n          </SelectContainer>\\r\\n        </CardBody>\\r\\n      </Card>\\r\\n    </Container>\\r\\n  );\\r\\n};","locationsMap":{"single-select":{"startLoc":{"col":28,"line":46},"endLoc":{"col":1,"line":131},"startBody":{"col":28,"line":46},"endBody":{"col":1,"line":131}},"multi-select":{"startLoc":{"col":27,"line":133},"endLoc":{"col":1,"line":247},"startBody":{"col":27,"line":133},"endBody":{"col":1,"line":247}},"styling":{"startLoc":{"col":23,"line":249},"endLoc":{"col":1,"line":374},"startBody":{"col":23,"line":249},"endBody":{"col":1,"line":374}},"events":{"startLoc":{"col":22,"line":376},"endLoc":{"col":1,"line":498},"startBody":{"col":22,"line":376},"endBody":{"col":1,"line":498}},"methods":{"startLoc":{"col":23,"line":500},"endLoc":{"col":1,"line":579},"startBody":{"col":23,"line":500},"endBody":{"col":1,"line":579}},"filtering":{"startLoc":{"col":25,"line":581},"endLoc":{"col":1,"line":675},"startBody":{"col":25,"line":581},"endBody":{"col":1,"line":675}},"windowing":{"startLoc":{"col":25,"line":677},"endLoc":{"col":1,"line":774},"startBody":{"col":25,"line":677},"endBody":{"col":1,"line":774}},"advanced":{"startLoc":{"col":24,"line":776},"endLoc":{"col":1,"line":855},"startBody":{"col":24,"line":776},"endBody":{"col":1,"line":855}},"async":{"startLoc":{"col":21,"line":857},"endLoc":{"col":1,"line":935},"startBody":{"col":21,"line":857},"endBody":{"col":1,"line":935}}}},},\r\n  title: \'React Functional Select\'\r\n};\r\n\r\nexport const SingleSelect = () => {\r\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\r\n  const [isLoading, setIsLoading] = useCallbackState(false);\r\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\r\n  const [isClearable, setIsClearable] = useCallbackState(true);\r\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  useEffect(() => {\r\n    isDisabled && setIsInvalid(false);\r\n  }, [isDisabled]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Single-select</Title>\r\n      <Hr />\r\n      <Paragraph>\r\n        In this story\'s source code, notice that the callback function\r\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\r\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\r\n        memoization of any callback function property whenever possible. This will boost\r\n        performance and reduce the amount of renders as these properties are referenced\r\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\r\n        and <code>useMemos</code>. When defined in a functional component, wrap in\r\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\r\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\r\n        you can opt to hoist functions outside of the component entirely.\r\n      </Paragraph>\r\n      <Paragraph>\r\n        The <code>options</code> property should also be memoized. Either consume\r\n        it directly from a state management store, or make sure it is stable by\r\n        avoiding inline or render-based mutations.\r\n      </Paragraph>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label=\'Searchable\'\r\n              checked={isSearchable}\r\n              onCheck={setIsSearchable}\r\n            />\r\n            <Checkbox\r\n              label=\'Clearable\'\r\n              checked={isClearable}\r\n              onCheck={setIsClearable}\r\n            />\r\n            <Checkbox\r\n              label=\'Disabled\'\r\n              checked={isDisabled}\r\n              onCheck={setIsDisabled}\r\n            />\r\n            <Checkbox\r\n              label=\'Invalid\'\r\n              checked={isInvalid}\r\n              readOnly={isDisabled}\r\n              onCheck={setIsInvalid}\r\n            />\r\n            <Checkbox\r\n              label=\'Loading\'\r\n              checked={isLoading}\r\n              onCheck={setIsLoading}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isLoading={isLoading}\r\n              isInvalid={isInvalid}\r\n              options={CITY_OPTIONS}\r\n              isDisabled={isDisabled}\r\n              isClearable={isClearable}\r\n              isSearchable={isSearchable}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const MultiSelect = () => {\r\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\r\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\r\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\r\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\r\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  // Example "renderMultiOptions" property that can be used to further customize labeling for multi-option scenarios\r\n  const renderMultiOptions = useCallback(\r\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\r\n      <Fragment>\r\n        {selected.length && renderOptionLabel(selected[0].data)}\r\n        {selected.length > 1 && (\r\n          <OtherSpan>\r\n            {`(+${selected.length - 1} ${selected.length === 2 ? \'other\' : \'others\'})`}\r\n          </OtherSpan>\r\n        )}\r\n      </Fragment>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Multi-select</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>isMulti</code> property to allow for multiple selections.\r\n        While in multi-select mode, some properties are now applicable and\r\n        others become more pertinent.\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\r\n            selected option from the menu. Default value is false, however, if\r\n            undefined and <code>isMulti === true</code>, then its value defaults\r\n            to true.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\r\n            menu of options when the user selects an option. Default value is\r\n            false, however, it may be benefical to set this property to true for\r\n            convenience in multi-select scenarios.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\r\n            Optional callback function that can be used to further customize\r\n            the selection label in multi-select scenarios . <code>params</code>{\' \'}\r\n            is an object that contains the <code>selected</code> and{\' \'}\r\n            <code>renderOptionLabel</code> properties (array of selected options\r\n            and function used to render individual option labels, respectively).\r\n            When this function is defined, left and right arrow navigation of\r\n            individual options is disabled. When using this property, it may be\r\n            be a good idea to set the property <code>backspaceClearsValue</code>{\' \'}\r\n            to <em>false</em> in order to avoid accidentally clearing all\r\n            selections when searching.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label=\'closeMenuOnSelect\'\r\n              checked={closeMenuOnSelect}\r\n              onCheck={setCloseMenuOnSelect}\r\n            />\r\n            <Checkbox\r\n              label=\'hideSelectedOptions\'\r\n              checked={hideSelectedOptions}\r\n              onCheck={setHideSelectedOptions}\r\n            />\r\n            <Checkbox\r\n              label=\'blurInputOnSelect\'\r\n              checked={blurInputOnSelect}\r\n              onCheck={setBlurInputOnSelect}\r\n            />\r\n            <Checkbox\r\n              label=\'openMenuOnClick (click caret if false)\'\r\n              checked={openMenuOnClick}\r\n              onCheck={setOpenMenuOnClick}\r\n            />\r\n            <Checkbox\r\n              label=\'renderMultiOptions (custom renderer)\'\r\n              checked={useRenderMultiOptions}\r\n              onCheck={setUseRenderMultiOptions}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isMulti\r\n              isClearable\r\n              isSearchable\r\n              options={CITY_OPTIONS}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              openMenuOnClick={openMenuOnClick}\r\n              blurInputOnSelect={blurInputOnSelect}\r\n              closeMenuOnSelect={closeMenuOnSelect}\r\n              hideSelectedOptions={hideSelectedOptions}\r\n              backspaceClearsValue={!useRenderMultiOptions}\r\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Styling = () => {\r\n  const [themeConfig, setThemeConfig] = useState<Theme | undefined>(undefined);\r\n  const [selectedOption, setSelectedOption] = useCallbackState<Option | null>(null);\r\n  const menuItemSize = (selectedOption && selectedOption.value === ThemeEnum.LARGE_TEXT) ? 44 : 35;\r\n\r\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\r\n    <CodeMarkup\r\n      language=\'markup\'\r\n      header=\'Class Markup\'\r\n      data={CLASS_NAME_HTML}\r\n    />\r\n  ), []);\r\n\r\n  useEffect(() => {\r\n    if (selectedOption) {\r\n      const { value } = selectedOption;\r\n      setThemeConfig(ThemeConfigMap[value]);\r\n    }\r\n  }, [selectedOption]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Styling</Title>\r\n      <Hr />\r\n      <SubTitle>Theming</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            react-functional-select uses{\' \'}\r\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to handle its\r\n            styling. The root node is wrapped in styled-component\'s{\' \'}\r\n            <code>ThemeProvider</code> wrapper component which gives all child\r\n            styled-components access to the provided theme via React\'s context\r\n            API. To override react-functional-select\'s default theme, pass an\r\n            object to the <code>themeConfig</code> property - any matching\r\n            properties will replace those in the default theme.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\r\n            the <code>themeConfig</code> object contain a <code>css</code>{\' \'}\r\n            property of type{\' \'}\r\n            <code>string | FlattenSimpleInterpolation | undefined</code>{\' \'}\r\n            (default value is undefined). This property can be used to pass raw\r\n            CSS styles as a string or wrapped in{\' \'}\r\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported{\' \'}\r\n            <code>css</code> function. Those objects are: select, control, icon,\r\n            menu, noOptions, multiValue, and input.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.7.0</strong>, the control object in{\' \'}\r\n            <code>themeConfig</code> has the property <code>focusedCss</code> -\r\n            which is similar to the <code>css</code> property, except that it is\r\n            only applied when the select control is focused (and removed when\r\n            blurred).\r\n          </Content>\r\n        </Column>\r\n        <Column widthPercent={60}>\r\n          <CodeMarkup\r\n            textColor="#79b6f2"\r\n            language="javascript"\r\n            data={THEME_DEFAULTS}\r\n            header="Theme Defaults"\r\n            formatFn={stringifyJavaScriptObj}\r\n          />\r\n        </Column>\r\n      </Columns>\r\n      <SubTitle>Using Classes</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            If you want to style the component using CSS classes, set the{\' \'}\r\n            <code>addClassNames</code> prop to true and it will then generate{\' \'}\r\n            <code>className</code> attributes for that specific instance of the\r\n            component. These are the classes that are available:\r\n          </Content>\r\n          <ListWrapper className="is-class-list">\r\n            <List>\r\n              <ListItem>{SELECT_CONTAINER_CLS}</ListItem>\r\n              <ListItem>{CONTROL_CONTAINER_CLS}</ListItem>\r\n              <ListItem>{MENU_CONTAINER_CLS}</ListItem>\r\n              <ListItem>{AUTOSIZE_INPUT_CLS}</ListItem>\r\n              <ListItem>{CARET_ICON_CLS}</ListItem>\r\n              <ListItem>{CLEAR_ICON_CLS}</ListItem>\r\n              <ListItem>{LOADING_DOTS_CLS}</ListItem>\r\n              <ListItem>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</ListItem>\r\n            </List>\r\n          </ListWrapper>\r\n        </Column>\r\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\r\n      </Columns>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelHeader>Try selecting themeConfig objects below</LabelHeader>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Columns>\r\n            <Column widthPercent={40}>\r\n              <div style={SELECT_CONTAINER_STYLE}>\r\n                <Select\r\n                  options={OPTIONS}\r\n                  isClearable={false}\r\n                  isSearchable={false}\r\n                  themeConfig={themeConfig}\r\n                  initialValue={OPTIONS[0]}\r\n                  menuItemSize={menuItemSize}\r\n                  onOptionChange={setSelectedOption}\r\n                />\r\n              </div>\r\n            </Column>\r\n            <Column widthPercent={60}>\r\n              <CodeMarkup\r\n                data={themeConfig}\r\n                textColor="#79b6f2"\r\n                language="javascript"\r\n                header="theme-config"\r\n                formatFn={stringifyJavaScriptObj}\r\n              />\r\n            </Column>\r\n          </Columns>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Events = () => {\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\r\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\r\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\r\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\r\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\r\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\r\n\r\n  const onOptionChange = useCallback((option: Option | null): void => {\r\n    const optionJsonStr = JSON.stringify(option || {}).replace(/"/g, "\'");\r\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\r\n  }, []);\r\n\r\n  const onMenuOpen = useCallback((...args: any[]): void => renderInfoToast(\'Menu opened!\'), []);\r\n  const onMenuClose = useCallback((...args: any[]): void => renderInfoToast(\'Menu closed!\'), []);\r\n  const onInputBlur = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast(\'Control blurred!\'), []);\r\n  const onInputFocus = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast(\'Control focused!\'), []);\r\n  const onKeyDown = useCallback((e: KeyboardEvent<HTMLDivElement>): void => renderInfoToast(\'keydown event executed!\'), []);\r\n\r\n  useClearToastsOnUnmount();\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Events</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        There are various callback function properties that are executed following\r\n        their associated events:\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\r\n            executed after an option is selected or removed\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\r\n            executed after the menu is opened\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\r\n            executed after the menu is closed\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            executed after the input control\'s value changes\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is blurred\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is focused\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void</TextHeader> -\r\n            executed after the onKeyDown event\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            executed after the input value is persisted to state; this value also evaluates\r\n            the <code>inputDelay</code> property for debouncing - this callback is really only\r\n            useful when <code>inputDelay</code> is defined, and if not, it probably makes more\r\n            sense to use the <code>onInputChange</code> callback\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelNote>Events in demo will trigger a toast notification</LabelNote>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label=\'onOptionChange\'\r\n              checked={addOnOptionChange}\r\n              onCheck={setAddOnOptionChange}\r\n            />\r\n            <Checkbox\r\n              label=\'onMenuOpen\'\r\n              checked={addOnMenuOpen}\r\n              onCheck={setAddOnMenuOpen}\r\n            />\r\n            <Checkbox\r\n              label=\'onMenuClose\'\r\n              checked={addOnMenuClose}\r\n              onCheck={setAddOnMenuClose}\r\n            />\r\n            <Checkbox\r\n              label=\'onInputBlur\'\r\n              checked={addOnInputBlur}\r\n              onCheck={setAddOnInputBlur}\r\n            />\r\n            <Checkbox\r\n              label=\'onInputFocus\'\r\n              checked={addOnInputFocus}\r\n              onCheck={setAddOnInputFocus}\r\n            />\r\n            <Checkbox\r\n              label=\'onKeyDown\'\r\n              checked={addOnKeyDown}\r\n              onCheck={setAddOnKeyDown}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              options={options}\r\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\r\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\r\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\r\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\r\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\r\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Methods = () => {\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const blurSelect = (): void => {\r\n    selectRef.current && selectRef.current.blur();\r\n  };\r\n\r\n  const focusSelect = (): void => {\r\n    selectRef.current && selectRef.current.focus();\r\n  };\r\n\r\n  const clearValue = (): void => {\r\n    selectRef.current && selectRef.current.clearValue();\r\n  };\r\n\r\n  const toggleMenuOpen = (): void => {\r\n    selectRef.current && selectRef.current.toggleMenu(true);\r\n  };\r\n\r\n  const updateSelectedOption = (): void => {\r\n    selectRef.current && selectRef.current.setValue(options[0]);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Methods</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Five public methods are exposed to wrapping components and are\r\n        accessible via a forwarded <code>ref</code>.\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>blur(): void</TextHeader> - blur the control\r\n            programatically\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>focus(): void</TextHeader> - focus the control\r\n            programatically\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> - toggle\r\n            the menu programatically\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\r\n            value programatically <em>(if an option is selected)</em>\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\r\n            value programatically <em>(option will be validated)</em>\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader supportMobile>\r\n          <ButtonGroup>\r\n            <Label>Methods</Label>\r\n            <Button onClick={focusSelect}>Focus</Button>\r\n            <Button onClick={blurSelect}>Blur</Button>\r\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\r\n            <Button onClick={clearValue}>Clear Value</Button>\r\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\r\n          </ButtonGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              ref={selectRef}\r\n              options={options}\r\n              initialValue={options[0]}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Filtering = () => {\r\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\r\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\r\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\r\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\r\n\r\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: \'São Paulo\', state: \'BR\' }], []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Filter Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        The default filtering functionality can be customized via the following\r\n        properties:\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\r\n            case when matching strings. Default value is <code>true</code>.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\r\n            ignores accents when matching strings. Default value is <code>false</code>.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>filterMatchFrom?: \'any\' | \'start\'</TextHeader> -\r\n            Position in source string to perform match. Default value is <code>\'any\'</code>.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\r\n            When defined will take each option and generate a string used in\r\n            the filtering process. By default, the stringified version of what\r\n            is generated by <code>getOptionLabel</code>, if definded, or the\r\n            option\'s label as a fallback. The <code>MenuOption</code> typed\r\n            parameter that <code>getFilterOptionString</code> accepts contains a{\' \'}\r\n            <code>data</code> property that represents the objects that comprise\r\n            your <code>options</code> property.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label="Ignore Case"\r\n              checked={filterIgnoreCase}\r\n              onCheck={setFilterIgnoreCase}\r\n            />\r\n            <Checkbox\r\n              label="Ignore Accents"\r\n              checked={filterIgnoreAccents}\r\n              onCheck={setFilterIgnoreAccents}\r\n            />\r\n            <Checkbox\r\n              label="Match from the start"\r\n              checked={filterMatchFromStart}\r\n              onCheck={setFilterMatchFromStart}\r\n            />\r\n            <Checkbox\r\n              label="Use custom filter function (by state only)"\r\n              checked={useCustomFilterFunc}\r\n              onCheck={setUseCustomFilterFunc}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isClearable\r\n              options={options}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              filterIgnoreCase={filterIgnoreCase}\r\n              filterIgnoreAccents={filterIgnoreAccents}\r\n              getFilterOptionString={\r\n                useCustomFilterFunc ? getFilterOptionString : undefined\r\n              }\r\n              filterMatchFrom={\r\n                filterMatchFromStart\r\n                  ? FilterMatchEnum.START\r\n                  : FilterMatchEnum.ANY\r\n              }\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Windowing = () => {\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n\r\n  const [options, setOptions] = useState<Option[]>([]);\r\n  const [optionsCount, setOptionsCount] = useState<number>(100);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      const nextOptions = createSelectOptions(optionsCount);\r\n      setOptions(nextOptions);\r\n    }, 115);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [optionsCount]);\r\n\r\n  useEffect(() => {\r\n    if (selectRef.current) {\r\n      selectRef.current.clearValue();\r\n    }\r\n  }, [options]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Integrated Windowing</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Option data is \'windowed\' using the <PackageLink {...REACT_WINDOW_PACKAGE} /> package.\r\n        Aside from the obvious benefits provided by only rendering a small subset of your\r\n        enumerable data (rather than bloating the DOM with an excessive amount of nodes),\r\n        \'windowing\' can also assist with:\r\n        <List>\r\n          <ListItem>\r\n            <strong>Efficient memory allocation</strong>. \'Windowing\' naturally\r\n            lends itself to the dynamic generation of attributes/values as each\r\n            object comes into your renderer\'s scope (as opposed to allocating\r\n            this data upfront for each object in your list). This way you can\r\n            perform this work just when you absolutely need to and then can\r\n            immediately release it for the GC to cleanup. As an example I am\r\n            generating the <code>onClick</code>, <code>id</code>,\r\n            and <code>className</code> attributes for each <code>menuOption</code> as\r\n            they get passed to the <code>&lt;Option /&gt;</code> renderer component.\r\n          </ListItem>\r\n          <ListItem>\r\n            <strong>Functional architecture</strong>. The flexibility provided\r\n            through only having to manage subsets of your list allows for a more\r\n            dynamic application. By breaking your code out into smaller, \'pure\'\r\n            child components, you can write code that scales well and becomes\r\n            open to performance optimizations - most notably, memoization.\r\n            Simple components that rely on the props passed to it (rather than\r\n            its own managed state) to generate its JSX are likely candidates for\r\n            memoization (testing &amp; debugging becomes much easier as well).\r\n          </ListItem>\r\n        </List>\r\n        <em>Note: </em>The only time any noticeable performance degradation will be observed\r\n        is during search input updates when the <code>options</code> count reaches the high\r\n        tens of thousands. To work around this, the <code>inputDelay</code> (number in milliseconds)\r\n        can be set to debounce the input value. That way, the <code>menuOptions</code> will not be\r\n        recalculated on every keystroke.\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader supportMobile>\r\n          <ButtonGroup>\r\n            <Label>Options Count</Label>\r\n            <OptionsCountButton\r\n              count={100}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n            <OptionsCountButton\r\n              count={1000}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n            <OptionsCountButton\r\n              count={5000}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n            <OptionsCountButton\r\n              count={25000}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n          </ButtonGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select ref={selectRef} options={options} />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Advanced = () => {\r\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\r\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => (option.name === PACKAGE_OPTIONS[3].name), []);\r\n\r\n  const renderOptionLabel = useCallback(\r\n    (option: PackageOption): ReactNode => (\r\n      <OptionContainer>\r\n        <OptionImg src={REACT_LOGO_SVG} isDisabled={getIsOptionDisabled(option)} />\r\n        <OptionName>{option.name}</OptionName>\r\n      </OptionContainer>\r\n    ),\r\n    [getIsOptionDisabled]\r\n  );\r\n\r\n  const customCaretIcon = useCallback(\r\n    ({ menuOpen }): ReactNode => (\r\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden=\'true\' viewBox=\'0 0 448 512\'>\r\n        <path d={CHEVRON_SVG_PATH} />\r\n      </ChevronDownSvg>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Advanced Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Implementation using a couple of the more specialized properties.\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\r\n            function with a return type of <code>ReactNode</code>. Use this property in cases\r\n            where the standard <code>getOptionLabel</code> property won\'t meet your needs (for\r\n            instance, you want to render each option\'s label using custom JSX). More complex\r\n            option labels will likely equate to longer render durations - this can translate\r\n            into a flash of empty space when a user first starts scrolling. In order to prevent\r\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\r\n            rows outside of the visible area. The default value for this property is 1 and it is\r\n            important to note that increasing this value can negatively impact performance.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\r\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\r\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\r\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\r\n            options - they cannot both be specified.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\r\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\r\n            When using a function, an object containing stateful data is forwarded and can be used to style\r\n            your custom node accordingly. The state is <code>{\'{ menuOpen, isLoading, isInvalid, isDisabled }\'}</code> of\r\n            type <code>{\'Record<string, boolean>\'}</code>. The <code>clearIcon</code> property has an identical definition.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelHeader>JSX labels, custom caret icon, and disabled option</LabelHeader>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isSearchable={false}\r\n              options={PACKAGE_OPTIONS}\r\n              themeConfig={THEME_CONFIG}\r\n              caretIcon={customCaretIcon}\r\n              getOptionValue={getOptionValue}\r\n              renderOptionLabel={renderOptionLabel}\r\n              getIsOptionDisabled={getIsOptionDisabled}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};;\r\n\r\nexport const Async = () => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, \'Initial\'));\r\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\r\n\r\n  const onSearchChange = useCallback((value: string): void => {\r\n    mockHttpRequest()\r\n      .then(() => {\r\n        const count = getRandomInt(1, 5);\r\n        const nextOptions = createAsyncOptions(count, `Search text: ${value || \'Initial\'}`);\r\n        setOptions(nextOptions);\r\n      })\r\n      .catch((e) => console.error(e))\r\n      .then(() => setIsLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Async Mode</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>async</code> property to enable async mode. There is one key difference\r\n        in core functionality with async mode - changes to search input value will not cause\r\n        the <code>useMenuOptions</code> effect to run. The rest of hooking into async mode is\r\n        achieved using some combination of the properties found below\r\n        . <em>Properties onInputChange and onSearchChange should be memoized.</em>\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            callback executed directly following the input control\'s <code>onChange</code> event.\r\n            This callback is not debounced, so it fires immediately. This is a good\r\n            place to set a stateful loading property in your parent component that is mapped to\r\n            react-functional-select\'s <code>isLoading</code> property.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            callback executed following component state updates for\r\n            the <code>debouncedInputValue</code>. The debounce is set using\r\n            the <code>inputDelay</code> property. This callback is a good place for your\r\n            http fetch request and post-request logic (i.e. setting isLoading false).\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\r\n            set to a positive integer in order to debounce updates to the search input value\r\n            following input change events. This property directly maps to the <code>delay</code> in\r\n            milliconds passed to the <code>setTimeout</code> method.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\r\n            appear in the far-right of the control and take the place of the clear icon (if shown).\r\n            Additionally, it will hide options in the menu and instead, display a loading message.\r\n            The loading message text defaults to \'Loading...\', but can be overriden via\r\n            the <code>loadingMsg</code> property.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelNote>Search debounced 375ms and mock HTTP call resolves after 500ms</LabelNote>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              async\r\n              isClearable\r\n              inputDelay={375}\r\n              options={options}\r\n              isLoading={isLoading}\r\n              onInputChange={onInputChange}\r\n              onSearchChange={onSearchChange}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};',locationsMap:{"single-select":{startLoc:{col:28,line:54},endLoc:{col:1,line:139},startBody:{col:28,line:54},endBody:{col:1,line:139}},"multi-select":{startLoc:{col:27,line:141},endLoc:{col:1,line:255},startBody:{col:27,line:141},endBody:{col:1,line:255}},styling:{startLoc:{col:23,line:257},endLoc:{col:1,line:382},startBody:{col:23,line:257},endBody:{col:1,line:382}},events:{startLoc:{col:22,line:384},endLoc:{col:1,line:506},startBody:{col:22,line:384},endBody:{col:1,line:506}},methods:{startLoc:{col:23,line:508},endLoc:{col:1,line:587},startBody:{col:23,line:508},endBody:{col:1,line:587}},filtering:{startLoc:{col:25,line:589},endLoc:{col:1,line:683},startBody:{col:25,line:589},endBody:{col:1,line:683}},windowing:{startLoc:{col:25,line:685},endLoc:{col:1,line:782},startBody:{col:25,line:685},endBody:{col:1,line:782}},advanced:{startLoc:{col:24,line:784},endLoc:{col:1,line:863},startBody:{col:24,line:784},endBody:{col:1,line:863}},async:{startLoc:{col:21,line:865},endLoc:{col:1,line:943},startBody:{col:21,line:865},endBody:{col:1,line:943}}}}},"storySource",{source:"import React, { useMemo, useRef, useState, useEffect, useCallback, Fragment, FocusEvent, KeyboardEvent, ReactNode } from 'react';\r\nimport { CityOption, Option, PackageOption } from './helpers/types';\r\nimport { useCallbackState, useClearToastsOnUnmount } from './helpers/hooks';\r\nimport { Select, MultiParams, Theme, MenuOption, SelectRef, FilterMatchEnum } from '../src';\r\nimport { Checkbox, CodeMarkup, PackageLink, OptionsCountButton } from './helpers/components';\r\nimport { mockHttpRequest, getRandomInt, createAsyncOptions, createSelectOptions, stringifyJavaScriptObj, renderInfoToast } from './helpers/utils';\r\nimport { CITY_OPTIONS, PACKAGE_OPTIONS, REACT_WINDOW_PACKAGE, CLASS_NAME_HTML, STYLED_COMPONENTS_PACKAGE, ThemeEnum, ThemeConfigMap, THEME_DEFAULTS, OPTIONS, SELECT_CONTAINER_STYLE, THEME_CONFIG } from './helpers/constants';\r\nimport { OPTION_CLS, OPTION_FOCUSED_CLS, OPTION_DISABLED_CLS, OPTION_SELECTED_CLS, CARET_ICON_CLS, CLEAR_ICON_CLS, LOADING_DOTS_CLS, AUTOSIZE_INPUT_CLS, MENU_CONTAINER_CLS, SELECT_CONTAINER_CLS, CONTROL_CONTAINER_CLS } from '../src/constants/dom';\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Hr,\r\n  Title,\r\n  SubTitle,\r\n  Label,\r\n  LabelHeader,\r\n  LabelNote,\r\n  Columns,\r\n  Column,\r\n  Content,\r\n  Container,\r\n  List,\r\n  ListItem,\r\n  ListWrapper,\r\n  SelectContainer,\r\n  Paragraph,\r\n  TextHeader,\r\n  CheckboxGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  OtherSpan,\r\n  OptionContainer,\r\n  OptionName,\r\n  OptionImg,\r\n  ChevronDownSvg\r\n} from './helpers/styled';\r\n\r\nconst REACT_LOGO_SVG = require('./assets/react-logo.svg') as string;\r\nconst CHEVRON_SVG_PATH = 'M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z';\r\n\r\nexport default {\r\n  title: 'React Functional Select'\r\n};\r\n\r\nexport const SingleSelect = () => {\r\n  const [isInvalid, setIsInvalid] = useCallbackState(false);\r\n  const [isLoading, setIsLoading] = useCallbackState(false);\r\n  const [isDisabled, setIsDisabled] = useCallbackState(false);\r\n  const [isClearable, setIsClearable] = useCallbackState(true);\r\n  const [isSearchable, setIsSearchable] = useCallbackState(true);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  useEffect(() => {\r\n    isDisabled && setIsInvalid(false);\r\n  }, [isDisabled]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Single-select</Title>\r\n      <Hr />\r\n      <Paragraph>\r\n        In this story's source code, notice that the callback function\r\n        properties <code>getOptionValue</code> and <code>getOptionLabel</code> are\r\n        wrapped in a <code>useCallback</code>. While not required, <em> strongly prefer </em>\r\n        memoization of any callback function property whenever possible. This will boost\r\n        performance and reduce the amount of renders as these properties are referenced\r\n        in the dependency arrays of <code>useCallbacks</code>, <code>useEffects</code>,\r\n        and <code>useMemos</code>. When defined in a functional component, wrap in\r\n        a <code>useCallback</code>; when defined in a legacy class component, ensure proper\r\n        binding to <code>this</code>. Alternatively, if there is no dependency on any state,\r\n        you can opt to hoist functions outside of the component entirely.\r\n      </Paragraph>\r\n      <Paragraph>\r\n        The <code>options</code> property should also be memoized. Either consume\r\n        it directly from a state management store, or make sure it is stable by\r\n        avoiding inline or render-based mutations.\r\n      </Paragraph>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label='Searchable'\r\n              checked={isSearchable}\r\n              onCheck={setIsSearchable}\r\n            />\r\n            <Checkbox\r\n              label='Clearable'\r\n              checked={isClearable}\r\n              onCheck={setIsClearable}\r\n            />\r\n            <Checkbox\r\n              label='Disabled'\r\n              checked={isDisabled}\r\n              onCheck={setIsDisabled}\r\n            />\r\n            <Checkbox\r\n              label='Invalid'\r\n              checked={isInvalid}\r\n              readOnly={isDisabled}\r\n              onCheck={setIsInvalid}\r\n            />\r\n            <Checkbox\r\n              label='Loading'\r\n              checked={isLoading}\r\n              onCheck={setIsLoading}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isLoading={isLoading}\r\n              isInvalid={isInvalid}\r\n              options={CITY_OPTIONS}\r\n              isDisabled={isDisabled}\r\n              isClearable={isClearable}\r\n              isSearchable={isSearchable}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const MultiSelect = () => {\r\n  const [openMenuOnClick, setOpenMenuOnClick] = useCallbackState(true);\r\n  const [closeMenuOnSelect, setCloseMenuOnSelect] = useCallbackState(true);\r\n  const [blurInputOnSelect, setBlurInputOnSelect] = useCallbackState(false);\r\n  const [hideSelectedOptions, setHideSelectedOptions] = useCallbackState(true);\r\n  const [useRenderMultiOptions, setUseRenderMultiOptions] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n\r\n  // Example \"renderMultiOptions\" property that can be used to further customize labeling for multi-option scenarios\r\n  const renderMultiOptions = useCallback(\r\n    ({ selected, renderOptionLabel }: MultiParams): ReactNode => (\r\n      <Fragment>\r\n        {selected.length && renderOptionLabel(selected[0].data)}\r\n        {selected.length > 1 && (\r\n          <OtherSpan>\r\n            {`(+${selected.length - 1} ${selected.length === 2 ? 'other' : 'others'})`}\r\n          </OtherSpan>\r\n        )}\r\n      </Fragment>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Multi-select</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>isMulti</code> property to allow for multiple selections.\r\n        While in multi-select mode, some properties are now applicable and\r\n        others become more pertinent.\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>hideSelectedOptions?: boolean</TextHeader> - Hide the\r\n            selected option from the menu. Default value is false, however, if\r\n            undefined and <code>isMulti === true</code>, then its value defaults\r\n            to true.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>closeMenuOnSelect?: boolean</TextHeader> - Close the\r\n            menu of options when the user selects an option. Default value is\r\n            false, however, it may be benefical to set this property to true for\r\n            convenience in multi-select scenarios.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>renderMultiOptions(params: MultiParams): ReactNode</TextHeader> -\r\n            Optional callback function that can be used to further customize\r\n            the selection label in multi-select scenarios . <code>params</code>{' '}\r\n            is an object that contains the <code>selected</code> and{' '}\r\n            <code>renderOptionLabel</code> properties (array of selected options\r\n            and function used to render individual option labels, respectively).\r\n            When this function is defined, left and right arrow navigation of\r\n            individual options is disabled. When using this property, it may be\r\n            be a good idea to set the property <code>backspaceClearsValue</code>{' '}\r\n            to <em>false</em> in order to avoid accidentally clearing all\r\n            selections when searching.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label='closeMenuOnSelect'\r\n              checked={closeMenuOnSelect}\r\n              onCheck={setCloseMenuOnSelect}\r\n            />\r\n            <Checkbox\r\n              label='hideSelectedOptions'\r\n              checked={hideSelectedOptions}\r\n              onCheck={setHideSelectedOptions}\r\n            />\r\n            <Checkbox\r\n              label='blurInputOnSelect'\r\n              checked={blurInputOnSelect}\r\n              onCheck={setBlurInputOnSelect}\r\n            />\r\n            <Checkbox\r\n              label='openMenuOnClick (click caret if false)'\r\n              checked={openMenuOnClick}\r\n              onCheck={setOpenMenuOnClick}\r\n            />\r\n            <Checkbox\r\n              label='renderMultiOptions (custom renderer)'\r\n              checked={useRenderMultiOptions}\r\n              onCheck={setUseRenderMultiOptions}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isMulti\r\n              isClearable\r\n              isSearchable\r\n              options={CITY_OPTIONS}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              openMenuOnClick={openMenuOnClick}\r\n              blurInputOnSelect={blurInputOnSelect}\r\n              closeMenuOnSelect={closeMenuOnSelect}\r\n              hideSelectedOptions={hideSelectedOptions}\r\n              backspaceClearsValue={!useRenderMultiOptions}\r\n              renderMultiOptions={useRenderMultiOptions ? renderMultiOptions : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Styling = () => {\r\n  const [themeConfig, setThemeConfig] = useState<Theme | undefined>(undefined);\r\n  const [selectedOption, setSelectedOption] = useCallbackState<Option | null>(null);\r\n  const menuItemSize = (selectedOption && selectedOption.value === ThemeEnum.LARGE_TEXT) ? 44 : 35;\r\n\r\n  const memoizedMarkupNode = useMemo<ReactNode>(() => (\r\n    <CodeMarkup\r\n      language='markup'\r\n      header='Class Markup'\r\n      data={CLASS_NAME_HTML}\r\n    />\r\n  ), []);\r\n\r\n  useEffect(() => {\r\n    if (selectedOption) {\r\n      const { value } = selectedOption;\r\n      setThemeConfig(ThemeConfigMap[value]);\r\n    }\r\n  }, [selectedOption]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Styling</Title>\r\n      <Hr />\r\n      <SubTitle>Theming</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            react-functional-select uses{' '}\r\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> to handle its\r\n            styling. The root node is wrapped in styled-component's{' '}\r\n            <code>ThemeProvider</code> wrapper component which gives all child\r\n            styled-components access to the provided theme via React's context\r\n            API. To override react-functional-select's default theme, pass an\r\n            object to the <code>themeConfig</code> property - any matching\r\n            properties will replace those in the default theme.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.0.0</strong>, some of the nested objects in\r\n            the <code>themeConfig</code> object contain a <code>css</code>{' '}\r\n            property of type{' '}\r\n            <code>string | FlattenSimpleInterpolation | undefined</code>{' '}\r\n            (default value is undefined). This property can be used to pass raw\r\n            CSS styles as a string or wrapped in{' '}\r\n            <PackageLink {...STYLED_COMPONENTS_PACKAGE} /> exported{' '}\r\n            <code>css</code> function. Those objects are: select, control, icon,\r\n            menu, noOptions, multiValue, and input.\r\n          </Content>\r\n          <Content>\r\n            Starting in <strong>v2.7.0</strong>, the control object in{' '}\r\n            <code>themeConfig</code> has the property <code>focusedCss</code> -\r\n            which is similar to the <code>css</code> property, except that it is\r\n            only applied when the select control is focused (and removed when\r\n            blurred).\r\n          </Content>\r\n        </Column>\r\n        <Column widthPercent={60}>\r\n          <CodeMarkup\r\n            textColor=\"#79b6f2\"\r\n            language=\"javascript\"\r\n            data={THEME_DEFAULTS}\r\n            header=\"Theme Defaults\"\r\n            formatFn={stringifyJavaScriptObj}\r\n          />\r\n        </Column>\r\n      </Columns>\r\n      <SubTitle>Using Classes</SubTitle>\r\n      <Columns>\r\n        <Column widthPercent={40}>\r\n          <Content>\r\n            If you want to style the component using CSS classes, set the{' '}\r\n            <code>addClassNames</code> prop to true and it will then generate{' '}\r\n            <code>className</code> attributes for that specific instance of the\r\n            component. These are the classes that are available:\r\n          </Content>\r\n          <ListWrapper className=\"is-class-list\">\r\n            <List>\r\n              <ListItem>{SELECT_CONTAINER_CLS}</ListItem>\r\n              <ListItem>{CONTROL_CONTAINER_CLS}</ListItem>\r\n              <ListItem>{MENU_CONTAINER_CLS}</ListItem>\r\n              <ListItem>{AUTOSIZE_INPUT_CLS}</ListItem>\r\n              <ListItem>{CARET_ICON_CLS}</ListItem>\r\n              <ListItem>{CLEAR_ICON_CLS}</ListItem>\r\n              <ListItem>{LOADING_DOTS_CLS}</ListItem>\r\n              <ListItem>{`${OPTION_CLS}, ${OPTION_FOCUSED_CLS}, ${OPTION_SELECTED_CLS}, ${OPTION_DISABLED_CLS}`}</ListItem>\r\n            </List>\r\n          </ListWrapper>\r\n        </Column>\r\n        <Column widthPercent={60}>{memoizedMarkupNode}</Column>\r\n      </Columns>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelHeader>Try selecting themeConfig objects below</LabelHeader>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Columns>\r\n            <Column widthPercent={40}>\r\n              <div style={SELECT_CONTAINER_STYLE}>\r\n                <Select\r\n                  options={OPTIONS}\r\n                  isClearable={false}\r\n                  isSearchable={false}\r\n                  themeConfig={themeConfig}\r\n                  initialValue={OPTIONS[0]}\r\n                  menuItemSize={menuItemSize}\r\n                  onOptionChange={setSelectedOption}\r\n                />\r\n              </div>\r\n            </Column>\r\n            <Column widthPercent={60}>\r\n              <CodeMarkup\r\n                data={themeConfig}\r\n                textColor=\"#79b6f2\"\r\n                language=\"javascript\"\r\n                header=\"theme-config\"\r\n                formatFn={stringifyJavaScriptObj}\r\n              />\r\n            </Column>\r\n          </Columns>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Events = () => {\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const [addOnKeyDown, setAddOnKeyDown] = useCallbackState(false);\r\n  const [addOnMenuOpen, setAddOnMenuOpen] = useCallbackState(true);\r\n  const [addOnMenuClose, setAddOnMenuClose] = useCallbackState(false);\r\n  const [addOnInputBlur, setAddOnInputBlur] = useCallbackState(false);\r\n  const [addOnInputFocus, setAddOnInputFocus] = useCallbackState(false);\r\n  const [addOnOptionChange, setAddOnOptionChange] = useCallbackState(true);\r\n\r\n  const onOptionChange = useCallback((option: Option | null): void => {\r\n    const optionJsonStr = JSON.stringify(option || {}).replace(/\"/g, \"'\");\r\n    renderInfoToast(`Selected Option: ${optionJsonStr}`);\r\n  }, []);\r\n\r\n  const onMenuOpen = useCallback((...args: any[]): void => renderInfoToast('Menu opened!'), []);\r\n  const onMenuClose = useCallback((...args: any[]): void => renderInfoToast('Menu closed!'), []);\r\n  const onInputBlur = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast('Control blurred!'), []);\r\n  const onInputFocus = useCallback((e: FocusEvent<HTMLInputElement>): void => renderInfoToast('Control focused!'), []);\r\n  const onKeyDown = useCallback((e: KeyboardEvent<HTMLDivElement>): void => renderInfoToast('keydown event executed!'), []);\r\n\r\n  useClearToastsOnUnmount();\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Events</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        There are various callback function properties that are executed following\r\n        their associated events:\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>onOptionChange(data: any): void</TextHeader> -\r\n            executed after an option is selected or removed\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onMenuOpen(...args: any[]): void</TextHeader> -\r\n            executed after the menu is opened\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onMenuClose(...args: any[]): void</TextHeader> -\r\n            executed after the menu is closed\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            executed after the input control's value changes\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onInputBlur(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is blurred\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onInputFocus(e: FocusEvent&lt;HTMLInputElement&gt;): void</TextHeader> -\r\n            executed after the input control is focused\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onKeyDown(e: KeyboardEvent&lt;HTMLDivElement&gt;, input?: string, focusedOption?: FocusedOption): void</TextHeader> -\r\n            executed after the onKeyDown event\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            executed after the input value is persisted to state; this value also evaluates\r\n            the <code>inputDelay</code> property for debouncing - this callback is really only\r\n            useful when <code>inputDelay</code> is defined, and if not, it probably makes more\r\n            sense to use the <code>onInputChange</code> callback\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelNote>Events in demo will trigger a toast notification</LabelNote>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label='onOptionChange'\r\n              checked={addOnOptionChange}\r\n              onCheck={setAddOnOptionChange}\r\n            />\r\n            <Checkbox\r\n              label='onMenuOpen'\r\n              checked={addOnMenuOpen}\r\n              onCheck={setAddOnMenuOpen}\r\n            />\r\n            <Checkbox\r\n              label='onMenuClose'\r\n              checked={addOnMenuClose}\r\n              onCheck={setAddOnMenuClose}\r\n            />\r\n            <Checkbox\r\n              label='onInputBlur'\r\n              checked={addOnInputBlur}\r\n              onCheck={setAddOnInputBlur}\r\n            />\r\n            <Checkbox\r\n              label='onInputFocus'\r\n              checked={addOnInputFocus}\r\n              onCheck={setAddOnInputFocus}\r\n            />\r\n            <Checkbox\r\n              label='onKeyDown'\r\n              checked={addOnKeyDown}\r\n              onCheck={setAddOnKeyDown}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              options={options}\r\n              onKeyDown={addOnKeyDown ? onKeyDown : undefined}\r\n              onMenuOpen={addOnMenuOpen ? onMenuOpen : undefined}\r\n              onMenuClose={addOnMenuClose ? onMenuClose : undefined}\r\n              onInputBlur={addOnInputBlur ? onInputBlur : undefined}\r\n              onInputFocus={addOnInputFocus ? onInputFocus : undefined}\r\n              onOptionChange={addOnOptionChange ? onOptionChange : undefined}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Methods = () => {\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n  const options = useMemo<Option[]>(() => createSelectOptions(5), []);\r\n\r\n  const blurSelect = (): void => {\r\n    selectRef.current && selectRef.current.blur();\r\n  };\r\n\r\n  const focusSelect = (): void => {\r\n    selectRef.current && selectRef.current.focus();\r\n  };\r\n\r\n  const clearValue = (): void => {\r\n    selectRef.current && selectRef.current.clearValue();\r\n  };\r\n\r\n  const toggleMenuOpen = (): void => {\r\n    selectRef.current && selectRef.current.toggleMenu(true);\r\n  };\r\n\r\n  const updateSelectedOption = (): void => {\r\n    selectRef.current && selectRef.current.setValue(options[0]);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Methods</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Five public methods are exposed to wrapping components and are\r\n        accessible via a forwarded <code>ref</code>.\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>blur(): void</TextHeader> - blur the control\r\n            programatically\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>focus(): void</TextHeader> - focus the control\r\n            programatically\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>toggleMenu(state?: boolean): void</TextHeader> - toggle\r\n            the menu programatically\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>clearValue(): void</TextHeader> - clear the current\r\n            value programatically <em>(if an option is selected)</em>\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>setValue(option?: any): void</TextHeader> - set the\r\n            value programatically <em>(option will be validated)</em>\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader supportMobile>\r\n          <ButtonGroup>\r\n            <Label>Methods</Label>\r\n            <Button onClick={focusSelect}>Focus</Button>\r\n            <Button onClick={blurSelect}>Blur</Button>\r\n            <Button onClick={toggleMenuOpen}>Open Menu</Button>\r\n            <Button onClick={clearValue}>Clear Value</Button>\r\n            <Button onClick={updateSelectedOption}>Set Value (1st Option)</Button>\r\n          </ButtonGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              ref={selectRef}\r\n              options={options}\r\n              initialValue={options[0]}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Filtering = () => {\r\n  const [filterIgnoreCase, setFilterIgnoreCase] = useCallbackState(true);\r\n  const [useCustomFilterFunc, setUseCustomFilterFunc] = useCallbackState(false);\r\n  const [filterIgnoreAccents, setFilterIgnoreAccents] = useCallbackState(false);\r\n  const [filterMatchFromStart, setFilterMatchFromStart] = useCallbackState(false);\r\n\r\n  const getOptionValue = useCallback((option: CityOption): number => option.id, []);\r\n  const getOptionLabel = useCallback((option: CityOption): string => `${option.city}, ${option.state}`, []);\r\n  const getFilterOptionString = useCallback((menuOption: MenuOption): string => menuOption.data.state, []);\r\n\r\n  const options = useMemo<CityOption[]>(() => [...CITY_OPTIONS, { id: 11, city: 'São Paulo', state: 'BR' }], []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Filter Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        The default filtering functionality can be customized via the following\r\n        properties:\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>filterIgnoreCase?: boolean</TextHeader> - Filter ignores\r\n            case when matching strings. Default value is <code>true</code>.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>filterIgnoreAccents?: boolean</TextHeader> - Filter\r\n            ignores accents when matching strings. Default value is <code>false</code>.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>filterMatchFrom?: 'any' | 'start'</TextHeader> -\r\n            Position in source string to perform match. Default value is <code>'any'</code>.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>getFilterOptionString(option: MenuOption): string</TextHeader> -\r\n            When defined will take each option and generate a string used in\r\n            the filtering process. By default, the stringified version of what\r\n            is generated by <code>getOptionLabel</code>, if definded, or the\r\n            option's label as a fallback. The <code>MenuOption</code> typed\r\n            parameter that <code>getFilterOptionString</code> accepts contains a{' '}\r\n            <code>data</code> property that represents the objects that comprise\r\n            your <code>options</code> property.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <CheckboxGroup>\r\n            <Checkbox\r\n              label=\"Ignore Case\"\r\n              checked={filterIgnoreCase}\r\n              onCheck={setFilterIgnoreCase}\r\n            />\r\n            <Checkbox\r\n              label=\"Ignore Accents\"\r\n              checked={filterIgnoreAccents}\r\n              onCheck={setFilterIgnoreAccents}\r\n            />\r\n            <Checkbox\r\n              label=\"Match from the start\"\r\n              checked={filterMatchFromStart}\r\n              onCheck={setFilterMatchFromStart}\r\n            />\r\n            <Checkbox\r\n              label=\"Use custom filter function (by state only)\"\r\n              checked={useCustomFilterFunc}\r\n              onCheck={setUseCustomFilterFunc}\r\n            />\r\n          </CheckboxGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isClearable\r\n              options={options}\r\n              getOptionValue={getOptionValue}\r\n              getOptionLabel={getOptionLabel}\r\n              filterIgnoreCase={filterIgnoreCase}\r\n              filterIgnoreAccents={filterIgnoreAccents}\r\n              getFilterOptionString={\r\n                useCustomFilterFunc ? getFilterOptionString : undefined\r\n              }\r\n              filterMatchFrom={\r\n                filterMatchFromStart\r\n                  ? FilterMatchEnum.START\r\n                  : FilterMatchEnum.ANY\r\n              }\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Windowing = () => {\r\n  const selectRef = useRef<SelectRef | null>(null);\r\n\r\n  const [options, setOptions] = useState<Option[]>([]);\r\n  const [optionsCount, setOptionsCount] = useState<number>(100);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      const nextOptions = createSelectOptions(optionsCount);\r\n      setOptions(nextOptions);\r\n    }, 115);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [optionsCount]);\r\n\r\n  useEffect(() => {\r\n    if (selectRef.current) {\r\n      selectRef.current.clearValue();\r\n    }\r\n  }, [options]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Integrated Windowing</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Option data is 'windowed' using the <PackageLink {...REACT_WINDOW_PACKAGE} /> package.\r\n        Aside from the obvious benefits provided by only rendering a small subset of your\r\n        enumerable data (rather than bloating the DOM with an excessive amount of nodes),\r\n        'windowing' can also assist with:\r\n        <List>\r\n          <ListItem>\r\n            <strong>Efficient memory allocation</strong>. 'Windowing' naturally\r\n            lends itself to the dynamic generation of attributes/values as each\r\n            object comes into your renderer's scope (as opposed to allocating\r\n            this data upfront for each object in your list). This way you can\r\n            perform this work just when you absolutely need to and then can\r\n            immediately release it for the GC to cleanup. As an example I am\r\n            generating the <code>onClick</code>, <code>id</code>,\r\n            and <code>className</code> attributes for each <code>menuOption</code> as\r\n            they get passed to the <code>&lt;Option /&gt;</code> renderer component.\r\n          </ListItem>\r\n          <ListItem>\r\n            <strong>Functional architecture</strong>. The flexibility provided\r\n            through only having to manage subsets of your list allows for a more\r\n            dynamic application. By breaking your code out into smaller, 'pure'\r\n            child components, you can write code that scales well and becomes\r\n            open to performance optimizations - most notably, memoization.\r\n            Simple components that rely on the props passed to it (rather than\r\n            its own managed state) to generate its JSX are likely candidates for\r\n            memoization (testing &amp; debugging becomes much easier as well).\r\n          </ListItem>\r\n        </List>\r\n        <em>Note: </em>The only time any noticeable performance degradation will be observed\r\n        is during search input updates when the <code>options</code> count reaches the high\r\n        tens of thousands. To work around this, the <code>inputDelay</code> (number in milliseconds)\r\n        can be set to debounce the input value. That way, the <code>menuOptions</code> will not be\r\n        recalculated on every keystroke.\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader supportMobile>\r\n          <ButtonGroup>\r\n            <Label>Options Count</Label>\r\n            <OptionsCountButton\r\n              count={100}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n            <OptionsCountButton\r\n              count={1000}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n            <OptionsCountButton\r\n              count={5000}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n            <OptionsCountButton\r\n              count={25000}\r\n              optionsCount={optionsCount}\r\n              setOptionsCount={setOptionsCount}\r\n            />\r\n          </ButtonGroup>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select ref={selectRef} options={options} />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Advanced = () => {\r\n  const getOptionValue = useCallback((option: PackageOption): number => option.id, []);\r\n  const getIsOptionDisabled = useCallback((option: PackageOption): boolean => (option.name === PACKAGE_OPTIONS[3].name), []);\r\n\r\n  const renderOptionLabel = useCallback(\r\n    (option: PackageOption): ReactNode => (\r\n      <OptionContainer>\r\n        <OptionImg src={REACT_LOGO_SVG} isDisabled={getIsOptionDisabled(option)} />\r\n        <OptionName>{option.name}</OptionName>\r\n      </OptionContainer>\r\n    ),\r\n    [getIsOptionDisabled]\r\n  );\r\n\r\n  const customCaretIcon = useCallback(\r\n    ({ menuOpen }): ReactNode => (\r\n      <ChevronDownSvg menuOpen={menuOpen} aria-hidden='true' viewBox='0 0 448 512'>\r\n        <path d={CHEVRON_SVG_PATH} />\r\n      </ChevronDownSvg>\r\n    ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Advanced Customization</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Implementation using a couple of the more specialized properties.\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>renderOptionLabel(option: any): React.ReactNode</TextHeader> - Callback\r\n            function with a return type of <code>ReactNode</code>. Use this property in cases\r\n            where the standard <code>getOptionLabel</code> property won't meet your needs (for\r\n            instance, you want to render each option's label using custom JSX). More complex\r\n            option labels will likely equate to longer render durations - this can translate\r\n            into a flash of empty space when a user first starts scrolling. In order to prevent\r\n            this, the <code>menuOverscanCount</code> property can be increased to render additional\r\n            rows outside of the visible area. The default value for this property is 1 and it is\r\n            important to note that increasing this value can negatively impact performance.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>getIsOptionDisabled(option: any): boolean</TextHeader> - Callback\r\n            function with a return type of <code>Boolean</code>. When it evaluates to a value of\r\n            true, that option iteration will be rendered <em>disabled</em>. As an alternative, you\r\n            can also pass a property of <code>isDisabled</code> with each option. Use of these two\r\n            options - they cannot both be specified.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>caretIcon: ReactNode | (...args: any[]) =&gt; ReactNode</TextHeader> - A custom\r\n            node or a function that returns a node can used for the <code>caretIcon</code> property.\r\n            When using a function, an object containing stateful data is forwarded and can be used to style\r\n            your custom node accordingly. The state is <code>{'{ menuOpen, isLoading, isInvalid, isDisabled }'}</code> of\r\n            type <code>{'Record<string, boolean>'}</code>. The <code>clearIcon</code> property has an identical definition.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelHeader>JSX labels, custom caret icon, and disabled option</LabelHeader>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              isSearchable={false}\r\n              options={PACKAGE_OPTIONS}\r\n              themeConfig={THEME_CONFIG}\r\n              caretIcon={customCaretIcon}\r\n              getOptionValue={getOptionValue}\r\n              renderOptionLabel={renderOptionLabel}\r\n              getIsOptionDisabled={getIsOptionDisabled}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport const Async = () => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [options, setOptions] = useState<Option[]>(() => createAsyncOptions(5, 'Initial'));\r\n  const onInputChange = useCallback((): void => setIsLoading(true), []);\r\n\r\n  const onSearchChange = useCallback((value: string): void => {\r\n    mockHttpRequest()\r\n      .then(() => {\r\n        const count = getRandomInt(1, 5);\r\n        const nextOptions = createAsyncOptions(count, `Search text: ${value || 'Initial'}`);\r\n        setOptions(nextOptions);\r\n      })\r\n      .catch((e) => console.error(e))\r\n      .then(() => setIsLoading(false));\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Async Mode</Title>\r\n      <Hr />\r\n      <ListWrapper>\r\n        Add the <code>async</code> property to enable async mode. There is one key difference\r\n        in core functionality with async mode - changes to search input value will not cause\r\n        the <code>useMenuOptions</code> effect to run. The rest of hooking into async mode is\r\n        achieved using some combination of the properties found below\r\n        . <em>Properties onInputChange and onSearchChange should be memoized.</em>\r\n        <List>\r\n          <ListItem>\r\n            <TextHeader>onInputChange(value: string): void</TextHeader> -\r\n            callback executed directly following the input control's <code>onChange</code> event.\r\n            This callback is not debounced, so it fires immediately. This is a good\r\n            place to set a stateful loading property in your parent component that is mapped to\r\n            react-functional-select's <code>isLoading</code> property.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>onSearchChange(value: string): void</TextHeader> -\r\n            callback executed following component state updates for\r\n            the <code>debouncedInputValue</code>. The debounce is set using\r\n            the <code>inputDelay</code> property. This callback is a good place for your\r\n            http fetch request and post-request logic (i.e. setting isLoading false).\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>inputDelay?: number</TextHeader> - As mentioned above, this can be\r\n            set to a positive integer in order to debounce updates to the search input value\r\n            following input change events. This property directly maps to the <code>delay</code> in\r\n            milliconds passed to the <code>setTimeout</code> method.\r\n          </ListItem>\r\n          <ListItem>\r\n            <TextHeader>isLoading?: boolean</TextHeader> - When true, a loading animation will\r\n            appear in the far-right of the control and take the place of the clear icon (if shown).\r\n            Additionally, it will hide options in the menu and instead, display a loading message.\r\n            The loading message text defaults to 'Loading...', but can be overriden via\r\n            the <code>loadingMsg</code> property.\r\n          </ListItem>\r\n        </List>\r\n      </ListWrapper>\r\n      <SubTitle>Demo</SubTitle>\r\n      <Hr />\r\n      <Card>\r\n        <CardHeader>\r\n          <LabelNote>Search debounced 375ms and mock HTTP call resolves after 500ms</LabelNote>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <SelectContainer>\r\n            <Select\r\n              async\r\n              isClearable\r\n              inputDelay={375}\r\n              options={options}\r\n              isLoading={isLoading}\r\n              onInputChange={onInputChange}\r\n              onSearchChange={onSearchChange}\r\n            />\r\n          </SelectContainer>\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};",locationsMap:{"single-select":{startLoc:{col:28,line:46},endLoc:{col:1,line:131},startBody:{col:28,line:46},endBody:{col:1,line:131}},"multi-select":{startLoc:{col:27,line:133},endLoc:{col:1,line:247},startBody:{col:27,line:133},endBody:{col:1,line:247}},styling:{startLoc:{col:23,line:249},endLoc:{col:1,line:374},startBody:{col:23,line:249},endBody:{col:1,line:374}},events:{startLoc:{col:22,line:376},endLoc:{col:1,line:498},startBody:{col:22,line:376},endBody:{col:1,line:498}},methods:{startLoc:{col:23,line:500},endLoc:{col:1,line:579},startBody:{col:23,line:500},endBody:{col:1,line:579}},filtering:{startLoc:{col:25,line:581},endLoc:{col:1,line:675},startBody:{col:25,line:581},endBody:{col:1,line:675}},windowing:{startLoc:{col:25,line:677},endLoc:{col:1,line:774},startBody:{col:25,line:677},endBody:{col:1,line:774}},advanced:{startLoc:{col:24,line:776},endLoc:{col:1,line:855},startBody:{col:24,line:776},endBody:{col:1,line:855}},async:{startLoc:{col:21,line:857},endLoc:{col:1,line:935},startBody:{col:21,line:857},endBody:{col:1,line:935}}}}),title:"React Functional Select"},function SingleSelect(){var _useCallbackState2=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),isInvalid=_useCallbackState2[0],setIsInvalid=_useCallbackState2[1],_useCallbackState4=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),isLoading=_useCallbackState4[0],setIsLoading=_useCallbackState4[1],_useCallbackState6=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),isDisabled=_useCallbackState6[0],setIsDisabled=_useCallbackState6[1],_useCallbackState8=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),isClearable=_useCallbackState8[0],setIsClearable=_useCallbackState8[1],_useCallbackState10=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),isSearchable=_useCallbackState10[0],setIsSearchable=_useCallbackState10[1],getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getOptionLabel=Object(react.useCallback)((function(option){return"".concat(option.city,", ").concat(option.state)}),[]);return Object(react.useEffect)((function(){isDisabled&&setIsInvalid(!1)}),[isDisabled]),react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Single-select"),react_default.a.createElement(Hr,null),react_default.a.createElement(Paragraph,null,"In this story's source code, notice that the callback function properties ",react_default.a.createElement("code",null,"getOptionValue")," and ",react_default.a.createElement("code",null,"getOptionLabel")," are wrapped in a ",react_default.a.createElement("code",null,"useCallback"),". While not required, ",react_default.a.createElement("em",null," strongly prefer "),"memoization of any callback function property whenever possible. This will boost performance and reduce the amount of renders as these properties are referenced in the dependency arrays of ",react_default.a.createElement("code",null,"useCallbacks"),", ",react_default.a.createElement("code",null,"useEffects"),", and ",react_default.a.createElement("code",null,"useMemos"),". When defined in a functional component, wrap in a ",react_default.a.createElement("code",null,"useCallback"),"; when defined in a legacy class component, ensure proper binding to ",react_default.a.createElement("code",null,"this"),". Alternatively, if there is no dependency on any state, you can opt to hoist functions outside of the component entirely."),react_default.a.createElement(Paragraph,null,"The ",react_default.a.createElement("code",null,"options")," property should also be memoized. Either consume it directly from a state management store, or make sure it is stable by avoiding inline or render-based mutations."),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,null,react_default.a.createElement(CheckboxGroup,null,react_default.a.createElement(components_Checkbox,{label:"Searchable",checked:isSearchable,onCheck:setIsSearchable}),react_default.a.createElement(components_Checkbox,{label:"Clearable",checked:isClearable,onCheck:setIsClearable}),react_default.a.createElement(components_Checkbox,{label:"Disabled",checked:isDisabled,onCheck:setIsDisabled}),react_default.a.createElement(components_Checkbox,{label:"Invalid",checked:isInvalid,readOnly:isDisabled,onCheck:setIsInvalid}),react_default.a.createElement(components_Checkbox,{label:"Loading",checked:isLoading,onCheck:setIsLoading}))),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{isLoading:isLoading,isInvalid:isInvalid,options:CITY_OPTIONS,isDisabled:isDisabled,isClearable:isClearable,isSearchable:isSearchable,getOptionValue:getOptionValue,getOptionLabel:getOptionLabel})))))}),index_stories_MultiSelect=function MultiSelect(){var _useCallbackState12=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),openMenuOnClick=_useCallbackState12[0],setOpenMenuOnClick=_useCallbackState12[1],_useCallbackState14=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),closeMenuOnSelect=_useCallbackState14[0],setCloseMenuOnSelect=_useCallbackState14[1],_useCallbackState16=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),blurInputOnSelect=_useCallbackState16[0],setBlurInputOnSelect=_useCallbackState16[1],_useCallbackState18=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),hideSelectedOptions=_useCallbackState18[0],setHideSelectedOptions=_useCallbackState18[1],_useCallbackState20=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),useRenderMultiOptions=_useCallbackState20[0],setUseRenderMultiOptions=_useCallbackState20[1],getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getOptionLabel=Object(react.useCallback)((function(option){return"".concat(option.city,", ").concat(option.state)}),[]),renderMultiOptions=Object(react.useCallback)((function(_ref){var selected=_ref.selected,renderOptionLabel=_ref.renderOptionLabel;return react_default.a.createElement(react.Fragment,null,selected.length&&renderOptionLabel(selected[0].data),selected.length>1&&react_default.a.createElement(OtherSpan,null,"(+".concat(selected.length-1," ").concat(2===selected.length?"other":"others",")")))}),[]);return react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Multi-select"),react_default.a.createElement(Hr,null),react_default.a.createElement(ListWrapper,null,"Add the ",react_default.a.createElement("code",null,"isMulti")," property to allow for multiple selections. While in multi-select mode, some properties are now applicable and others become more pertinent.",react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"hideSelectedOptions?: boolean")," - Hide the selected option from the menu. Default value is false, however, if undefined and ",react_default.a.createElement("code",null,"isMulti === true"),", then its value defaults to true."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"closeMenuOnSelect?: boolean")," - Close the menu of options when the user selects an option. Default value is false, however, it may be benefical to set this property to true for convenience in multi-select scenarios."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"renderMultiOptions(params: MultiParams): ReactNode")," - Optional callback function that can be used to further customize the selection label in multi-select scenarios . ",react_default.a.createElement("code",null,"params")," ","is an object that contains the ",react_default.a.createElement("code",null,"selected")," and"," ",react_default.a.createElement("code",null,"renderOptionLabel")," properties (array of selected options and function used to render individual option labels, respectively). When this function is defined, left and right arrow navigation of individual options is disabled. When using this property, it may be be a good idea to set the property ",react_default.a.createElement("code",null,"backspaceClearsValue")," ","to ",react_default.a.createElement("em",null,"false")," in order to avoid accidentally clearing all selections when searching."))),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,null,react_default.a.createElement(CheckboxGroup,null,react_default.a.createElement(components_Checkbox,{label:"closeMenuOnSelect",checked:closeMenuOnSelect,onCheck:setCloseMenuOnSelect}),react_default.a.createElement(components_Checkbox,{label:"hideSelectedOptions",checked:hideSelectedOptions,onCheck:setHideSelectedOptions}),react_default.a.createElement(components_Checkbox,{label:"blurInputOnSelect",checked:blurInputOnSelect,onCheck:setBlurInputOnSelect}),react_default.a.createElement(components_Checkbox,{label:"openMenuOnClick (click caret if false)",checked:openMenuOnClick,onCheck:setOpenMenuOnClick}),react_default.a.createElement(components_Checkbox,{label:"renderMultiOptions (custom renderer)",checked:useRenderMultiOptions,onCheck:setUseRenderMultiOptions}))),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{isMulti:!0,isClearable:!0,isSearchable:!0,options:CITY_OPTIONS,getOptionValue:getOptionValue,getOptionLabel:getOptionLabel,openMenuOnClick:openMenuOnClick,blurInputOnSelect:blurInputOnSelect,closeMenuOnSelect:closeMenuOnSelect,hideSelectedOptions:hideSelectedOptions,backspaceClearsValue:!useRenderMultiOptions,renderMultiOptions:useRenderMultiOptions?renderMultiOptions:void 0})))))},index_stories_Styling=function Styling(){var _useState2=index_stories_slicedToArray(Object(react.useState)(void 0),2),themeConfig=_useState2[0],setThemeConfig=_useState2[1],_useCallbackState22=index_stories_slicedToArray(useCallbackState_useCallbackState(null),2),selectedOption=_useCallbackState22[0],setSelectedOption=_useCallbackState22[1],menuItemSize=selectedOption&&selectedOption.value===ThemeEnum.LARGE_TEXT?44:35,memoizedMarkupNode=Object(react.useMemo)((function(){return react_default.a.createElement(components_CodeMarkup,{language:"markup",header:"Class Markup",data:CLASS_NAME_HTML})}),[]);return Object(react.useEffect)((function(){if(selectedOption){var value=selectedOption.value;setThemeConfig(ThemeConfigMap[value])}}),[selectedOption]),react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Styling"),react_default.a.createElement(Hr,null),react_default.a.createElement(SubTitle,null,"Theming"),react_default.a.createElement(Columns,null,react_default.a.createElement(Column,{widthPercent:40},react_default.a.createElement(Content,null,"react-functional-select uses"," ",react_default.a.createElement(components_PackageLink,STYLED_COMPONENTS_PACKAGE)," to handle its styling. The root node is wrapped in styled-component's"," ",react_default.a.createElement("code",null,"ThemeProvider")," wrapper component which gives all child styled-components access to the provided theme via React's context API. To override react-functional-select's default theme, pass an object to the ",react_default.a.createElement("code",null,"themeConfig")," property - any matching properties will replace those in the default theme."),react_default.a.createElement(Content,null,"Starting in ",react_default.a.createElement("strong",null,"v2.0.0"),", some of the nested objects in the ",react_default.a.createElement("code",null,"themeConfig")," object contain a ",react_default.a.createElement("code",null,"css")," ","property of type"," ",react_default.a.createElement("code",null,"string | FlattenSimpleInterpolation | undefined")," ","(default value is undefined). This property can be used to pass raw CSS styles as a string or wrapped in"," ",react_default.a.createElement(components_PackageLink,STYLED_COMPONENTS_PACKAGE)," exported"," ",react_default.a.createElement("code",null,"css")," function. Those objects are: select, control, icon, menu, noOptions, multiValue, and input."),react_default.a.createElement(Content,null,"Starting in ",react_default.a.createElement("strong",null,"v2.7.0"),", the control object in"," ",react_default.a.createElement("code",null,"themeConfig")," has the property ",react_default.a.createElement("code",null,"focusedCss")," - which is similar to the ",react_default.a.createElement("code",null,"css")," property, except that it is only applied when the select control is focused (and removed when blurred).")),react_default.a.createElement(Column,{widthPercent:60},react_default.a.createElement(components_CodeMarkup,{textColor:"#79b6f2",language:"javascript",data:THEME_DEFAULTS,header:"Theme Defaults",formatFn:stringifyJavaScriptObj}))),react_default.a.createElement(SubTitle,null,"Using Classes"),react_default.a.createElement(Columns,null,react_default.a.createElement(Column,{widthPercent:40},react_default.a.createElement(Content,null,"If you want to style the component using CSS classes, set the"," ",react_default.a.createElement("code",null,"addClassNames")," prop to true and it will then generate"," ",react_default.a.createElement("code",null,"className")," attributes for that specific instance of the component. These are the classes that are available:"),react_default.a.createElement(ListWrapper,{className:"is-class-list"},react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,dom.r),react_default.a.createElement(ListItem,null,dom.i),react_default.a.createElement(ListItem,null,dom.l),react_default.a.createElement(ListItem,null,dom.b),react_default.a.createElement(ListItem,null,dom.d),react_default.a.createElement(ListItem,null,dom.f),react_default.a.createElement(ListItem,null,dom.k),react_default.a.createElement(ListItem,null,"".concat(dom.n,", ").concat(dom.p,", ").concat(dom.q,", ").concat(dom.o))))),react_default.a.createElement(Column,{widthPercent:60},memoizedMarkupNode)),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,null,react_default.a.createElement(LabelHeader,null,"Try selecting themeConfig objects below")),react_default.a.createElement(CardBody,null,react_default.a.createElement(Columns,null,react_default.a.createElement(Column,{widthPercent:40},react_default.a.createElement("div",{style:SELECT_CONTAINER_STYLE},react_default.a.createElement(src.b,{options:OPTIONS,isClearable:!1,isSearchable:!1,themeConfig:themeConfig,initialValue:OPTIONS[0],menuItemSize:menuItemSize,onOptionChange:setSelectedOption}))),react_default.a.createElement(Column,{widthPercent:60},react_default.a.createElement(components_CodeMarkup,{data:themeConfig,textColor:"#79b6f2",language:"javascript",header:"theme-config",formatFn:stringifyJavaScriptObj}))))))},index_stories_Events=function Events(){var options=Object(react.useMemo)((function(){return createSelectOptions(5)}),[]),_useCallbackState24=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),addOnKeyDown=_useCallbackState24[0],setAddOnKeyDown=_useCallbackState24[1],_useCallbackState26=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),addOnMenuOpen=_useCallbackState26[0],setAddOnMenuOpen=_useCallbackState26[1],_useCallbackState28=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),addOnMenuClose=_useCallbackState28[0],setAddOnMenuClose=_useCallbackState28[1],_useCallbackState30=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),addOnInputBlur=_useCallbackState30[0],setAddOnInputBlur=_useCallbackState30[1],_useCallbackState32=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),addOnInputFocus=_useCallbackState32[0],setAddOnInputFocus=_useCallbackState32[1],_useCallbackState34=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),addOnOptionChange=_useCallbackState34[0],setAddOnOptionChange=_useCallbackState34[1],onOptionChange=Object(react.useCallback)((function(option){var optionJsonStr=JSON.stringify(option||{}).replace(/"/g,"'");utils_renderInfoToast("Selected Option: ".concat(optionJsonStr))}),[]),onMenuOpen=Object(react.useCallback)((function(){return utils_renderInfoToast("Menu opened!")}),[]),onMenuClose=Object(react.useCallback)((function(){return utils_renderInfoToast("Menu closed!")}),[]),onInputBlur=Object(react.useCallback)((function(e){return utils_renderInfoToast("Control blurred!")}),[]),onInputFocus=Object(react.useCallback)((function(e){return utils_renderInfoToast("Control focused!")}),[]),onKeyDown=Object(react.useCallback)((function(e){return utils_renderInfoToast("keydown event executed!")}),[]);return function useClearToastsOnUnmount(){Object(react.useEffect)((function(){return function(){react_toastify_esm.a.dismiss()}}),[])}(),react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Events"),react_default.a.createElement(Hr,null),react_default.a.createElement(ListWrapper,null,"There are various callback function properties that are executed following their associated events:",react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onOptionChange(data: any): void")," - executed after an option is selected or removed"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onMenuOpen(...args: any[]): void")," - executed after the menu is opened"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onMenuClose(...args: any[]): void")," - executed after the menu is closed"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onInputChange(value: string): void")," - executed after the input control's value changes"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onInputBlur(e: FocusEvent<HTMLInputElement>): void")," - executed after the input control is blurred"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onInputFocus(e: FocusEvent<HTMLInputElement>): void")," - executed after the input control is focused"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onKeyDown(e: KeyboardEvent<HTMLDivElement>, input?: string, focusedOption?: FocusedOption): void")," - executed after the onKeyDown event"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onSearchChange(value: string): void")," - executed after the input value is persisted to state; this value also evaluates the ",react_default.a.createElement("code",null,"inputDelay")," property for debouncing - this callback is really only useful when ",react_default.a.createElement("code",null,"inputDelay")," is defined, and if not, it probably makes more sense to use the ",react_default.a.createElement("code",null,"onInputChange")," callback"))),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,null,react_default.a.createElement(LabelNote,null,"Events in demo will trigger a toast notification"),react_default.a.createElement(CheckboxGroup,null,react_default.a.createElement(components_Checkbox,{label:"onOptionChange",checked:addOnOptionChange,onCheck:setAddOnOptionChange}),react_default.a.createElement(components_Checkbox,{label:"onMenuOpen",checked:addOnMenuOpen,onCheck:setAddOnMenuOpen}),react_default.a.createElement(components_Checkbox,{label:"onMenuClose",checked:addOnMenuClose,onCheck:setAddOnMenuClose}),react_default.a.createElement(components_Checkbox,{label:"onInputBlur",checked:addOnInputBlur,onCheck:setAddOnInputBlur}),react_default.a.createElement(components_Checkbox,{label:"onInputFocus",checked:addOnInputFocus,onCheck:setAddOnInputFocus}),react_default.a.createElement(components_Checkbox,{label:"onKeyDown",checked:addOnKeyDown,onCheck:setAddOnKeyDown}))),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{options:options,onKeyDown:addOnKeyDown?onKeyDown:void 0,onMenuOpen:addOnMenuOpen?onMenuOpen:void 0,onMenuClose:addOnMenuClose?onMenuClose:void 0,onInputBlur:addOnInputBlur?onInputBlur:void 0,onInputFocus:addOnInputFocus?onInputFocus:void 0,onOptionChange:addOnOptionChange?onOptionChange:void 0})))))},index_stories_Methods=function Methods(){var selectRef=Object(react.useRef)(null),options=Object(react.useMemo)((function(){return createSelectOptions(5)}),[]);return react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Methods"),react_default.a.createElement(Hr,null),react_default.a.createElement(ListWrapper,null,"Five public methods are exposed to wrapping components and are accessible via a forwarded ",react_default.a.createElement("code",null,"ref"),".",react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"blur(): void")," - blur the control programatically"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"focus(): void")," - focus the control programatically"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"toggleMenu(state?: boolean): void")," - toggle the menu programatically"),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"clearValue(): void")," - clear the current value programatically ",react_default.a.createElement("em",null,"(if an option is selected)")),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"setValue(option?: any): void")," - set the value programatically ",react_default.a.createElement("em",null,"(option will be validated)")))),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,{supportMobile:!0},react_default.a.createElement(ButtonGroup,null,react_default.a.createElement(styled_Label,null,"Methods"),react_default.a.createElement(Button,{onClick:function focusSelect(){selectRef.current&&selectRef.current.focus()}},"Focus"),react_default.a.createElement(Button,{onClick:function blurSelect(){selectRef.current&&selectRef.current.blur()}},"Blur"),react_default.a.createElement(Button,{onClick:function toggleMenuOpen(){selectRef.current&&selectRef.current.toggleMenu(!0)}},"Open Menu"),react_default.a.createElement(Button,{onClick:function clearValue(){selectRef.current&&selectRef.current.clearValue()}},"Clear Value"),react_default.a.createElement(Button,{onClick:function updateSelectedOption(){selectRef.current&&selectRef.current.setValue(options[0])}},"Set Value (1st Option)"))),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{ref:selectRef,options:options,initialValue:options[0]})))))},index_stories_Filtering=function Filtering(){var _useCallbackState36=index_stories_slicedToArray(useCallbackState_useCallbackState(!0),2),filterIgnoreCase=_useCallbackState36[0],setFilterIgnoreCase=_useCallbackState36[1],_useCallbackState38=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),useCustomFilterFunc=_useCallbackState38[0],setUseCustomFilterFunc=_useCallbackState38[1],_useCallbackState40=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),filterIgnoreAccents=_useCallbackState40[0],setFilterIgnoreAccents=_useCallbackState40[1],_useCallbackState42=index_stories_slicedToArray(useCallbackState_useCallbackState(!1),2),filterMatchFromStart=_useCallbackState42[0],setFilterMatchFromStart=_useCallbackState42[1],getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getOptionLabel=Object(react.useCallback)((function(option){return"".concat(option.city,", ").concat(option.state)}),[]),getFilterOptionString=Object(react.useCallback)((function(menuOption){return menuOption.data.state}),[]),options=Object(react.useMemo)((function(){return[].concat(_toConsumableArray(CITY_OPTIONS),[{id:11,city:"São Paulo",state:"BR"}])}),[]);return react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Filter Customization"),react_default.a.createElement(Hr,null),react_default.a.createElement(ListWrapper,null,"The default filtering functionality can be customized via the following properties:",react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"filterIgnoreCase?: boolean")," - Filter ignores case when matching strings. Default value is ",react_default.a.createElement("code",null,"true"),"."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"filterIgnoreAccents?: boolean")," - Filter ignores accents when matching strings. Default value is ",react_default.a.createElement("code",null,"false"),"."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"filterMatchFrom?: 'any' | 'start'")," - Position in source string to perform match. Default value is ",react_default.a.createElement("code",null,"'any'"),"."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"getFilterOptionString(option: MenuOption): string")," - When defined will take each option and generate a string used in the filtering process. By default, the stringified version of what is generated by ",react_default.a.createElement("code",null,"getOptionLabel"),", if definded, or the option's label as a fallback. The ",react_default.a.createElement("code",null,"MenuOption")," typed parameter that ",react_default.a.createElement("code",null,"getFilterOptionString")," accepts contains a"," ",react_default.a.createElement("code",null,"data")," property that represents the objects that comprise your ",react_default.a.createElement("code",null,"options")," property."))),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,null,react_default.a.createElement(CheckboxGroup,null,react_default.a.createElement(components_Checkbox,{label:"Ignore Case",checked:filterIgnoreCase,onCheck:setFilterIgnoreCase}),react_default.a.createElement(components_Checkbox,{label:"Ignore Accents",checked:filterIgnoreAccents,onCheck:setFilterIgnoreAccents}),react_default.a.createElement(components_Checkbox,{label:"Match from the start",checked:filterMatchFromStart,onCheck:setFilterMatchFromStart}),react_default.a.createElement(components_Checkbox,{label:"Use custom filter function (by state only)",checked:useCustomFilterFunc,onCheck:setUseCustomFilterFunc}))),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{isClearable:!0,options:options,getOptionValue:getOptionValue,getOptionLabel:getOptionLabel,filterIgnoreCase:filterIgnoreCase,filterIgnoreAccents:filterIgnoreAccents,getFilterOptionString:useCustomFilterFunc?getFilterOptionString:void 0,filterMatchFrom:filterMatchFromStart?src.a.START:src.a.ANY})))))},index_stories_Windowing=function Windowing(){var selectRef=Object(react.useRef)(null),_useState4=index_stories_slicedToArray(Object(react.useState)([]),2),options=_useState4[0],setOptions=_useState4[1],_useState6=index_stories_slicedToArray(Object(react.useState)(100),2),optionsCount=_useState6[0],setOptionsCount=_useState6[1];return Object(react.useEffect)((function(){var handler=setTimeout((function(){var nextOptions=createSelectOptions(optionsCount);setOptions(nextOptions)}),115);return function(){clearTimeout(handler)}}),[optionsCount]),Object(react.useEffect)((function(){selectRef.current&&selectRef.current.clearValue()}),[options]),react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Integrated Windowing"),react_default.a.createElement(Hr,null),react_default.a.createElement(ListWrapper,null,"Option data is 'windowed' using the ",react_default.a.createElement(components_PackageLink,REACT_WINDOW_PACKAGE)," package. Aside from the obvious benefits provided by only rendering a small subset of your enumerable data (rather than bloating the DOM with an excessive amount of nodes), 'windowing' can also assist with:",react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,react_default.a.createElement("strong",null,"Efficient memory allocation"),". 'Windowing' naturally lends itself to the dynamic generation of attributes/values as each object comes into your renderer's scope (as opposed to allocating this data upfront for each object in your list). This way you can perform this work just when you absolutely need to and then can immediately release it for the GC to cleanup. As an example I am generating the ",react_default.a.createElement("code",null,"onClick"),", ",react_default.a.createElement("code",null,"id"),", and ",react_default.a.createElement("code",null,"className")," attributes for each ",react_default.a.createElement("code",null,"menuOption")," as they get passed to the ",react_default.a.createElement("code",null,"<Option />")," renderer component."),react_default.a.createElement(ListItem,null,react_default.a.createElement("strong",null,"Functional architecture"),". The flexibility provided through only having to manage subsets of your list allows for a more dynamic application. By breaking your code out into smaller, 'pure' child components, you can write code that scales well and becomes open to performance optimizations - most notably, memoization. Simple components that rely on the props passed to it (rather than its own managed state) to generate its JSX are likely candidates for memoization (testing & debugging becomes much easier as well).")),react_default.a.createElement("em",null,"Note: "),"The only time any noticeable performance degradation will be observed is during search input updates when the ",react_default.a.createElement("code",null,"options")," count reaches the high tens of thousands. To work around this, the ",react_default.a.createElement("code",null,"inputDelay")," (number in milliseconds) can be set to debounce the input value. That way, the ",react_default.a.createElement("code",null,"menuOptions")," will not be recalculated on every keystroke."),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,{supportMobile:!0},react_default.a.createElement(ButtonGroup,null,react_default.a.createElement(styled_Label,null,"Options Count"),react_default.a.createElement(components_OptionsCountButton,{count:100,optionsCount:optionsCount,setOptionsCount:setOptionsCount}),react_default.a.createElement(components_OptionsCountButton,{count:1e3,optionsCount:optionsCount,setOptionsCount:setOptionsCount}),react_default.a.createElement(components_OptionsCountButton,{count:5e3,optionsCount:optionsCount,setOptionsCount:setOptionsCount}),react_default.a.createElement(components_OptionsCountButton,{count:25e3,optionsCount:optionsCount,setOptionsCount:setOptionsCount}))),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{ref:selectRef,options:options})))))},index_stories_Advanced=function Advanced(){var getOptionValue=Object(react.useCallback)((function(option){return option.id}),[]),getIsOptionDisabled=Object(react.useCallback)((function(option){return option.name===PACKAGE_OPTIONS[3].name}),[]),renderOptionLabel=Object(react.useCallback)((function(option){return react_default.a.createElement(OptionContainer,null,react_default.a.createElement(OptionImg,{src:REACT_LOGO_SVG,isDisabled:getIsOptionDisabled(option)}),react_default.a.createElement(OptionName,null,option.name))}),[getIsOptionDisabled]),customCaretIcon=Object(react.useCallback)((function(_ref2){var menuOpen=_ref2.menuOpen;return react_default.a.createElement(ChevronDownSvg,{menuOpen:menuOpen,"aria-hidden":"true",viewBox:"0 0 448 512"},react_default.a.createElement("path",{d:"M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"}))}),[]);return react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Advanced Customization"),react_default.a.createElement(Hr,null),react_default.a.createElement(ListWrapper,null,"Implementation using a couple of the more specialized properties.",react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"renderOptionLabel(option: any): React.ReactNode")," - Callback function with a return type of ",react_default.a.createElement("code",null,"ReactNode"),". Use this property in cases where the standard ",react_default.a.createElement("code",null,"getOptionLabel")," property won't meet your needs (for instance, you want to render each option's label using custom JSX). More complex option labels will likely equate to longer render durations - this can translate into a flash of empty space when a user first starts scrolling. In order to prevent this, the ",react_default.a.createElement("code",null,"menuOverscanCount")," property can be increased to render additional rows outside of the visible area. The default value for this property is 1 and it is important to note that increasing this value can negatively impact performance."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"getIsOptionDisabled(option: any): boolean")," - Callback function with a return type of ",react_default.a.createElement("code",null,"Boolean"),". When it evaluates to a value of true, that option iteration will be rendered ",react_default.a.createElement("em",null,"disabled"),". As an alternative, you can also pass a property of ",react_default.a.createElement("code",null,"isDisabled")," with each option. Use of these two options - they cannot both be specified."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"caretIcon: ReactNode | (...args: any[]) => ReactNode")," - A custom node or a function that returns a node can used for the ",react_default.a.createElement("code",null,"caretIcon")," property. When using a function, an object containing stateful data is forwarded and can be used to style your custom node accordingly. The state is ",react_default.a.createElement("code",null,"{ menuOpen, isLoading, isInvalid, isDisabled }")," of type ",react_default.a.createElement("code",null,"Record<string, boolean>"),". The ",react_default.a.createElement("code",null,"clearIcon")," property has an identical definition."))),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,null,react_default.a.createElement(LabelHeader,null,"JSX labels, custom caret icon, and disabled option")),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{isSearchable:!1,options:PACKAGE_OPTIONS,themeConfig:THEME_CONFIG,caretIcon:customCaretIcon,getOptionValue:getOptionValue,renderOptionLabel:renderOptionLabel,getIsOptionDisabled:getIsOptionDisabled})))))},index_stories_Async=function Async(){var _useState8=index_stories_slicedToArray(Object(react.useState)(!1),2),isLoading=_useState8[0],setIsLoading=_useState8[1],_useState10=index_stories_slicedToArray(Object(react.useState)((function(){return createAsyncOptions(5,"Initial")})),2),options=_useState10[0],setOptions=_useState10[1],onInputChange=Object(react.useCallback)((function(){return setIsLoading(!0)}),[]),onSearchChange=Object(react.useCallback)((function(value){(function mockHttpRequest(){return _mockHttpRequest.apply(this,arguments)})().then((function(){var count=function getRandomInt(min,max){return Math.floor(Math.random()*(max-min+1))+min}(1,5),nextOptions=createAsyncOptions(count,"Search text: ".concat(value||"Initial"));setOptions(nextOptions)})).catch((function(e){return console.error(e)})).then((function(){return setIsLoading(!1)}))}),[]);return react_default.a.createElement(Container,null,react_default.a.createElement(Title,null,"Async Mode"),react_default.a.createElement(Hr,null),react_default.a.createElement(ListWrapper,null,"Add the ",react_default.a.createElement("code",null,"async")," property to enable async mode. There is one key difference in core functionality with async mode - changes to search input value will not cause the ",react_default.a.createElement("code",null,"useMenuOptions")," effect to run. The rest of hooking into async mode is achieved using some combination of the properties found below . ",react_default.a.createElement("em",null,"Properties onInputChange and onSearchChange should be memoized."),react_default.a.createElement(List,null,react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onInputChange(value: string): void")," - callback executed directly following the input control's ",react_default.a.createElement("code",null,"onChange")," event. This callback is not debounced, so it fires immediately. This is a good place to set a stateful loading property in your parent component that is mapped to react-functional-select's ",react_default.a.createElement("code",null,"isLoading")," property."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"onSearchChange(value: string): void")," - callback executed following component state updates for the ",react_default.a.createElement("code",null,"debouncedInputValue"),". The debounce is set using the ",react_default.a.createElement("code",null,"inputDelay")," property. This callback is a good place for your http fetch request and post-request logic (i.e. setting isLoading false)."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"inputDelay?: number")," - As mentioned above, this can be set to a positive integer in order to debounce updates to the search input value following input change events. This property directly maps to the ",react_default.a.createElement("code",null,"delay")," in milliconds passed to the ",react_default.a.createElement("code",null,"setTimeout")," method."),react_default.a.createElement(ListItem,null,react_default.a.createElement(TextHeader,null,"isLoading?: boolean")," - When true, a loading animation will appear in the far-right of the control and take the place of the clear icon (if shown). Additionally, it will hide options in the menu and instead, display a loading message. The loading message text defaults to 'Loading...', but can be overriden via the ",react_default.a.createElement("code",null,"loadingMsg")," property."))),react_default.a.createElement(SubTitle,null,"Demo"),react_default.a.createElement(Hr,null),react_default.a.createElement(Card,null,react_default.a.createElement(CardHeader,null,react_default.a.createElement(LabelNote,null,"Search debounced 375ms and mock HTTP call resolves after 500ms")),react_default.a.createElement(CardBody,null,react_default.a.createElement(SelectContainer,null,react_default.a.createElement(src.b,{async:!0,isClearable:!0,inputDelay:375,options:options,isLoading:isLoading,onInputChange:onInputChange,onSearchChange:onSearchChange})))))}},1021:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),react_dom=__webpack_require__(43),react_dom_default=__webpack_require__.n(react_dom),react_toastify_esm=__webpack_require__(94),styled_components_browser_esm=__webpack_require__(1);function _templateObject4(){var data=_taggedTemplateLiteral(["\n  .Toastify__toast-container {\n    z-index: 9999;\n    position: fixed;\n    padding: 4px;\n    width: 320px;\n    box-sizing: border-box;\n    color: #fff;\n    &--top-right {\n      top: 1em;\n      right: 1em;\n    }\n\n    @media only screen and (max-width: 480px) {\n      width: 100vw;\n      padding: 0;\n      left: 0;\n      margin: 0;\n      &--top-right {\n        top: 0;\n      }\n    }\n\n    .Toastify__toast {\n      position: relative;\n      min-height: 64px;\n      box-sizing: border-box;\n      margin-bottom: 1rem;\n      padding: 8px;\n      border-radius: 3px;\n      box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.1), 0 2px 15px 0 rgba(0, 0, 0, 0.05);\n      display: flex;\n      justify-content: space-between;\n      max-height: 800px;\n      overflow: hidden;\n      font-size: 1.075rem;\n      font-weight: 400;\n      font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;\n      cursor: pointer;\n      direction: ltr;\n      &--default {\n        background: #fff;\n        color: #aaa;\n      }\n      &--info {\n        color: #fff;\n        background: #149df3;\n      }\n      &-body {\n        flex: 1;\n        margin: auto 0 auto 0.75rem;\n      }\n\n      @media only screen and (max-width: 480px) {\n        font-size: 1rem;\n        border-radius: 0;\n        margin-bottom: 0.25rem;\n      }\n    }\n\n    .Toastify__close-button {\n      color: #fff;\n      background: transparent;\n      outline: none;\n      border: none;\n      padding: 0;\n      cursor: pointer;\n      opacity: 0.7;\n      transition: 0.3s ease;\n      align-self: flex-start;\n      &--default {\n        color: #000;\n        opacity: 0.3;\n      }\n      & > svg {\n        fill: currentColor;\n        height: 16px;\n        width: 14px;\n        font-weight: 700;\n      }\n      &:hover,\n      &:focus {\n        opacity: 1;\n      }\n    }\n\n    .Toastify__progress-bar {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 5px;\n      z-index: 9999;\n      opacity: 0.7;\n      background-color: rgba(255, 255, 255, 0.7);\n      transform-origin: left;\n      &--animated {\n        animation: "," linear 1 forwards;\n      }\n      &--controlled {\n        transition: transform 0.2s;\n      }\n      &--default {\n        background: linear-gradient(\n          to right,\n          #4cd964,\n          #5ac8fa,\n          #007aff,\n          #34aadc,\n          #5856d6,\n          #ff2d55\n        );\n      }\n    }\n  }\n\n  .Toastify__bounce-enter {\n    &--top-right {\n      animation-name: ",";\n    }\n  }\n\n  .Toastify__bounce-exit {\n    &--top-right {\n      animation-name: ",";\n    }\n  }\n"]);return _templateObject4=function _templateObject4(){return data},data}function _templateObject3(){var data=_taggedTemplateLiteral(["\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n  } from {\n    opacity: 0;\n    transform: translate3d(3000px, 0, 0);\n  } 60% {\n    opacity: 1;\n    transform: translate3d(-25px, 0, 0);\n  } 75% {\n    transform: translate3d(10px, 0, 0);\n  } 90% {\n    transform: translate3d(-5px, 0, 0);\n  } to {\n    transform: none;\n  }\n"]);return _templateObject3=function _templateObject3(){return data},data}function _templateObject2(){var data=_taggedTemplateLiteral(["\n  20% {\n    opacity: 1;\n    transform: translate3d(-20px, 0, 0);\n  } to {\n    opacity: 0;\n    transform: translate3d(2000px, 0, 0);\n  }\n"]);return _templateObject2=function _templateObject2(){return data},data}function _templateObject(){var data=_taggedTemplateLiteral(["\n  0% {\n    transform: scaleX(1);\n  } 100% {\n    transform: scaleX(0);\n  }\n"]);return _templateObject=function _templateObject(){return data},data}function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var TOASTIFY_TRACK_PROGRESS=Object(styled_components_browser_esm.e)(_templateObject()),TOASTIFY_BOUCE_OUT_RIGHT=Object(styled_components_browser_esm.e)(_templateObject2()),TOASTIFY_BOUNCE_IN_RIGHT=Object(styled_components_browser_esm.e)(_templateObject3()),ReactToastifyCSS=Object(styled_components_browser_esm.c)(_templateObject4(),TOASTIFY_TRACK_PROGRESS,TOASTIFY_BOUNCE_IN_RIGHT,TOASTIFY_BOUCE_OUT_RIGHT);function global_style_templateObject(){var data=function global_style_taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  html {\n    line-height: 1.15;\n    text-size-adjust: 100%;\n    text-rendering: optimizeLegibility;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  }\n\n  body {\n    flex: 1;\n    margin: 0;\n    display: flex;\n    font-size: 1rem;\n    font-weight: 400;\n    text-align: left;\n    line-height: 1.5;\n    min-height: 120vh;\n    flex-direction: column;\n    background-color: #fff;\n    color: rgba(0, 0, 0, 0.87);\n    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;\n  }\n\n  em {\n    font-weight: 600;\n  }\n\n  strong {\n    color: black;\n    font-weight: 600;\n    font-size: 1.025em;\n  }\n\n  code {\n    line-height: 1.4;\n    font-size: 0.96em;\n    border-radius: 3px;\n    word-break: break-word;\n    padding: .15em .2em .05em;\n    color: rgba(0, 0, 0, 0.87);\n    background-color: rgba(30, 167, 253, 0.15);\n    font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;\n\n    @media only screen and (max-width: 525px) {\n      padding: .1em .25em .1em;\n    }\n  }\n\n  ',"\n"]);return global_style_templateObject=function _templateObject(){return data},data}var el,GlobalStyle=Object(styled_components_browser_esm.b)(global_style_templateObject(),ReactToastifyCSS),_globalStyleEl=document.getElementById("temp2-global-style")||((el=document.createElement("div")).id="temp2-global-style",document.head.appendChild(el),el);react_dom_default.a.render(react_default.a.createElement(GlobalStyle,null),_globalStyleEl,(function completeSetupDOM(){react_toastify_esm.a.configure({autoClose:2500,draggable:!1,newestOnTop:!0,position:"top-right"}),_globalStyleEl&&document.head.removeChild(_globalStyleEl)}))},1026:function(module,exports,__webpack_require__){__webpack_require__(406),__webpack_require__(793),__webpack_require__(794),__webpack_require__(985),module.exports=__webpack_require__(989)},497:function(module,exports){},545:function(module,exports){},582:function(module,exports){},627:function(module,exports){},669:function(module,exports){},712:function(module,exports){},742:function(module,exports){},794:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(338)},985:function(module,exports,__webpack_require__){"use strict";var _clientApi=__webpack_require__(135),_clientLogger=__webpack_require__(69),_configFilename=__webpack_require__(1021);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},989:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(338).configure)([__webpack_require__(990)],module,!1)}).call(this,__webpack_require__(134)(module))},990:function(module,exports,__webpack_require__){var map={"./index.stories.tsx":1020};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=990}}]);
//# sourceMappingURL=main~24120820.7bef835a44a5857dbcbe.bundle.js.map